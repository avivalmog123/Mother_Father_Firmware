
Mother_Father_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800ecf0  0800ecf0  0001ecf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0f0  0800f0f0  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0f0  0800f0f0  0001f0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0f8  0800f0f8  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0f8  0800f0f8  0001f0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0fc  0800f0fc  0001f0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800f100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203c4  2**0
                  CONTENTS
 10 .bss          00003678  200003c8  200003c8  000203c8  2**3
                  ALLOC
 11 ._user_heap_stack 00001800  20003a40  20003a40  000203c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d740  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046eb  00000000  00000000  0003db34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  00042220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001568  00000000  00000000  00043968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a5f  00000000  00000000  00044ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a12  00000000  00000000  0006b92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0e91  00000000  00000000  0008c341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015d1d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070dc  00000000  00000000  0015d224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c8 	.word	0x200003c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecd4 	.word	0x0800ecd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	0800ecd4 	.word	0x0800ecd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <LPS22HB_Set_Handle>:

/* Includes ------------------------------------------------------------------*/
#include "LPS22HB.h"

void LPS22HB_Set_Handle(LPS22HB_t* LPS22HB, I2C_HandleTypeDef* hi2cx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	LPS22HB->hi2c = hi2cx;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LPS22HB_Set_Address>:

void LPS22HB_Set_Address(LPS22HB_t* LPS22HB, LPS22HB_ADDR_t Address)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	LPS22HB->address = Address;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	711a      	strb	r2, [r3, #4]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LPS22HB_Init>:

LPS22HB_RESULT_t LPS22HB_Init(LPS22HB_t* LPS22HB, LPS22HB_ODR_t ODR)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b088      	sub	sp, #32
 8000ebe:	af04      	add	r7, sp, #16
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70fb      	strb	r3, [r7, #3]
	uint8_t dt[1];


	if ( HAL_I2C_IsDeviceReady(LPS22HB->hi2c, LPS22HB->address, 3, 0xFFFF) != HAL_OK ) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	b299      	uxth	r1, r3
 8000ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	f003 fe5b 	bl	8004b90 <HAL_I2C_IsDeviceReady>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <LPS22HB_Init+0x2a>
		return LPS22HB_NO_DEVICE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e023      	b.n	8000f2c <LPS22HB_Init+0x72>
	}

	//	Who am I check
	HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_WHO_AM_I, 1, dt, 1, 0xFFFF);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	b299      	uxth	r1, r3
 8000eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	220f      	movs	r2, #15
 8000f02:	f003 fc1f 	bl	8004744 <HAL_I2C_Mem_Read>

    if (dt[0] != I_AM_LPS22HB) {
 8000f06:	7b3b      	ldrb	r3, [r7, #12]
 8000f08:	2bb1      	cmp	r3, #177	; 0xb1
 8000f0a:	d001      	beq.n	8000f10 <LPS22HB_Init+0x56>
    	return LPS22HB_FAIL;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e00d      	b.n	8000f2c <LPS22HB_Init+0x72>
    }
    if ( LPS22HB_Set_ODR(LPS22HB, ODR) != LPS22HB_OK ) {
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f886 	bl	8001026 <LPS22HB_Set_ODR>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <LPS22HB_Init+0x6a>
    	return LPS22HB_FAIL;
 8000f20:	2302      	movs	r3, #2
 8000f22:	e003      	b.n	8000f2c <LPS22HB_Init+0x72>
    }
    LPS22HB->odr = ODR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	78fa      	ldrb	r2, [r7, #3]
 8000f28:	759a      	strb	r2, [r3, #22]

    return LPS22HB_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <LPS22HB_Update_Data>:

LPS22HB_RESULT_t LPS22HB_Update_Data(LPS22HB_t* LPS22HB)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af04      	add	r7, sp, #16
 8000f3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res[2];
	uint8_t dt[3];

	// 	get pressure data
	res[0] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_PRESS_POUT_XL | 0x80, 1, dt, 3, 0xFFFF);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	791b      	ldrb	r3, [r3, #4]
 8000f44:	b299      	uxth	r1, r3
 8000f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	22a8      	movs	r2, #168	; 0xa8
 8000f5a:	f003 fbf3 	bl	8004744 <HAL_I2C_Mem_Read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	733b      	strb	r3, [r7, #12]
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8000f62:	7abb      	ldrb	r3, [r7, #10]
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	7a7b      	ldrb	r3, [r7, #9]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	7a3a      	ldrb	r2, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60da      	str	r2, [r3, #12]
	LPS22HB->pressure = (float)LPS22HB->pressure_raw / (4096.0f * 1.3332239f);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001000 <LPS22HB_Update_Data+0xcc>
 8000f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	edc3 7a02 	vstr	s15, [r3, #8]

	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	791b      	ldrb	r3, [r3, #4]
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	22ab      	movs	r2, #171	; 0xab
 8000fae:	f003 fbc9 	bl	8004744 <HAL_I2C_Mem_Read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	737b      	strb	r3, [r7, #13]
	LPS22HB->temperature_raw = dt[1] << 8 | dt[0];
 8000fb6:	7a7b      	ldrb	r3, [r7, #9]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	7a3b      	ldrb	r3, [r7, #8]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	829a      	strh	r2, [r3, #20]
	LPS22HB->temperature = (float)LPS22HB->temperature_raw / 100.0f;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001004 <LPS22HB_Update_Data+0xd0>
 8000fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a04 	vstr	s15, [r3, #16]

	if( res[0] != HAL_OK || res[1] != HAL_OK ) {
 8000fe4:	7b3b      	ldrb	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <LPS22HB_Update_Data+0xbc>
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <LPS22HB_Update_Data+0xc0>
		return LPS22HB_FAIL;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e000      	b.n	8000ff6 <LPS22HB_Update_Data+0xc2>
	}

	return LPS22HB_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	45aaa715 	.word	0x45aaa715
 8001004:	42c80000 	.word	0x42c80000

08001008 <LPS22HB_Get_Temperature>:
{
	return LPS22HB->pressure_raw;
}

float LPS22HB_Get_Temperature(LPS22HB_t* LPS22HB)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	return LPS22HB->temperature;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	ee07 3a90 	vmov	s15, r3
}
 8001018:	eeb0 0a67 	vmov.f32	s0, s15
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LPS22HB_Set_ODR>:
{
	return LPS22HB->temperature_raw;
}

LPS22HB_RESULT_t LPS22HB_Set_ODR(LPS22HB_t* LPS22HB, LPS22HB_ODR_t odr)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af02      	add	r7, sp, #8
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef res[3];
	uint8_t dt[2];

	dt[0] = LPS22HB_CTRL_REG1;
 8001032:	2310      	movs	r3, #16
 8001034:	723b      	strb	r3, [r7, #8]
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	b299      	uxth	r1, r3
 8001040:	f107 0208 	add.w	r2, r7, #8
 8001044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2302      	movs	r3, #2
 800104c:	f003 f856 	bl	80040fc <HAL_I2C_Master_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	733b      	strb	r3, [r7, #12]
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	b299      	uxth	r1, r3
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2302      	movs	r3, #2
 800106a:	f003 f945 	bl	80042f8 <HAL_I2C_Master_Receive>
 800106e:	4603      	mov	r3, r0
 8001070:	737b      	strb	r3, [r7, #13]

	dt[1] = dt[0];
 8001072:	7a3b      	ldrb	r3, [r7, #8]
 8001074:	727b      	strb	r3, [r7, #9]
	dt[1] &= 0xff ^ 0x70;
 8001076:	7a7b      	ldrb	r3, [r7, #9]
 8001078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800107c:	b2db      	uxtb	r3, r3
 800107e:	727b      	strb	r3, [r7, #9]
	dt[1] |= odr;
 8001080:	7a7a      	ldrb	r2, [r7, #9]
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	4313      	orrs	r3, r2
 8001086:	b2db      	uxtb	r3, r3
 8001088:	727b      	strb	r3, [r7, #9]
	dt[0] =LPS22HB_CTRL_REG1;
 800108a:	2310      	movs	r3, #16
 800108c:	723b      	strb	r3, [r7, #8]

	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	b299      	uxth	r1, r3
 8001098:	f107 0208 	add.w	r2, r7, #8
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2302      	movs	r3, #2
 80010a4:	f003 f82a 	bl	80040fc <HAL_I2C_Master_Transmit>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73bb      	strb	r3, [r7, #14]

	if( res[0] != HAL_OK || res[1] != HAL_OK || res[2] != HAL_OK ) {
 80010ac:	7b3b      	ldrb	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <LPS22HB_Set_ODR+0x98>
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <LPS22HB_Set_ODR+0x98>
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <LPS22HB_Set_ODR+0x9c>
		return LPS22HB_FAIL;
 80010be:	2302      	movs	r3, #2
 80010c0:	e000      	b.n	80010c4 <LPS22HB_Set_ODR+0x9e>
	}

	return LPS22HB_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <LPS22HB_Set_FIFO>:
	return LPS22HB_OK;

}

LPS22HB_RESULT_t LPS22HB_Set_FIFO(LPS22HB_t* LPS22HB, LPS22HB_FIFO_EN_t fifo_en, LPS22HB_FIFO_MODE_t fifo_mode)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
 80010d8:	4613      	mov	r3, r2
 80010da:	70bb      	strb	r3, [r7, #2]
	LPS22HB_RESULT_t res[3];

	res[0] = LPS22HB_Write_Reg(LPS22HB, LPS22HB_CTRL_REG2, 0x40, fifo_en);
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	2111      	movs	r1, #17
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f835 	bl	8001152 <LPS22HB_Write_Reg>
 80010e8:	4603      	mov	r3, r0
 80010ea:	733b      	strb	r3, [r7, #12]
	res[1] = LPS22HB_Reset_FIFO(LPS22HB);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f81a 	bl	8001126 <LPS22HB_Reset_FIFO>
 80010f2:	4603      	mov	r3, r0
 80010f4:	737b      	strb	r3, [r7, #13]
	res[2] = LPS22HB_Write_Reg(LPS22HB, LPS22HB_FIFO_CTRL, 0xE0, fifo_mode);
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	22e0      	movs	r2, #224	; 0xe0
 80010fa:	2114      	movs	r1, #20
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f828 	bl	8001152 <LPS22HB_Write_Reg>
 8001102:	4603      	mov	r3, r0
 8001104:	73bb      	strb	r3, [r7, #14]

	if( res[0] != LPS22HB_OK || res[1] != LPS22HB_OK || res[2] != LPS22HB_OK ) {
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d105      	bne.n	8001118 <LPS22HB_Set_FIFO+0x4c>
 800110c:	7b7b      	ldrb	r3, [r7, #13]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <LPS22HB_Set_FIFO+0x4c>
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <LPS22HB_Set_FIFO+0x50>
		return LPS22HB_FAIL;
 8001118:	2302      	movs	r3, #2
 800111a:	e000      	b.n	800111e <LPS22HB_Set_FIFO+0x52>
	}

	return LPS22HB_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <LPS22HB_Reset_FIFO>:

LPS22HB_RESULT_t LPS22HB_Reset_FIFO(LPS22HB_t* LPS22HB)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	LPS22HB_RESULT_t res;
	res = LPS22HB_Write_Reg(LPS22HB, LPS22HB_FIFO_CTRL, 0xE0, 0x00);
 800112e:	2300      	movs	r3, #0
 8001130:	22e0      	movs	r2, #224	; 0xe0
 8001132:	2114      	movs	r1, #20
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f80c 	bl	8001152 <LPS22HB_Write_Reg>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]

	if( res != LPS22HB_OK ) {
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <LPS22HB_Reset_FIFO+0x22>
		return LPS22HB_FAIL;
 8001144:	2302      	movs	r3, #2
 8001146:	e000      	b.n	800114a <LPS22HB_Reset_FIFO+0x24>
	}

	return LPS22HB_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <LPS22HB_Write_Reg>:

LPS22HB_RESULT_t LPS22HB_Write_Reg(LPS22HB_t* LPS22HB, uint8_t reg_addr, uint8_t mask, uint8_t data)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af02      	add	r7, sp, #8
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	4608      	mov	r0, r1
 800115c:	4611      	mov	r1, r2
 800115e:	461a      	mov	r2, r3
 8001160:	4603      	mov	r3, r0
 8001162:	70fb      	strb	r3, [r7, #3]
 8001164:	460b      	mov	r3, r1
 8001166:	70bb      	strb	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
	LPS22HB_RESULT_t read_res;
	HAL_StatusTypeDef write_res;
	uint8_t dt[2];

	read_res = LPS22HB_Read_Reg(LPS22HB, reg_addr, dt);
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	4619      	mov	r1, r3
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f82e 	bl	80011d6 <LPS22HB_Read_Reg>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]

	dt[1] = dt[0];
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	737b      	strb	r3, [r7, #13]
	dt[1] &= 0xff ^ mask;
 8001182:	7b7a      	ldrb	r2, [r7, #13]
 8001184:	78bb      	ldrb	r3, [r7, #2]
 8001186:	43db      	mvns	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4013      	ands	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	737b      	strb	r3, [r7, #13]
	dt[1] |= data;
 8001190:	7b7a      	ldrb	r2, [r7, #13]
 8001192:	787b      	ldrb	r3, [r7, #1]
 8001194:	4313      	orrs	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	737b      	strb	r3, [r7, #13]

	dt[0] = reg_addr;
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	733b      	strb	r3, [r7, #12]
	write_res = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 2, 0xFFFF);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	791b      	ldrb	r3, [r3, #4]
 80011a6:	b299      	uxth	r1, r3
 80011a8:	f107 020c 	add.w	r2, r7, #12
 80011ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2302      	movs	r3, #2
 80011b4:	f002 ffa2 	bl	80040fc <HAL_I2C_Master_Transmit>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73bb      	strb	r3, [r7, #14]

	if( read_res != LPS22HB_OK || write_res != HAL_OK ) {
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <LPS22HB_Write_Reg+0x76>
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <LPS22HB_Write_Reg+0x7a>
		return LPS22HB_FAIL;
 80011c8:	2302      	movs	r3, #2
 80011ca:	e000      	b.n	80011ce <LPS22HB_Write_Reg+0x7c>
	}

	return LPS22HB_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <LPS22HB_Read_Reg>:

LPS22HB_RESULT_t LPS22HB_Read_Reg(LPS22HB_t* LPS22HB, uint8_t reg_addr, uint8_t* p_dt)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b08a      	sub	sp, #40	; 0x28
 80011da:	af04      	add	r7, sp, #16
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	460b      	mov	r3, r1
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef res;

	res = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, reg_addr, 1, p_dt, 1, 0xFFFF);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	b299      	uxth	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2301      	movs	r3, #1
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	f003 fa9f 	bl	8004744 <HAL_I2C_Mem_Read>
 8001206:	4603      	mov	r3, r0
 8001208:	75fb      	strb	r3, [r7, #23]

	if( res != HAL_OK ) {
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <LPS22HB_Read_Reg+0x3e>
		return LPS22HB_FAIL;
 8001210:	2302      	movs	r3, #2
 8001212:	e000      	b.n	8001216 <LPS22HB_Read_Reg+0x40>
	}

	return LPS22HB_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <pcap04_write_command>:

/*-------------------------------------------------------------------------------------------*/
/*-------------------------------------- FUNCTIONS ------------------------------------------*/
/*-------------------------------------------------------------------------------------------*/
void pcap04_write_command(PCAP04_OPCODE opcode, int pcap04Unit)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
	setAddressLow(pcap04Unit);
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f001 f8ed 	bl	800240c <setAddressLow>

	HAL_SPI_Transmit( &hspi1 , &opcode , 1 , SPI_TIMEOUT );
 8001232:	1df9      	adds	r1, r7, #7
 8001234:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001238:	2201      	movs	r2, #1
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <pcap04_write_command+0x2c>)
 800123c:	f006 f949 	bl	80074d2 <HAL_SPI_Transmit>
	setAllSelectors();
 8001240:	f001 f954 	bl	80024ec <setAllSelectors>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20001edc 	.word	0x20001edc

08001250 <pcap04_power_on_reset>:

void pcap04_power_on_reset(int pcap04Unit)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	pcap04_write_command(POWER_ON_RESET, pcap04Unit);
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	2088      	movs	r0, #136	; 0x88
 800125c:	f7ff ffe0 	bl	8001220 <pcap04_write_command>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <pcap04_initialize>:

void pcap04_initialize(int pcap04Unit)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	pcap04_write_command(INITIALIZE,  pcap04Unit);
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	208a      	movs	r0, #138	; 0x8a
 8001274:	f7ff ffd4 	bl	8001220 <pcap04_write_command>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <pcap04_cdc_start_conversion>:

void pcap04_cdc_start_conversion(int pcap04Unit)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	pcap04_write_command(CDC_START_CONVERSION, pcap04Unit);
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	208c      	movs	r0, #140	; 0x8c
 800128c:	f7ff ffc8 	bl	8001220 <pcap04_write_command>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <pcap04_rdc_start_conversion>:

void pcap04_rdc_start_conversion(int pcap04Unit)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	pcap04_write_command(RDC_START_CONVERSION, pcap04Unit );
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	208e      	movs	r0, #142	; 0x8e
 80012a4:	f7ff ffbc 	bl	8001220 <pcap04_write_command>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <pcap04_nv_store>:
{
	pcap04_write_command(DSP_TRIG ,  pcap04Unit);
}

void pcap04_nv_store(int pcap04Unit)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	pcap04_write_command(NV_STORE, pcap04Unit );
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	2096      	movs	r0, #150	; 0x96
 80012bc:	f7ff ffb0 	bl	8001220 <pcap04_write_command>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <pcap04_nv_recall>:

void pcap04_nv_recall(int pcap04Unit)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	pcap04_write_command(NV_RECALL, pcap04Unit );
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	2099      	movs	r0, #153	; 0x99
 80012d4:	f7ff ffa4 	bl	8001220 <pcap04_write_command>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <pcap04_nv_erase>:

void pcap04_nv_erase(int pcap04Unit)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	pcap04_write_command(NV_ERASE,pcap04Unit );
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	209c      	movs	r0, #156	; 0x9c
 80012ec:	f7ff ff98 	bl	8001220 <pcap04_write_command>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <pcap04_read_test>:

bool __attribute__((optimize("O0"))) pcap04_read_test(int pcap04Unit)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
	setAllSelectors();
 8001300:	f001 f8f4 	bl	80024ec <setAllSelectors>
	HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f001 fff7 	bl	80032f8 <HAL_Delay>
	setAddressLow(pcap04Unit);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f001 f87e 	bl	800240c <setAddressLow>
	uint8_t data_rx[2] , data_tx[2] = { TEST_READ , DUMMY_BYTE };
 8001310:	237e      	movs	r3, #126	; 0x7e
 8001312:	813b      	strh	r3, [r7, #8]

	HAL_SPI_TransmitReceive( &hspi1 , data_tx , data_rx , 2 , SPI_TIMEOUT );
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	f107 0108 	add.w	r1, r7, #8
 800131c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2302      	movs	r3, #2
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <pcap04_read_test+0x4c>)
 8001326:	f006 fa10 	bl	800774a <HAL_SPI_TransmitReceive>

	setAllSelectors();
 800132a:	f001 f8df 	bl	80024ec <setAllSelectors>

	return ( ( data_rx[1] == EXPECTED_READ_TEST_BYTE ) ? true : false );
 800132e:	7b7b      	ldrb	r3, [r7, #13]
 8001330:	2b11      	cmp	r3, #17
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20001edc 	.word	0x20001edc

08001348 <pcap04_write_memory>:

void pcap04_write_memory(uint16_t address , uint8_t data, int pcap04Unit )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	603a      	str	r2, [r7, #0]
 8001352:	80fb      	strh	r3, [r7, #6]
 8001354:	460b      	mov	r3, r1
 8001356:	717b      	strb	r3, [r7, #5]
	setAddressLow(pcap04Unit);
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f001 f857 	bl	800240c <setAddressLow>
	uint8_t data_tx[3] = { WRITE_MEMORY_OPCODE(address) , address & 0xFF , data };
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b29b      	uxth	r3, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	b25b      	sxtb	r3, r3
 800136c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001370:	b25b      	sxtb	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	733b      	strb	r3, [r7, #12]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	737b      	strb	r3, [r7, #13]
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit( &hspi1 , data_tx , 3 , SPI_TIMEOUT );
 8001380:	f107 010c 	add.w	r1, r7, #12
 8001384:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001388:	2203      	movs	r2, #3
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <pcap04_write_memory+0x54>)
 800138c:	f006 f8a1 	bl	80074d2 <HAL_SPI_Transmit>
	setAllSelectors();
 8001390:	f001 f8ac 	bl	80024ec <setAllSelectors>

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20001edc 	.word	0x20001edc

080013a0 <pcap04_read_memory>:


uint8_t pcap04_read_memory(uint16_t address, int pcap04Unit )

{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	80fb      	strh	r3, [r7, #6]
	setAddressLow(pcap04Unit);
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f001 f82d 	bl	800240c <setAddressLow>

	uint8_t data_rx[3] , data_tx[3] = { READ_MEMORY_OPCODE(address) , address & 0xFF , DUMMY_BYTE };
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	723b      	strb	r3, [r7, #8]
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	727b      	strb	r3, [r7, #9]
 80013d0:	2300      	movs	r3, #0
 80013d2:	72bb      	strb	r3, [r7, #10]

	HAL_SPI_TransmitReceive( &hspi1 , data_tx , data_rx , 3 , SPI_TIMEOUT );
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	f107 0108 	add.w	r1, r7, #8
 80013dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2303      	movs	r3, #3
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <pcap04_read_memory+0x58>)
 80013e6:	f006 f9b0 	bl	800774a <HAL_SPI_TransmitReceive>

	setAllSelectors();
 80013ea:	f001 f87f 	bl	80024ec <setAllSelectors>

	return data_rx[2];
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20001edc 	.word	0x20001edc

080013fc <pcap04_write_configuration>:

void pcap04_write_configuration( uint16_t address , uint8_t data, int pcap04Unit )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	80fb      	strh	r3, [r7, #6]
 8001408:	460b      	mov	r3, r1
 800140a:	717b      	strb	r3, [r7, #5]
	setAddressLow(pcap04Unit);
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f000 fffd 	bl	800240c <setAddressLow>

	uint8_t data_tx[3] = { WRITE_CONFIGURATION , address | 0xC0 , data };
 8001412:	23a3      	movs	r3, #163	; 0xa3
 8001414:	733b      	strb	r3, [r7, #12]
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800141e:	b2db      	uxtb	r3, r3
 8001420:	737b      	strb	r3, [r7, #13]
 8001422:	797b      	ldrb	r3, [r7, #5]
 8001424:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit( &hspi1 , data_tx , 3 , SPI_TIMEOUT );
 8001426:	f107 010c 	add.w	r1, r7, #12
 800142a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800142e:	2203      	movs	r2, #3
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <pcap04_write_configuration+0x48>)
 8001432:	f006 f84e 	bl	80074d2 <HAL_SPI_Transmit>

	setAllSelectors();
 8001436:	f001 f859 	bl	80024ec <setAllSelectors>

}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20001edc 	.word	0x20001edc

08001448 <pcap04_read_configuration>:

uint8_t pcap04_read_configuration(uint16_t address, int pcap04Unit )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af02      	add	r7, sp, #8
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	80fb      	strh	r3, [r7, #6]
	setAddressLow(pcap04Unit);
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f000 ffd9 	bl	800240c <setAddressLow>
	uint8_t data_rx[3] , data_tx[3] = { READ_CONFIGURATION , address | 0xC0 , DUMMY_BYTE };
 800145a:	2323      	movs	r3, #35	; 0x23
 800145c:	723b      	strb	r3, [r7, #8]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001466:	b2db      	uxtb	r3, r3
 8001468:	727b      	strb	r3, [r7, #9]
 800146a:	2300      	movs	r3, #0
 800146c:	72bb      	strb	r3, [r7, #10]

	HAL_SPI_TransmitReceive( &hspi1 , data_tx , data_rx , 3 , SPI_TIMEOUT );
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	f107 0108 	add.w	r1, r7, #8
 8001476:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2303      	movs	r3, #3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <pcap04_read_configuration+0x4c>)
 8001480:	f006 f963 	bl	800774a <HAL_SPI_TransmitReceive>

	setAllSelectors();
 8001484:	f001 f832 	bl	80024ec <setAllSelectors>
	return data_rx[2];
 8001488:	7bbb      	ldrb	r3, [r7, #14]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20001edc 	.word	0x20001edc

08001498 <pcap04_read_all_result_registers>:
	return *( (uint32_t *)&data_rx[1] );
}


void __attribute__((optimize("O0"))) pcap04_read_all_result_registers(unsigned int *result , uint8_t *status,  int pcap04Unit  )
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b09a      	sub	sp, #104	; 0x68
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]

	setAddressLow(pcap04Unit);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 ffb1 	bl	800240c <setAddressLow>
	uint8_t data_rx[MAXIMUM_RESULT_BYTES + 4] , data_tx[MAXIMUM_RESULT_BYTES + 4] = { READ_RESULT_RAM ,  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 };
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <pcap04_read_all_result_registers+0xf8>)
 80014ac:	f107 0414 	add.w	r4, r7, #20
 80014b0:	461d      	mov	r5, r3
 80014b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	8023      	strh	r3, [r4, #0]
 80014be:	2300      	movs	r3, #0
 80014c0:	86fb      	strh	r3, [r7, #54]	; 0x36

	HAL_SPI_TransmitReceive( &hspi1 , data_tx , data_rx , MAXIMUM_RESULT_BYTES + 4 , SPI_TIMEOUT );
 80014c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014c6:	f107 0114 	add.w	r1, r7, #20
 80014ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2324      	movs	r3, #36	; 0x24
 80014d2:	4830      	ldr	r0, [pc, #192]	; (8001594 <pcap04_read_all_result_registers+0xfc>)
 80014d4:	f006 f939 	bl	800774a <HAL_SPI_TransmitReceive>
	for( uint8_t status_register_index = 0 ; status_register_index < 8 ; status_register_index++ )
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80014de:	e011      	b.n	8001504 <pcap04_read_all_result_registers+0x6c>
		status[status_register_index] = data_rx[ status_register_index + MAXIMUM_RESULT_BYTES + 1 ];
 80014e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80014e4:	f103 0221 	add.w	r2, r3, #33	; 0x21
 80014e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	440b      	add	r3, r1
 80014f0:	3260      	adds	r2, #96	; 0x60
 80014f2:	443a      	add	r2, r7
 80014f4:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80014f8:	701a      	strb	r2, [r3, #0]
	for( uint8_t status_register_index = 0 ; status_register_index < 8 ; status_register_index++ )
 80014fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80014fe:	3301      	adds	r3, #1
 8001500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001508:	2b07      	cmp	r3, #7
 800150a:	d9e9      	bls.n	80014e0 <pcap04_read_all_result_registers+0x48>
	for( uint8_t result_register_index = 0 ; result_register_index < 8 ; result_register_index++ )
 800150c:	2300      	movs	r3, #0
 800150e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001512:	e033      	b.n	800157c <pcap04_read_all_result_registers+0xe4>
		result[result_register_index] = ( ( data_rx[ 4 * result_register_index + 1] << 0 ) | ( data_rx[ 4 * result_register_index + 2] << 8 ) | ( data_rx[ 4 * result_register_index + 3] << 16 ) | ( data_rx[ 4 * result_register_index + 4] << 24 ) );
 8001514:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	3301      	adds	r3, #1
 800151c:	3360      	adds	r3, #96	; 0x60
 800151e:	443b      	add	r3, r7
 8001520:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001524:	461a      	mov	r2, r3
 8001526:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	3360      	adds	r3, #96	; 0x60
 8001530:	443b      	add	r3, r7
 8001532:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	431a      	orrs	r2, r3
 800153a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	3303      	adds	r3, #3
 8001542:	3360      	adds	r3, #96	; 0x60
 8001544:	443b      	add	r3, r7
 8001546:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800154a:	041b      	lsls	r3, r3, #16
 800154c:	431a      	orrs	r2, r3
 800154e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001552:	3301      	adds	r3, #1
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	3360      	adds	r3, #96	; 0x60
 8001558:	443b      	add	r3, r7
 800155a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800155e:	061b      	lsls	r3, r3, #24
 8001560:	ea42 0103 	orr.w	r1, r2, r3
 8001564:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	460a      	mov	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
	for( uint8_t result_register_index = 0 ; result_register_index < 8 ; result_register_index++ )
 8001572:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001576:	3301      	adds	r3, #1
 8001578:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800157c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001580:	2b07      	cmp	r3, #7
 8001582:	d9c7      	bls.n	8001514 <pcap04_read_all_result_registers+0x7c>
	setAllSelectors();
 8001584:	f000 ffb2 	bl	80024ec <setAllSelectors>
}
 8001588:	bf00      	nop
 800158a:	3760      	adds	r7, #96	; 0x60
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	0800ecf0 	.word	0x0800ecf0
 8001594:	20001edc 	.word	0x20001edc

08001598 <pcap04_initialization>:

void pcap04_initialization(int pcap04Unit)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	// Test SPI communication interface by sending Test Opcode
	for( uint8_t test_index = 0 ; test_index < 3 ; test_index++ )
 80015a0:	2300      	movs	r3, #0
 80015a2:	75fb      	strb	r3, [r7, #23]
 80015a4:	e008      	b.n	80015b8 <pcap04_initialization+0x20>
	{
		if( pcap04_read_test(pcap04Unit) == true )
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fea6 	bl	80012f8 <pcap04_read_test>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <pcap04_initialization+0x28>
	for( uint8_t test_index = 0 ; test_index < 3 ; test_index++ )
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	3301      	adds	r3, #1
 80015b6:	75fb      	strb	r3, [r7, #23]
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d9f3      	bls.n	80015a6 <pcap04_initialization+0xe>
 80015be:	e000      	b.n	80015c2 <pcap04_initialization+0x2a>
			break;
 80015c0:	bf00      	nop
	}
	pcap04_initialize(pcap04Unit);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fe50 	bl	8001268 <pcap04_initialize>
	HAL_Delay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f001 fe95 	bl	80032f8 <HAL_Delay>
	pcap04_power_on_reset(pcap04Unit);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fe3e 	bl	8001250 <pcap04_power_on_reset>
	HAL_Delay(1);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f001 fe8f 	bl	80032f8 <HAL_Delay>



	setAddressLow(pcap04Unit);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 ff16 	bl	800240c <setAddressLow>
	uint8_t memoryWriteTx[2] = {WRITE_MEMORY, 0x00};
 80015e0:	23a0      	movs	r3, #160	; 0xa0
 80015e2:	823b      	strh	r3, [r7, #16]
	HAL_SPI_Transmit( &hspi1 , memoryWriteTx , 2 , SPI_TIMEOUT );
 80015e4:	f107 0110 	add.w	r1, r7, #16
 80015e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ec:	2202      	movs	r2, #2
 80015ee:	4825      	ldr	r0, [pc, #148]	; (8001684 <pcap04_initialization+0xec>)
 80015f0:	f005 ff6f 	bl	80074d2 <HAL_SPI_Transmit>
	for( uint16_t memory_register_index = 0 ; memory_register_index < sizeof(Pcap04_standard_hex) ; memory_register_index++ ) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	82bb      	strh	r3, [r7, #20]
 80015f8:	e00b      	b.n	8001612 <pcap04_initialization+0x7a>
		HAL_SPI_Transmit( &hspi1 , &Pcap04_standard_hex[memory_register_index] , 1 , SPI_TIMEOUT );
 80015fa:	8abb      	ldrh	r3, [r7, #20]
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <pcap04_initialization+0xf0>)
 80015fe:	1899      	adds	r1, r3, r2
 8001600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001604:	2201      	movs	r2, #1
 8001606:	481f      	ldr	r0, [pc, #124]	; (8001684 <pcap04_initialization+0xec>)
 8001608:	f005 ff63 	bl	80074d2 <HAL_SPI_Transmit>
	for( uint16_t memory_register_index = 0 ; memory_register_index < sizeof(Pcap04_standard_hex) ; memory_register_index++ ) {
 800160c:	8abb      	ldrh	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	82bb      	strh	r3, [r7, #20]
 8001612:	8abb      	ldrh	r3, [r7, #20]
 8001614:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8001618:	d3ef      	bcc.n	80015fa <pcap04_initialization+0x62>

	}

	setAllSelectors();
 800161a:	f000 ff67 	bl	80024ec <setAllSelectors>

	HAL_Delay(1);
 800161e:	2001      	movs	r0, #1
 8001620:	f001 fe6a 	bl	80032f8 <HAL_Delay>
	setAddressLow(pcap04Unit);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fef1 	bl	800240c <setAddressLow>

	uint8_t configWriteTx[2] = {WRITE_CONFIGURATION, 0xC0};
 800162a:	f24c 03a3 	movw	r3, #49315	; 0xc0a3
 800162e:	81bb      	strh	r3, [r7, #12]
	HAL_SPI_Transmit( &hspi1 , configWriteTx , 2 , SPI_TIMEOUT );
 8001630:	f107 010c 	add.w	r1, r7, #12
 8001634:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001638:	2202      	movs	r2, #2
 800163a:	4812      	ldr	r0, [pc, #72]	; (8001684 <pcap04_initialization+0xec>)
 800163c:	f005 ff49 	bl	80074d2 <HAL_SPI_Transmit>
	for( uint8_t configuration_register_index = 0 ; configuration_register_index < sizeof(Pcap04_motherfather_configuration) ; configuration_register_index++ )
 8001640:	2300      	movs	r3, #0
 8001642:	74fb      	strb	r3, [r7, #19]
 8001644:	e00b      	b.n	800165e <pcap04_initialization+0xc6>
	{
		HAL_SPI_Transmit( &hspi1 , &Pcap04_motherfather_configuration[configuration_register_index] , 1 , SPI_TIMEOUT );
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <pcap04_initialization+0xf4>)
 800164a:	1899      	adds	r1, r3, r2
 800164c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001650:	2201      	movs	r2, #1
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <pcap04_initialization+0xec>)
 8001654:	f005 ff3d 	bl	80074d2 <HAL_SPI_Transmit>
	for( uint8_t configuration_register_index = 0 ; configuration_register_index < sizeof(Pcap04_motherfather_configuration) ; configuration_register_index++ )
 8001658:	7cfb      	ldrb	r3, [r7, #19]
 800165a:	3301      	adds	r3, #1
 800165c:	74fb      	strb	r3, [r7, #19]
 800165e:	7cfb      	ldrb	r3, [r7, #19]
 8001660:	2b33      	cmp	r3, #51	; 0x33
 8001662:	d9f0      	bls.n	8001646 <pcap04_initialization+0xae>
	}

	setAllSelectors();
 8001664:	f000 ff42 	bl	80024ec <setAllSelectors>


	HAL_Delay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f001 fe45 	bl	80032f8 <HAL_Delay>
	pcap04_cdc_start_conversion(pcap04Unit);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fe06 	bl	8001280 <pcap04_cdc_start_conversion>
	HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f001 fe3f 	bl	80032f8 <HAL_Delay>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001edc 	.word	0x20001edc
 8001688:	20000034 	.word	0x20000034
 800168c:	20000000 	.word	0x20000000

08001690 <pcap04_read_results>:


void pcap04_read_results(int pcap04Unit)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
		pcap04_read_all_result_registers(pcap04_results , pcap04_status, pcap04Unit ); // first reading has transfer effect
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4906      	ldr	r1, [pc, #24]	; (80016b4 <pcap04_read_results+0x24>)
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <pcap04_read_results+0x28>)
 800169e:	f7ff fefb 	bl	8001498 <pcap04_read_all_result_registers>
		pcap04_read_all_result_registers(pcap04_results , pcap04_status, pcap04Unit ); // so reading again
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4903      	ldr	r1, [pc, #12]	; (80016b4 <pcap04_read_results+0x24>)
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <pcap04_read_results+0x28>)
 80016a8:	f7ff fef6 	bl	8001498 <pcap04_read_all_result_registers>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200006f8 	.word	0x200006f8
 80016b8:	200006fc 	.word	0x200006fc
 80016bc:	00000000 	.word	0x00000000

080016c0 <parseResults>:
	}

}


void parseResults(int *unparsedResult, double *capacitance) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 6; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e03c      	b.n	800174a <parseResults+0x8a>
	static int result[2];
    result[0] = (unparsedResult[i] >> 27) & 0x1F; // First 5 bits
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0edb      	lsrs	r3, r3, #27
 80016dc:	461a      	mov	r2, r3
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <parseResults+0xa8>)
 80016e0:	601a      	str	r2, [r3, #0]
    result[1] = unparsedResult[i] & 0x7FFFFFF;     // Last 27 bits
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <parseResults+0xa8>)
 80016f2:	6053      	str	r3, [r2, #4]
    double decimalPart  = (double)result[1] / (2<<26);
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <parseResults+0xa8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff13 	bl	8000524 <__aeabi_i2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <parseResults+0xac>)
 8001704:	f7ff f8a2 	bl	800084c <__aeabi_ddiv>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    capacitance[i] = 5.6*(result[0] + decimalPart);
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <parseResults+0xa8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff05 	bl	8000524 <__aeabi_i2d>
 800171a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800171e:	f7fe fdb5 	bl	800028c <__adddf3>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	18d4      	adds	r4, r2, r3
 8001732:	a30b      	add	r3, pc, #44	; (adr r3, 8001760 <parseResults+0xa0>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe ff5e 	bl	80005f8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	e9c4 2300 	strd	r2, r3, [r4]
	for(int i = 0; i < 6; i++) {
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b05      	cmp	r3, #5
 800174e:	ddbf      	ble.n	80016d0 <parseResults+0x10>
	}
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w
 8001760:	66666666 	.word	0x66666666
 8001764:	40166666 	.word	0x40166666
 8001768:	200003e4 	.word	0x200003e4
 800176c:	41a00000 	.word	0x41a00000

08001770 <Pc_Comm_App_Processing>:
 * @brief  void Pc_Comm_App_Processing( uint8_t * ptr, uint16_t BufferLength)
 * Update Function Later
 * @param
 * @retval
 ******************************************************************************/
void Pc_Comm_App_Processing(uint8_t *ptr, uint16_t BufferLength) {
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b0dc      	sub	sp, #368	; 0x170
 8001774:	af00      	add	r7, sp, #0
 8001776:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800177a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800177e:	6018      	str	r0, [r3, #0]
 8001780:	460a      	mov	r2, r1
 8001782:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001786:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 800178a:	801a      	strh	r2, [r3, #0]
	float sht3_temperature, lps22_temperature, humidity, pressure;
	uint16_t address;
	uint8_t data;
	uint8_t pcap04Unit;
	PcCommAppLayerStruct_T *message = (PcCommAppLayerStruct_T*) (ptr);
 800178c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001790:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	// Data length variable
	uint8_t dataLength = (message->dllMsb * 256) + (message->dllLsb);
 800179a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800179e:	78db      	ldrb	r3, [r3, #3]
 80017a0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	char temp_string[100], humid_string[100], pressure_string[100];

	// uint16_t read;
	// Switch case of mother father functions, will add more detail later
	switch ((Pc_Comm_App_Opcode) message->opcode) {
 80017a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	2b13      	cmp	r3, #19
 80017ac:	f200 81cc 	bhi.w	8001b48 <Pc_Comm_App_Processing+0x3d8>
 80017b0:	a201      	add	r2, pc, #4	; (adr r2, 80017b8 <Pc_Comm_App_Processing+0x48>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	08001809 	.word	0x08001809
 80017bc:	0800181f 	.word	0x0800181f
 80017c0:	080018eb 	.word	0x080018eb
 80017c4:	08001b47 	.word	0x08001b47
 80017c8:	08001925 	.word	0x08001925
 80017cc:	08001933 	.word	0x08001933
 80017d0:	08001965 	.word	0x08001965
 80017d4:	0800198b 	.word	0x0800198b
 80017d8:	080019bd 	.word	0x080019bd
 80017dc:	080019e3 	.word	0x080019e3
 80017e0:	08001a6f 	.word	0x08001a6f
 80017e4:	08001a85 	.word	0x08001a85
 80017e8:	08001a9b 	.word	0x08001a9b
 80017ec:	08001ab1 	.word	0x08001ab1
 80017f0:	08001ac7 	.word	0x08001ac7
 80017f4:	08001add 	.word	0x08001add
 80017f8:	08001af3 	.word	0x08001af3
 80017fc:	08001b49 	.word	0x08001b49
 8001800:	08001b09 	.word	0x08001b09
 8001804:	08001b11 	.word	0x08001b11
	case SET_SELECTOR_EN:
		pcap04Unit = message->data[0];
 8001808:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800180c:	795b      	ldrb	r3, [r3, #5]
 800180e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		setAddressLow(pcap04Unit);
 8001812:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fdf8 	bl	800240c <setAddressLow>

		break;
 800181c:	e194      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
	// You can get temp measurement from sht3 or from lps22 sensor
	case GET_SHT3X_TEMP_MEAS:

		sht3x_read_temperature_and_humidity(&sht3x, &sht3_temperature, &humidity);
 800181e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001822:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001826:	4619      	mov	r1, r3
 8001828:	48ca      	ldr	r0, [pc, #808]	; (8001b54 <Pc_Comm_App_Processing+0x3e4>)
 800182a:	f000 ffa7 	bl	800277c <sht3x_read_temperature_and_humidity>
		// Example Temperature = 25.0123
		char *tmpSign = (sht3_temperature < 0) ? "-" : "";
 800182e:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8001832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	d501      	bpl.n	8001840 <Pc_Comm_App_Processing+0xd0>
 800183c:	4bc6      	ldr	r3, [pc, #792]	; (8001b58 <Pc_Comm_App_Processing+0x3e8>)
 800183e:	e000      	b.n	8001842 <Pc_Comm_App_Processing+0xd2>
 8001840:	4bc6      	ldr	r3, [pc, #792]	; (8001b5c <Pc_Comm_App_Processing+0x3ec>)
 8001842:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		float tmpVal = (sht3_temperature < 0) ? -sht3_temperature : sht3_temperature;
 8001846:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 800184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d504      	bpl.n	800185e <Pc_Comm_App_Processing+0xee>
 8001854:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8001858:	eef1 7a67 	vneg.f32	s15, s15
 800185c:	e001      	b.n	8001862 <Pc_Comm_App_Processing+0xf2>
 800185e:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8001862:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

		int tmpInt1 = tmpVal;                  // Get the integer (25).
 8001866:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 800186a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186e:	ee17 3a90 	vmov	r3, s15
 8001872:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 8001876:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
		int tmpInt2 = trunc(tmpFrac * 10000);  // Turn into integer (123).
 800188e:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 8001892:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001b60 <Pc_Comm_App_Processing+0x3f0>
 8001896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189a:	ee17 0a90 	vmov	r0, s15
 800189e:	f7fe fe53 	bl	8000548 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ec43 2b10 	vmov	d0, r2, r3
 80018aa:	f00d f9e1 	bl	800ec70 <trunc>
 80018ae:	ec53 2b10 	vmov	r2, r3, d0
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f939 	bl	8000b2c <__aeabi_d2iz>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		// Print as parts, note that you need 0-padding for fractional bit.

		//sprintf (temp_string, "temp_read = %s%d.%04d ", tmpSign, tmpInt1, tmpInt2);
		//sprintf( (char *)temp_string , "0x%08X    " , temperature );

		gcvt(sht3_temperature, 6, temp_string);
 80018c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe3f 	bl	8000548 <__aeabi_f2d>
 80018ca:	4604      	mov	r4, r0
 80018cc:	460d      	mov	r5, r1
 80018ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018d2:	4619      	mov	r1, r3
 80018d4:	2006      	movs	r0, #6
 80018d6:	ec45 4b10 	vmov	d0, r4, r5
 80018da:	f00a fdff 	bl	800c4dc <gcvt>
		PcCommAppLayerSendCommString(temp_string);
 80018de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f982 	bl	8001bec <PcCommAppLayerSendCommString>
		break;
 80018e8:	e12e      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case GET_HUMID_MEAS:
		sht3x_read_temperature_and_humidity(&sht3x, &sht3_temperature, &humidity);
 80018ea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80018ee:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80018f2:	4619      	mov	r1, r3
 80018f4:	4897      	ldr	r0, [pc, #604]	; (8001b54 <Pc_Comm_App_Processing+0x3e4>)
 80018f6:	f000 ff41 	bl	800277c <sht3x_read_temperature_and_humidity>
		//sprintf( (char *)humid_string , "0x%08X    " , humidity );
		gcvt(humidity, 6, humid_string);
 80018fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe22 	bl	8000548 <__aeabi_f2d>
 8001904:	4604      	mov	r4, r0
 8001906:	460d      	mov	r5, r1
 8001908:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800190c:	4619      	mov	r1, r3
 800190e:	2006      	movs	r0, #6
 8001910:	ec45 4b10 	vmov	d0, r4, r5
 8001914:	f00a fde2 	bl	800c4dc <gcvt>
		PcCommAppLayerSendCommString(humid_string);
 8001918:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f965 	bl	8001bec <PcCommAppLayerSendCommString>
		break;
 8001922:	e111      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>


		break;

	case TEST:
		returnStatus = HAL_OK;
 8001924:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <Pc_Comm_App_Processing+0x3f4>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
		// Send status result
		PcCommAppLayerSendCommString(sendTest);
 800192a:	488f      	ldr	r0, [pc, #572]	; (8001b68 <Pc_Comm_App_Processing+0x3f8>)
 800192c:	f000 f95e 	bl	8001bec <PcCommAppLayerSendCommString>
	//	PcCommAppLayerSendCommResponse(sendTest);
		break;
 8001930:	e10a      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
	case PCAP04_WRITE_MEMORY:

		address = message->data[0];
 8001932:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001936:	795b      	ldrb	r3, [r3, #5]
 8001938:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		data = message->data[1];
 800193c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001940:	799b      	ldrb	r3, [r3, #6]
 8001942:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
		pcap04Unit = message->data[2];
 8001946:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800194a:	79db      	ldrb	r3, [r3, #7]
 800194c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_write_memory(address, data, pcap04Unit);
 8001950:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8001954:	f897 1155 	ldrb.w	r1, [r7, #341]	; 0x155
 8001958:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fcf3 	bl	8001348 <pcap04_write_memory>

		break;
 8001962:	e0f1      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case PCAP04_READ_MEMORY:
		address = message->data[0];
 8001964:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		pcap04Unit = message->data[1];
 800196e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001972:	799b      	ldrb	r3, [r3, #6]
 8001974:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_read_memory(address,pcap04Unit);
 8001978:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 800197c:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fd0c 	bl	80013a0 <pcap04_read_memory>

		break;
 8001988:	e0de      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case PCAP04_WRITE_CONFIG:
		address = message->data[0];
 800198a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800198e:	795b      	ldrb	r3, [r3, #5]
 8001990:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		data = message->data[1];
 8001994:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001998:	799b      	ldrb	r3, [r3, #6]
 800199a:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
		pcap04Unit = message->data[2];
 800199e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019a2:	79db      	ldrb	r3, [r3, #7]
 80019a4:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_write_configuration(address, data, pcap04Unit);
 80019a8:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 80019ac:	f897 1155 	ldrb.w	r1, [r7, #341]	; 0x155
 80019b0:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd21 	bl	80013fc <pcap04_write_configuration>

		break;
 80019ba:	e0c5      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
	case PCAP04_READ_CONFIG:
		address = message->data[0];
 80019bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019c0:	795b      	ldrb	r3, [r3, #5]
 80019c2:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		pcap04Unit = message->data[1];
 80019c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019ca:	799b      	ldrb	r3, [r3, #6]
 80019cc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_read_configuration(address, pcap04Unit);
 80019d0:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 80019d4:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fd34 	bl	8001448 <pcap04_read_configuration>

		break;
 80019e0:	e0b2      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case PCAP04_READ_RESULTS_RAM:
		pcap04Unit = message->data[0];
 80019e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		int capacitanceToSend = message->data[1];
 80019ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019f0:	799b      	ldrb	r3, [r3, #6]
 80019f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

		pcap04_initialization(pcap04Unit);
 80019f6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fdcc 	bl	8001598 <pcap04_initialization>


		pcap04_read_results(pcap04Unit);
 8001a00:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fe43 	bl	8001690 <pcap04_read_results>

		 parseResults(pcap04_results, capacitance);
 8001a0a:	4958      	ldr	r1, [pc, #352]	; (8001b6c <Pc_Comm_App_Processing+0x3fc>)
 8001a0c:	4858      	ldr	r0, [pc, #352]	; (8001b70 <Pc_Comm_App_Processing+0x400>)
 8001a0e:	f7ff fe57 	bl	80016c0 <parseResults>


		 for(int i=0; i < 6; i++){
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001a18:	e01a      	b.n	8001a50 <Pc_Comm_App_Processing+0x2e0>

			 gcvt(capacitance[i], 15, capacitancesString[i]);
 8001a1a:	4a54      	ldr	r2, [pc, #336]	; (8001b6c <Pc_Comm_App_Processing+0x3fc>)
 8001a1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	ed93 7b00 	vldr	d7, [r3]
 8001a28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a2c:	2264      	movs	r2, #100	; 0x64
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <Pc_Comm_App_Processing+0x404>)
 8001a34:	4413      	add	r3, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	200f      	movs	r0, #15
 8001a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3e:	eef0 0a67 	vmov.f32	s1, s15
 8001a42:	f00a fd4b 	bl	800c4dc <gcvt>
		 for(int i=0; i < 6; i++){
 8001a46:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001a50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	dde0      	ble.n	8001a1a <Pc_Comm_App_Processing+0x2aa>

		 }
		PcCommAppLayerSendCommString(capacitancesString[capacitanceToSend]);
 8001a58:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a5c:	2264      	movs	r2, #100	; 0x64
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a44      	ldr	r2, [pc, #272]	; (8001b74 <Pc_Comm_App_Processing+0x404>)
 8001a64:	4413      	add	r3, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f8c0 	bl	8001bec <PcCommAppLayerSendCommString>

		break;
 8001a6c:	e06c      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case PCAP04_POWER_ON_RESET:
		pcap04Unit = message->data[0];
 8001a6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a72:	795b      	ldrb	r3, [r3, #5]
 8001a74:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_power_on_reset(pcap04Unit);
 8001a78:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fbe7 	bl	8001250 <pcap04_power_on_reset>

		break;
 8001a82:	e061      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
	case PCAP04_INITIALIZE:
		pcap04Unit = message->data[0];
 8001a84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a88:	795b      	ldrb	r3, [r3, #5]
 8001a8a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_initialization(pcap04Unit);
 8001a8e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fd80 	bl	8001598 <pcap04_initialization>

		break;
 8001a98:	e056      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case PCAP04_CDC_START_CONVERSION:
		pcap04Unit = message->data[0];
 8001a9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a9e:	795b      	ldrb	r3, [r3, #5]
 8001aa0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_cdc_start_conversion(pcap04Unit);
 8001aa4:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fbe9 	bl	8001280 <pcap04_cdc_start_conversion>

		break;
 8001aae:	e04b      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case PCAP04_RDC_START_CONVERSION:
		pcap04Unit = message->data[0];
 8001ab0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ab4:	795b      	ldrb	r3, [r3, #5]
 8001ab6:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_rdc_start_conversion(pcap04Unit);
 8001aba:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fbea 	bl	8001298 <pcap04_rdc_start_conversion>

		break;
 8001ac4:	e040      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
	case PCAP04_NV_STORE:
		pcap04Unit = message->data[0];
 8001ac6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001aca:	795b      	ldrb	r3, [r3, #5]
 8001acc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_nv_store(pcap04Unit);
 8001ad0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fbeb 	bl	80012b0 <pcap04_nv_store>

		break;
 8001ada:	e035      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
	case PCAP04_NV_RECALL:
		pcap04Unit = message->data[0];
 8001adc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ae0:	795b      	ldrb	r3, [r3, #5]
 8001ae2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_nv_recall(pcap04Unit);
 8001ae6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fbec 	bl	80012c8 <pcap04_nv_recall>

		break;
 8001af0:	e02a      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case PCAP04_NV_ERASE:
		pcap04Unit = message->data[0];
 8001af2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001af6:	795b      	ldrb	r3, [r3, #5]
 8001af8:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		pcap04_nv_erase(pcap04Unit);
 8001afc:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fbed 	bl	80012e0 <pcap04_nv_erase>

		break;
 8001b06:	e01f      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>

	case GET_LPS22_TEMP_MEAS:
		LPS22HB_Get_Temperature(&lps22hb);
 8001b08:	481b      	ldr	r0, [pc, #108]	; (8001b78 <Pc_Comm_App_Processing+0x408>)
 8001b0a:	f7ff fa7d 	bl	8001008 <LPS22HB_Get_Temperature>
		break;
 8001b0e:	e01b      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
	case GET_PRESSURE_MEAS:
	LPS22HB_Update_Data(&lps22hb);
 8001b10:	4819      	ldr	r0, [pc, #100]	; (8001b78 <Pc_Comm_App_Processing+0x408>)
 8001b12:	f7ff fa0f 	bl	8000f34 <LPS22HB_Update_Data>
	//	lps22_temperature = lps22hb -> temperature;
	pressure = lps22hb.pressure;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <Pc_Comm_App_Processing+0x408>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	gcvt(pressure, 6, pressure_string);
 8001b1e:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8001b22:	f7fe fd11 	bl	8000548 <__aeabi_f2d>
 8001b26:	4604      	mov	r4, r0
 8001b28:	460d      	mov	r5, r1
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4619      	mov	r1, r3
 8001b30:	2006      	movs	r0, #6
 8001b32:	ec45 4b10 	vmov	d0, r4, r5
 8001b36:	f00a fcd1 	bl	800c4dc <gcvt>

	// Do the conversion to send it as string
	PcCommAppLayerSendCommString(pressure_string);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f854 	bl	8001bec <PcCommAppLayerSendCommString>
		break;
 8001b44:	e000      	b.n	8001b48 <Pc_Comm_App_Processing+0x3d8>
		break;
 8001b46:	bf00      	nop
	}
}
 8001b48:	bf00      	nop
 8001b4a:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bdb0      	pop	{r4, r5, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20001dc4 	.word	0x20001dc4
 8001b58:	0800ed48 	.word	0x0800ed48
 8001b5c:	0800ed4c 	.word	0x0800ed4c
 8001b60:	461c4000 	.word	0x461c4000
 8001b64:	2000078c 	.word	0x2000078c
 8001b68:	20000258 	.word	0x20000258
 8001b6c:	20000720 	.word	0x20000720
 8001b70:	200006fc 	.word	0x200006fc
 8001b74:	20000790 	.word	0x20000790
 8001b78:	20001ec4 	.word	0x20001ec4

08001b7c <PcCommAppLayerBuildResponseMsg>:
 * @param
 * @retval
 ******************************************************************************/

void PcCommAppLayerBuildResponseMsg(uint8_t *payloadPtr, uint8_t payloadLength,
		uint8_t freeMemoryFlag) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	70bb      	strb	r3, [r7, #2]
	// Build message
	uint16_t messageLength = sizeof(DllHeader_t) + payloadLength
			+ sizeof(DllEndOfMessage_t);
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	b29b      	uxth	r3, r3
	uint16_t messageLength = sizeof(DllHeader_t) + payloadLength
 8001b90:	3308      	adds	r3, #8
 8001b92:	82fb      	strh	r3, [r7, #22]
	// DLL header
	DllHeader_t dllHeader;
	dllHeader.Sync0 = 'V';
 8001b94:	2356      	movs	r3, #86	; 0x56
 8001b96:	743b      	strb	r3, [r7, #16]
	dllHeader.Sync1 = 'E';
 8001b98:	2345      	movs	r3, #69	; 0x45
 8001b9a:	747b      	strb	r3, [r7, #17]
	dllHeader.PayloadLength = payloadLength;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	827b      	strh	r3, [r7, #18]
	//Dll End Of Message
	DllEndOfMessage_t dllEOM;
	dllEOM.CRC32 = crc32BuffCalc(payloadPtr, 0, payloadLength);
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 fac7 	bl	800313c <crc32BuffCalc>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	693b      	ldr	r3, [r7, #16]

	// Copy dll header to message buffer
	memcpy(PcCommAppLayerMessageBuffer, &dllHeader, sizeof(dllHeader));
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <PcCommAppLayerBuildResponseMsg+0x68>)
 8001bb6:	6013      	str	r3, [r2, #0]
	// Copy payload to message buffer
	memcpy(PcCommAppLayerMessageBuffer + sizeof(dllHeader), payloadPtr,
 8001bb8:	480b      	ldr	r0, [pc, #44]	; (8001be8 <PcCommAppLayerBuildResponseMsg+0x6c>)
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f00a fcec 	bl	800c59c <memcpy>
			payloadLength);
	// Copy dll end of message
	memcpy(PcCommAppLayerMessageBuffer + sizeof(dllHeader) + payloadLength,
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <PcCommAppLayerBuildResponseMsg+0x68>)
 8001bca:	4413      	add	r3, r2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	601a      	str	r2, [r3, #0]
			&dllEOM, sizeof(dllEOM));
	// Send Message to PC
	usbBufferTx(PcCommAppLayerMessageBuffer, messageLength);
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <PcCommAppLayerBuildResponseMsg+0x68>)
 8001bd6:	f000 f81e 	bl	8001c16 <usbBufferTx>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200003ec 	.word	0x200003ec
 8001be8:	200003f0 	.word	0x200003f0

08001bec <PcCommAppLayerSendCommString>:
 * @brief  void PcCommAppLayerSendCommString(char* responseString)
 * Send response of string to PC
 * @param
 * @retval
 ******************************************************************************/
void PcCommAppLayerSendCommString(char* responseString){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	uint8_t* returnData = (uint8_t*)responseString;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60fb      	str	r3, [r7, #12]
	uint8_t payloadLength = strlen(responseString);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe fae9 	bl	80001d0 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	72fb      	strb	r3, [r7, #11]
	PcCommAppLayerBuildResponseMsg(returnData, payloadLength, 0);
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7ff ffb7 	bl	8001b7c <PcCommAppLayerBuildResponseMsg>

}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <usbBufferTx>:

uint16_t usbRxCircularHeadIndex = 0;
uint16_t usbRxCircularTailIndex = 0;
uint8_t usbRxCicularBuffer[USB_RX_CIRCULAR_BUFFER_LENGTH];

uint8_t usbBufferTx(uint8_t *BufferPtr, uint16_t BufferLength) {
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
	uint8_t i = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
	uint8_t result = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < USB_TX_RETRIES; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e00c      	b.n	8001c4a <usbBufferTx+0x34>
		result = CDC_Transmit_HS(BufferPtr, BufferLength);
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f009 ffd5 	bl	800bbe4 <CDC_Transmit_HS>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73bb      	strb	r3, [r7, #14]
		if (result == USBD_OK) {
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <usbBufferTx+0x3c>
	for (i = 0; i < USB_TX_RETRIES; i++) {
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d9ef      	bls.n	8001c30 <usbBufferTx+0x1a>
 8001c50:	e000      	b.n	8001c54 <usbBufferTx+0x3e>
			break;
 8001c52:	bf00      	nop
		}
	}
	return (result);
 8001c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <usbBufferProcessing>:

void usbBufferProcessing() {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
	uint16_t i;

	uint16_t MyLocalHeadIndex = usbRxCircularHeadIndex;
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <usbBufferProcessing+0xac>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	80bb      	strh	r3, [r7, #4]
	if (usbRxCircularTailIndex < MyLocalHeadIndex) {
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <usbBufferProcessing+0xb0>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	88ba      	ldrh	r2, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d916      	bls.n	8001ca4 <usbBufferProcessing+0x44>
		for (i = 0; i < MyLocalHeadIndex - usbRxCircularTailIndex; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	80fb      	strh	r3, [r7, #6]
 8001c7a:	e00c      	b.n	8001c96 <usbBufferProcessing+0x36>
			usartDllRxFsm(usbRxCicularBuffer[usbRxCircularTailIndex + i]);
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <usbBufferProcessing+0xb0>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <usbBufferProcessing+0xb4>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 f8ce 	bl	8002e2c <usartDllRxFsm>
		for (i = 0; i < MyLocalHeadIndex - usbRxCircularTailIndex; i++)
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	3301      	adds	r3, #1
 8001c94:	80fb      	strh	r3, [r7, #6]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	491d      	ldr	r1, [pc, #116]	; (8001d10 <usbBufferProcessing+0xb0>)
 8001c9c:	8809      	ldrh	r1, [r1, #0]
 8001c9e:	1a5b      	subs	r3, r3, r1
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbeb      	blt.n	8001c7c <usbBufferProcessing+0x1c>
	}
	if (usbRxCircularTailIndex > MyLocalHeadIndex) {
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <usbBufferProcessing+0xb0>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	88ba      	ldrh	r2, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d227      	bcs.n	8001cfe <usbBufferProcessing+0x9e>
		for (i = 0; i < USB_RX_CIRCULAR_BUFFER_LENGTH - usbRxCircularTailIndex;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	80fb      	strh	r3, [r7, #6]
 8001cb2:	e00c      	b.n	8001cce <usbBufferProcessing+0x6e>
				i++)
			usartDllRxFsm(usbRxCicularBuffer[usbRxCircularTailIndex + i]);
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <usbBufferProcessing+0xb0>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <usbBufferProcessing+0xb4>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 f8b2 	bl	8002e2c <usartDllRxFsm>
				i++)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	80fb      	strh	r3, [r7, #6]
		for (i = 0; i < USB_RX_CIRCULAR_BUFFER_LENGTH - usbRxCircularTailIndex;
 8001cce:	88fa      	ldrh	r2, [r7, #6]
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <usbBufferProcessing+0xb0>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8001cd8:	3308      	adds	r3, #8
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbea      	blt.n	8001cb4 <usbBufferProcessing+0x54>
		for (i = 0; i < MyLocalHeadIndex; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	80fb      	strh	r3, [r7, #6]
 8001ce2:	e008      	b.n	8001cf6 <usbBufferProcessing+0x96>
			usartDllRxFsm(usbRxCicularBuffer[i]);
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <usbBufferProcessing+0xb4>)
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 f89e 	bl	8002e2c <usartDllRxFsm>
		for (i = 0; i < MyLocalHeadIndex; i++)
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	80fb      	strh	r3, [r7, #6]
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	88bb      	ldrh	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3f2      	bcc.n	8001ce4 <usbBufferProcessing+0x84>
	}
	usbRxCircularTailIndex = MyLocalHeadIndex;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <usbBufferProcessing+0xb0>)
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	8013      	strh	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200004b4 	.word	0x200004b4
 8001d10:	200004b6 	.word	0x200004b6
 8001d14:	200009e8 	.word	0x200009e8

08001d18 <usbCircularBufferInsert>:

void usbCircularBufferInsert(uint8_t *Ptr, int Length) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]

	uint16_t i;
	for (i = 0; i < Length; i++) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	81fb      	strh	r3, [r7, #14]
 8001d26:	e019      	b.n	8001d5c <usbCircularBufferInsert+0x44>
		usbRxCicularBuffer[usbRxCircularHeadIndex] = *(Ptr + i);
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <usbCircularBufferInsert+0x5c>)
 8001d30:	8812      	ldrh	r2, [r2, #0]
 8001d32:	7819      	ldrb	r1, [r3, #0]
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <usbCircularBufferInsert+0x60>)
 8001d36:	5499      	strb	r1, [r3, r2]
		usbRxCircularHeadIndex++;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <usbCircularBufferInsert+0x5c>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <usbCircularBufferInsert+0x5c>)
 8001d42:	801a      	strh	r2, [r3, #0]
		if (usbRxCircularHeadIndex >= USB_RX_CIRCULAR_BUFFER_LENGTH)
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <usbCircularBufferInsert+0x5c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d902      	bls.n	8001d56 <usbCircularBufferInsert+0x3e>
			usbRxCircularHeadIndex = 0;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <usbCircularBufferInsert+0x5c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < Length; i++) {
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	81fb      	strh	r3, [r7, #14]
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dce1      	bgt.n	8001d28 <usbCircularBufferInsert+0x10>
	}

}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200004b4 	.word	0x200004b4
 8001d78:	200009e8 	.word	0x200009e8

08001d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d82:	f001 fa47 	bl	8003214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d86:	f000 f827 	bl	8001dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8a:	f000 f9cf 	bl	800212c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d8e:	f000 f88d 	bl	8001eac <MX_ADC1_Init>
  MX_DAC_Init();
 8001d92:	f000 f8dd 	bl	8001f50 <MX_DAC_Init>
  MX_SPI3_Init();
 8001d96:	f000 f969 	bl	800206c <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 8001d9a:	f009 fe1b 	bl	800b9d4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001d9e:	f000 f92f 	bl	8002000 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001da2:	f000 f999 	bl	80020d8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001da6:	f000 f8fd 	bl	8001fa4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

 /* Initializing system */
  sensors_init();
 8001daa:	f000 faf5 	bl	8002398 <sensors_init>
  for (int pcap04Unit = 1; pcap04Unit < 65; pcap04Unit++){
 8001dae:	2301      	movs	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	e007      	b.n	8001dc4 <main+0x48>
  	  setAllSelectors();
 8001db4:	f000 fb9a 	bl	80024ec <setAllSelectors>

  	  pcap04_initialization(pcap04Unit);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fbed 	bl	8001598 <pcap04_initialization>
  for (int pcap04Unit = 1; pcap04Unit < 65; pcap04Unit++){
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	ddf4      	ble.n	8001db4 <main+0x38>
		 }


*/
/*********** USB Processing Loop **************/
	  usbBufferProcessing();
 8001dca:	f7ff ff49 	bl	8001c60 <usbBufferProcessing>
	  HAL_Delay(100);
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	f001 fa92 	bl	80032f8 <HAL_Delay>
	  usbBufferProcessing();
 8001dd4:	e7f9      	b.n	8001dca <main+0x4e>
	...

08001dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b094      	sub	sp, #80	; 0x50
 8001ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dde:	f107 0320 	add.w	r3, r7, #32
 8001de2:	2230      	movs	r2, #48	; 0x30
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00a fbe6 	bl	800c5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <SystemClock_Config+0xcc>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <SystemClock_Config+0xcc>)
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <SystemClock_Config+0xcc>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <SystemClock_Config+0xd0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <SystemClock_Config+0xd0>)
 8001e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <SystemClock_Config+0xd0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e56:	2307      	movs	r3, #7
 8001e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e5a:	f107 0320 	add.w	r3, r7, #32
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fe56 	bl	8006b10 <HAL_RCC_OscConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e6a:	f000 fac9 	bl	8002400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e6e:	230f      	movs	r3, #15
 8001e70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e72:	2302      	movs	r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	2105      	movs	r1, #5
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 f8b7 	bl	8007000 <HAL_RCC_ClockConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e98:	f000 fab2 	bl	8002400 <Error_Handler>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3750      	adds	r7, #80	; 0x50
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40007000 	.word	0x40007000

08001eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <MX_ADC1_Init+0x9c>)
 8001ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <MX_ADC1_Init+0xa0>)
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001f0e:	f001 fa17 	bl	8003340 <HAL_ADC_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f18:	f000 fa72 	bl	8002400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_ADC1_Init+0x98>)
 8001f2e:	f001 fa4b 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f38:	f000 fa62 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20001e24 	.word	0x20001e24
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	0f000001 	.word	0x0f000001

08001f50 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f56:	463b      	mov	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_DAC_Init+0x4c>)
 8001f60:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <MX_DAC_Init+0x50>)
 8001f62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_DAC_Init+0x4c>)
 8001f66:	f001 fd5e 	bl	8003a26 <HAL_DAC_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f70:	f000 fa46 	bl	8002400 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4806      	ldr	r0, [pc, #24]	; (8001f9c <MX_DAC_Init+0x4c>)
 8001f84:	f001 fd71 	bl	8003a6a <HAL_DAC_ConfigChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f8e:	f000 fa37 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20001eb0 	.word	0x20001eb0
 8001fa0:	40007400 	.word	0x40007400

08001fa4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <MX_I2C2_Init+0x54>)
 8001fac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <MX_I2C2_Init+0x58>)
 8001fb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <MX_I2C2_Init+0x50>)
 8001fe2:	f001 ff47 	bl	8003e74 <HAL_I2C_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fec:	f000 fa08 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20001d70 	.word	0x20001d70
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	000186a0 	.word	0x000186a0

08002000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_SPI1_Init+0x64>)
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <MX_SPI1_Init+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_SPI1_Init+0x64>)
 800200c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_SPI1_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_SPI1_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_SPI1_Init+0x64>)
 8002020:	2202      	movs	r2, #2
 8002022:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_SPI1_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_SPI1_Init+0x64>)
 800202c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002030:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_SPI1_Init+0x64>)
 8002034:	2228      	movs	r2, #40	; 0x28
 8002036:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <MX_SPI1_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_SPI1_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <MX_SPI1_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_SPI1_Init+0x64>)
 800204c:	220a      	movs	r2, #10
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <MX_SPI1_Init+0x64>)
 8002052:	f005 f9b5 	bl	80073c0 <HAL_SPI_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800205c:	f000 f9d0 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20001edc 	.word	0x20001edc
 8002068:	40013000 	.word	0x40013000

0800206c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <MX_SPI3_Init+0x64>)
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <MX_SPI3_Init+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <MX_SPI3_Init+0x64>)
 8002078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800207c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_SPI3_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_SPI3_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_SPI3_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_SPI3_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_SPI3_Init+0x64>)
 8002098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_SPI3_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MX_SPI3_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_SPI3_Init+0x64>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_SPI3_Init+0x64>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_SPI3_Init+0x64>)
 80020b8:	220a      	movs	r2, #10
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_SPI3_Init+0x64>)
 80020be:	f005 f97f 	bl	80073c0 <HAL_SPI_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80020c8:	f000 f99a 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20001dcc 	.word	0x20001dcc
 80020d4:	40003c00 	.word	0x40003c00

080020d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <MX_USART1_UART_Init+0x50>)
 80020e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020fe:	220c      	movs	r2, #12
 8002100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 8002110:	f005 fd88 	bl	8007c24 <HAL_UART_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800211a:	f000 f971 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20001e6c 	.word	0x20001e6c
 8002128:	40011000 	.word	0x40011000

0800212c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <MX_GPIO_Init+0x254>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a8d      	ldr	r2, [pc, #564]	; (8002380 <MX_GPIO_Init+0x254>)
 800214c:	f043 0310 	orr.w	r3, r3, #16
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b8b      	ldr	r3, [pc, #556]	; (8002380 <MX_GPIO_Init+0x254>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4b87      	ldr	r3, [pc, #540]	; (8002380 <MX_GPIO_Init+0x254>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a86      	ldr	r2, [pc, #536]	; (8002380 <MX_GPIO_Init+0x254>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b84      	ldr	r3, [pc, #528]	; (8002380 <MX_GPIO_Init+0x254>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b80      	ldr	r3, [pc, #512]	; (8002380 <MX_GPIO_Init+0x254>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a7f      	ldr	r2, [pc, #508]	; (8002380 <MX_GPIO_Init+0x254>)
 8002184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <MX_GPIO_Init+0x254>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b79      	ldr	r3, [pc, #484]	; (8002380 <MX_GPIO_Init+0x254>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a78      	ldr	r2, [pc, #480]	; (8002380 <MX_GPIO_Init+0x254>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <MX_GPIO_Init+0x254>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b72      	ldr	r3, [pc, #456]	; (8002380 <MX_GPIO_Init+0x254>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a71      	ldr	r2, [pc, #452]	; (8002380 <MX_GPIO_Init+0x254>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <MX_GPIO_Init+0x254>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <MX_GPIO_Init+0x254>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a6a      	ldr	r2, [pc, #424]	; (8002380 <MX_GPIO_Init+0x254>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b68      	ldr	r3, [pc, #416]	; (8002380 <MX_GPIO_Init+0x254>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DPS_RDY_Pin|OE_Pin|DPS_RST_Pin|SL_SS_Pin
 80021ea:	2200      	movs	r2, #0
 80021ec:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 80021f0:	4864      	ldr	r0, [pc, #400]	; (8002384 <MX_GPIO_Init+0x258>)
 80021f2:	f001 fe25 	bl	8003e40 <HAL_GPIO_WritePin>
                          |SL_SP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SR_CLR_GPIO_Port, SR_CLR_Pin, GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fc:	4861      	ldr	r0, [pc, #388]	; (8002384 <MX_GPIO_Init+0x258>)
 80021fe:	f001 fe1f 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXT_CS_Pin|SL_SD_Pin|EXT_EN_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8002208:	485f      	ldr	r0, [pc, #380]	; (8002388 <MX_GPIO_Init+0x25c>)
 800220a:	f001 fe19 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800220e:	2201      	movs	r2, #1
 8002210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002214:	485c      	ldr	r0, [pc, #368]	; (8002388 <MX_GPIO_Init+0x25c>)
 8002216:	f001 fe13 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXIN_GP2_Pin EXIN_GP3_Pin EXIN_GP1_Pin */
  GPIO_InitStruct.Pin = EXIN_GP2_Pin|EXIN_GP3_Pin|EXIN_GP1_Pin;
 800221a:	230e      	movs	r3, #14
 800221c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	4855      	ldr	r0, [pc, #340]	; (8002384 <MX_GPIO_Init+0x258>)
 800222e:	f001 fc6b 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXIN_GP5_Pin PC6 */
  GPIO_InitStruct.Pin = EXIN_GP5_Pin|GPIO_PIN_6;
 8002232:	2348      	movs	r3, #72	; 0x48
 8002234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	4851      	ldr	r0, [pc, #324]	; (800238c <MX_GPIO_Init+0x260>)
 8002246:	f001 fc5f 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800224a:	2301      	movs	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800225a:	2302      	movs	r3, #2
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4848      	ldr	r0, [pc, #288]	; (8002388 <MX_GPIO_Init+0x25c>)
 8002266:	f001 fc4f 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG3_Pin BOOT1_Pin */
  GPIO_InitStruct.Pin = SIG3_Pin|BOOT1_Pin;
 800226a:	2305      	movs	r3, #5
 800226c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4844      	ldr	r0, [pc, #272]	; (8002390 <MX_GPIO_Init+0x264>)
 800227e:	f001 fc43 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DPS_RDY_Pin DPS_RST_Pin SL_SS_Pin SL_SP_Pin */
  GPIO_InitStruct.Pin = DPS_RDY_Pin|DPS_RST_Pin|SL_SS_Pin|SL_SP_Pin;
 8002282:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	4619      	mov	r1, r3
 800229a:	483a      	ldr	r0, [pc, #232]	; (8002384 <MX_GPIO_Init+0x258>)
 800229c:	f001 fc34 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 80022a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022aa:	2302      	movs	r3, #2
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	4832      	ldr	r0, [pc, #200]	; (8002384 <MX_GPIO_Init+0x258>)
 80022ba:	f001 fc25 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SR_CLR_Pin */
  GPIO_InitStruct.Pin = SR_CLR_Pin;
 80022be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SR_CLR_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	482b      	ldr	r0, [pc, #172]	; (8002384 <MX_GPIO_Init+0x258>)
 80022d8:	f001 fc16 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 EXIN_GP7_Pin EXIN_GP6_Pin POWER_FAULT_Pin
                           SIG2_Pin EXIN_GP9_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|EXIN_GP7_Pin|EXIN_GP6_Pin|POWER_FAULT_Pin
 80022dc:	f648 6382 	movw	r3, #36482	; 0x8e82
 80022e0:	61fb      	str	r3, [r7, #28]
                          |SIG2_Pin|EXIN_GP9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	4828      	ldr	r0, [pc, #160]	; (8002394 <MX_GPIO_Init+0x268>)
 80022f2:	f001 fc09 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002308:	2303      	movs	r3, #3
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	481e      	ldr	r0, [pc, #120]	; (800238c <MX_GPIO_Init+0x260>)
 8002314:	f001 fbf8 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800232a:	2301      	movs	r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	4814      	ldr	r0, [pc, #80]	; (8002388 <MX_GPIO_Init+0x25c>)
 8002336:	f001 fbe7 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_CS_Pin SL_SD_Pin EXT_EN_Pin PA15 */
  GPIO_InitStruct.Pin = EXT_CS_Pin|SL_SD_Pin|EXT_EN_Pin|GPIO_PIN_15;
 800233a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	480d      	ldr	r0, [pc, #52]	; (8002388 <MX_GPIO_Init+0x25c>)
 8002354:	f001 fbd8 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002358:	2304      	movs	r3, #4
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002368:	2302      	movs	r3, #2
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	4808      	ldr	r0, [pc, #32]	; (8002394 <MX_GPIO_Init+0x268>)
 8002374:	f001 fbc8 	bl	8003b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002378:	bf00      	nop
 800237a:	3730      	adds	r7, #48	; 0x30
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40021000 	.word	0x40021000
 8002388:	40020000 	.word	0x40020000
 800238c:	40020800 	.word	0x40020800
 8002390:	40020400 	.word	0x40020400
 8002394:	40020c00 	.word	0x40020c00

08002398 <sensors_init>:
/**
  * @brief  This function initializing Sensors
  * @retval None
  */
void sensors_init()
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	  /* LPS22HB DPS Initialize */
	  LPS22HB_Set_Handle(&lps22hb, &hi2c2);
 800239c:	4914      	ldr	r1, [pc, #80]	; (80023f0 <sensors_init+0x58>)
 800239e:	4815      	ldr	r0, [pc, #84]	; (80023f4 <sensors_init+0x5c>)
 80023a0:	f7fe fd6e 	bl	8000e80 <LPS22HB_Set_Handle>
	  LPS22HB_Set_Address(&lps22hb, LPS22HB_ADDR_L);
 80023a4:	21b8      	movs	r1, #184	; 0xb8
 80023a6:	4813      	ldr	r0, [pc, #76]	; (80023f4 <sensors_init+0x5c>)
 80023a8:	f7fe fd78 	bl	8000e9c <LPS22HB_Set_Address>
	  LPS22HB_Init(&lps22hb, LPS22HB_ODR_75HZ);
 80023ac:	2150      	movs	r1, #80	; 0x50
 80023ae:	4811      	ldr	r0, [pc, #68]	; (80023f4 <sensors_init+0x5c>)
 80023b0:	f7fe fd83 	bl	8000eba <LPS22HB_Init>
	  LPS22HB_Set_FIFO(&lps22hb, LPS22HB_FIFO_ENABLE, LPS22HB_FIFOMODE_STREAM);
 80023b4:	2240      	movs	r2, #64	; 0x40
 80023b6:	2140      	movs	r1, #64	; 0x40
 80023b8:	480e      	ldr	r0, [pc, #56]	; (80023f4 <sensors_init+0x5c>)
 80023ba:	f7fe fe87 	bl	80010cc <LPS22HB_Set_FIFO>

		/* SHT3x TEMP+HUMID Initialize */
	  // Create the handle for the sensor.
	  SHT3X_Set_Handle(&sht3x, &hi2c2);
 80023be:	490c      	ldr	r1, [pc, #48]	; (80023f0 <sensors_init+0x58>)
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <sensors_init+0x60>)
 80023c2:	f000 f8fc 	bl	80025be <SHT3X_Set_Handle>
	  SHT3X_Set_Address(&sht3x, SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_HIGH);
 80023c6:	2145      	movs	r1, #69	; 0x45
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <sensors_init+0x60>)
 80023ca:	f000 f906 	bl	80025da <SHT3X_Set_Address>
	  HAL_Delay(10);
 80023ce:	200a      	movs	r0, #10
 80023d0:	f000 ff92 	bl	80032f8 <HAL_Delay>
	  if (!sht3x_init(&sht3x)) {
 80023d4:	4808      	ldr	r0, [pc, #32]	; (80023f8 <sensors_init+0x60>)
 80023d6:	f000 f981 	bl	80026dc <sht3x_init>
 80023da:	4603      	mov	r3, r0
 80023dc:	f083 0301 	eor.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <sensors_init+0x54>
	      printf("SHT3x access failed.\n\r");
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <sensors_init+0x64>)
 80023e8:	f00a fbdc 	bl	800cba4 <iprintf>
	  }
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20001d70 	.word	0x20001d70
 80023f4:	20001ec4 	.word	0x20001ec4
 80023f8:	20001dc4 	.word	0x20001dc4
 80023fc:	0800ed50 	.word	0x0800ed50

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002408:	e7fe      	b.n	8002408 <Error_Handler+0x8>
	...

0800240c <setAddressLow>:

const int SLOTS = 64;



void setAddressLow(int address){
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	int addressBackCall = SLOTS - address;
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < SLOTS; i++)
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e03f      	b.n	80024a2 <setAddressLow+0x96>
	{
		if (i == addressBackCall)
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d116      	bne.n	8002458 <setAddressLow+0x4c>
		{
			HAL_GPIO_WritePin(GPIOE, SL_SP_Pin, GPIO_PIN_SET);
 800242a:	2201      	movs	r2, #1
 800242c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002430:	482b      	ldr	r0, [pc, #172]	; (80024e0 <setAddressLow+0xd4>)
 8002432:	f001 fd05 	bl	8003e40 <HAL_GPIO_WritePin>
			delay_ms(ADDRESS_CHOOSE_TICK);
 8002436:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <setAddressLow+0xd8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f8a6 	bl	800258c <delay_ms>
			HAL_GPIO_WritePin(GPIOE, SL_SP_Pin, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002446:	4826      	ldr	r0, [pc, #152]	; (80024e0 <setAddressLow+0xd4>)
 8002448:	f001 fcfa 	bl	8003e40 <HAL_GPIO_WritePin>
			delay_ms(ADDRESS_CHOOSE_TICK);
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <setAddressLow+0xd8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f89b 	bl	800258c <delay_ms>
 8002456:	e021      	b.n	800249c <setAddressLow+0x90>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, SL_SD_Pin, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800245e:	4822      	ldr	r0, [pc, #136]	; (80024e8 <setAddressLow+0xdc>)
 8002460:	f001 fcee 	bl	8003e40 <HAL_GPIO_WritePin>
			//delay_ms(ADDRESS_CHOOSE_TICK);
			HAL_GPIO_WritePin(GPIOE, SL_SP_Pin, GPIO_PIN_SET);  // CLK
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800246a:	481d      	ldr	r0, [pc, #116]	; (80024e0 <setAddressLow+0xd4>)
 800246c:	f001 fce8 	bl	8003e40 <HAL_GPIO_WritePin>
			delay_ms(ADDRESS_CHOOSE_TICK);
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <setAddressLow+0xd8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f889 	bl	800258c <delay_ms>
			HAL_GPIO_WritePin(GPIOA, SL_SD_Pin, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002480:	4819      	ldr	r0, [pc, #100]	; (80024e8 <setAddressLow+0xdc>)
 8002482:	f001 fcdd 	bl	8003e40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, SL_SP_Pin, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248c:	4814      	ldr	r0, [pc, #80]	; (80024e0 <setAddressLow+0xd4>)
 800248e:	f001 fcd7 	bl	8003e40 <HAL_GPIO_WritePin>
			delay_ms(ADDRESS_CHOOSE_TICK);
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <setAddressLow+0xd8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f878 	bl	800258c <delay_ms>
	for (int i = 0; i < SLOTS; i++)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	dbbb      	blt.n	8002422 <setAddressLow+0x16>
		}
	}
	HAL_GPIO_WritePin(GPIOE, SL_SS_Pin, GPIO_PIN_SET);   // Latch
 80024aa:	2201      	movs	r2, #1
 80024ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <setAddressLow+0xd4>)
 80024b2:	f001 fcc5 	bl	8003e40 <HAL_GPIO_WritePin>
	delay_ms(ADDRESS_CHOOSE_TICK);
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <setAddressLow+0xd8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f866 	bl	800258c <delay_ms>
	HAL_GPIO_WritePin(GPIOE, SL_SS_Pin, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024c6:	4806      	ldr	r0, [pc, #24]	; (80024e0 <setAddressLow+0xd4>)
 80024c8:	f001 fcba 	bl	8003e40 <HAL_GPIO_WritePin>
	delay_ms(ADDRESS_CHOOSE_TICK);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <setAddressLow+0xd8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f85b 	bl	800258c <delay_ms>

}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	2000071c 	.word	0x2000071c
 80024e8:	40020000 	.word	0x40020000

080024ec <setAllSelectors>:



void setAllSelectors() {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
	for (int i = 0; i < SLOTS; i++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	e024      	b.n	8002542 <setAllSelectors+0x56>
	{
		HAL_GPIO_WritePin(GPIOA, SL_SD_Pin, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024fe:	4820      	ldr	r0, [pc, #128]	; (8002580 <setAllSelectors+0x94>)
 8002500:	f001 fc9e 	bl	8003e40 <HAL_GPIO_WritePin>
		//delay_ms(ADDRESS_CHOOSE_TICK);
		HAL_GPIO_WritePin(GPIOE, SL_SP_Pin, GPIO_PIN_SET);  // CLK
 8002504:	2201      	movs	r2, #1
 8002506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250a:	481e      	ldr	r0, [pc, #120]	; (8002584 <setAllSelectors+0x98>)
 800250c:	f001 fc98 	bl	8003e40 <HAL_GPIO_WritePin>
		delay_ms(ADDRESS_CHOOSE_TICK);
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <setAllSelectors+0x9c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f839 	bl	800258c <delay_ms>
		HAL_GPIO_WritePin(GPIOA, SL_SD_Pin, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002520:	4817      	ldr	r0, [pc, #92]	; (8002580 <setAllSelectors+0x94>)
 8002522:	f001 fc8d 	bl	8003e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, SL_SP_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800252c:	4815      	ldr	r0, [pc, #84]	; (8002584 <setAllSelectors+0x98>)
 800252e:	f001 fc87 	bl	8003e40 <HAL_GPIO_WritePin>
		delay_ms(ADDRESS_CHOOSE_TICK);
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <setAllSelectors+0x9c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f828 	bl	800258c <delay_ms>
	for (int i = 0; i < SLOTS; i++)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4293      	cmp	r3, r2
 8002548:	dbd6      	blt.n	80024f8 <setAllSelectors+0xc>

	}
	HAL_GPIO_WritePin(GPIOE, SL_SS_Pin, GPIO_PIN_SET);   // Latch
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <setAllSelectors+0x98>)
 8002552:	f001 fc75 	bl	8003e40 <HAL_GPIO_WritePin>
	delay_ms(ADDRESS_CHOOSE_TICK);
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <setAllSelectors+0x9c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f816 	bl	800258c <delay_ms>
	HAL_GPIO_WritePin(GPIOE, SL_SS_Pin, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <setAllSelectors+0x98>)
 8002568:	f001 fc6a 	bl	8003e40 <HAL_GPIO_WritePin>
	delay_ms(ADDRESS_CHOOSE_TICK);
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <setAllSelectors+0x9c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f80b 	bl	800258c <delay_ms>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40020000 	.word	0x40020000
 8002584:	40021000 	.word	0x40021000
 8002588:	2000071c 	.word	0x2000071c

0800258c <delay_ms>:

void delay_ms(volatile int time_ms)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	int j;
    for(j = 0; j < time_ms*400; j++)
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e002      	b.n	80025a0 <delay_ms+0x14>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3301      	adds	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbf4      	blt.n	800259a <delay_ms+0xe>
        {}  /* excute NOP for 1ms */
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <SHT3X_Set_Handle>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272A
} sht3x_command_t;

void SHT3X_Set_Handle(sht3x_handle_t* SHT3X, I2C_HandleTypeDef* hi2cx)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
	SHT3X->i2c_handle = hi2cx;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	601a      	str	r2, [r3, #0]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <SHT3X_Set_Address>:

void SHT3X_Set_Address(sht3x_handle_t* SHT3X, SHT3X_ADDR_t Address)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
	SHT3X->device_address = Address;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	809a      	strh	r2, [r3, #4]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <calculate_crc>:

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8002604:	23ff      	movs	r3, #255	; 0xff
 8002606:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e020      	b.n	8002650 <calculate_crc+0x56>
		crc ^= data[i];
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	4053      	eors	r3, r2
 800261a:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e010      	b.n	8002644 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8002622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da06      	bge.n	8002638 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002634:	75fb      	strb	r3, [r7, #23]
 8002636:	e002      	b.n	800263e <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3301      	adds	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b07      	cmp	r3, #7
 8002648:	d9eb      	bls.n	8002622 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	3301      	adds	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d3da      	bcc.n	800260e <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8002658:	7dfb      	ldrb	r3, [r7, #23]
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <sht3x_send_command>:


static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af02      	add	r7, sp, #8
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	b29b      	uxth	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	733b      	strb	r3, [r7, #12]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	889b      	ldrh	r3, [r3, #4]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	b299      	uxth	r1, r3
 800268e:	f107 020c 	add.w	r2, r7, #12
 8002692:	2364      	movs	r3, #100	; 0x64
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2302      	movs	r3, #2
 8002698:	f001 fd30 	bl	80040fc <HAL_I2C_Master_Transmit>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <sht3x_send_command+0x42>
	}

	return true;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	460a      	mov	r2, r1
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	4613      	mov	r3, r2
 80026be:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b29b      	uxth	r3, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af04      	add	r7, sp, #16
 80026e2:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLED);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <sht3x_init+0x1e>
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <sht3x_init+0x94>)
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <sht3x_init+0x98>)
 80026f2:	214b      	movs	r1, #75	; 0x4b
 80026f4:	4820      	ldr	r0, [pc, #128]	; (8002778 <sht3x_init+0x9c>)
 80026f6:	f009 fed3 	bl	800c4a0 <__assert_func>

	int test;


	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, test, 1, SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	889b      	ldrh	r3, [r3, #4]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	b299      	uxth	r1, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2301      	movs	r3, #1
 800270e:	f001 fcf5 	bl	80040fc <HAL_I2C_Master_Transmit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <sht3x_init+0x40>
		return false;
 8002718:	2300      	movs	r3, #0
 800271a:	e025      	b.n	8002768 <sht3x_init+0x8c>
	}

	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	889b      	ldrh	r3, [r3, #4]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	b299      	uxth	r1, r3
 8002728:	2364      	movs	r3, #100	; 0x64
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	2303      	movs	r3, #3
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2302      	movs	r3, #2
 8002738:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800273c:	f002 f802 	bl	8004744 <HAL_I2C_Mem_Read>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <sht3x_init+0x6e>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8002746:	2300      	movs	r3, #0
 8002748:	e00e      	b.n	8002768 <sht3x_init+0x8c>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	2102      	movs	r1, #2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff52 	bl	80025fa <calculate_crc>
 8002756:	4603      	mov	r3, r0
 8002758:	72fb      	strb	r3, [r7, #11]

	if (calculated_crc != status_reg_and_checksum[2]) {
 800275a:	7abb      	ldrb	r3, [r7, #10]
 800275c:	7afa      	ldrb	r2, [r7, #11]
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <sht3x_init+0x8a>
		return false;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <sht3x_init+0x8c>
	}

	return true;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	0800ed68 	.word	0x0800ed68
 8002774:	0800ee08 	.word	0x0800ee08
 8002778:	0800edac 	.word	0x0800edac

0800277c <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]

	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8002788:	f642 4106 	movw	r1, #11270	; 0x2c06
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ff6a 	bl	8002666 <sht3x_send_command>

	// After sending a command to the sensor, a minimal waiting time of 1ms is needed before another command can be received by the sensor
	HAL_Delay(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f000 fdb0 	bl	80032f8 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	889b      	ldrh	r3, [r3, #4]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	b299      	uxth	r1, r3
 80027a4:	f107 0214 	add.w	r2, r7, #20
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2306      	movs	r3, #6
 80027ae:	f001 fda3 	bl	80042f8 <HAL_I2C_Master_Receive>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e050      	b.n	800285e <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2102      	movs	r1, #2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff19 	bl	80025fa <calculate_crc>
 80027c8:	4603      	mov	r3, r0
 80027ca:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	3303      	adds	r3, #3
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff10 	bl	80025fa <calculate_crc>
 80027da:	4603      	mov	r3, r0
 80027dc:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 80027de:	7dbb      	ldrb	r3, [r7, #22]
 80027e0:	7ffa      	ldrb	r2, [r7, #31]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d103      	bne.n	80027ee <sht3x_read_temperature_and_humidity+0x72>
 80027e6:	7e7b      	ldrb	r3, [r7, #25]
 80027e8:	7fba      	ldrb	r2, [r7, #30]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e035      	b.n	800285e <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 80027f2:	7d3b      	ldrb	r3, [r7, #20]
 80027f4:	7d7a      	ldrb	r2, [r7, #21]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff59 	bl	80026b0 <uint8_to_uint16>
 80027fe:	4603      	mov	r3, r0
 8002800:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	7e3a      	ldrb	r2, [r7, #24]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff51 	bl	80026b0 <uint8_to_uint16>
 800280e:	4603      	mov	r3, r0
 8002810:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;  // °C
 8002812:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002868 <sht3x_read_temperature_and_humidity+0xec>
 8002822:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002826:	eddf 6a11 	vldr	s13, [pc, #68]	; 800286c <sht3x_read_temperature_and_humidity+0xf0>
 800282a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800282e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002870 <sht3x_read_temperature_and_humidity+0xf4>
 8002832:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;  // %RH
 800283c:	8b7b      	ldrh	r3, [r7, #26]
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002846:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002874 <sht3x_read_temperature_and_humidity+0xf8>
 800284a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800284e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800286c <sht3x_read_temperature_and_humidity+0xf0>
 8002852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	edc3 7a00 	vstr	s15, [r3]

	return true;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	432f0000 	.word	0x432f0000
 800286c:	477fff00 	.word	0x477fff00
 8002870:	42340000 	.word	0x42340000
 8002874:	42c80000 	.word	0x42c80000

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_MspInit+0x4c>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_ADC_MspInit+0x7c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d127      	bne.n	800293a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_ADC_MspInit+0x80>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_ADC_MspInit+0x80>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_ADC_MspInit+0x80>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_ADC_MspInit+0x80>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_ADC_MspInit+0x80>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_ADC_MspInit+0x80>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002922:	2306      	movs	r3, #6
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002926:	2303      	movs	r3, #3
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <HAL_ADC_MspInit+0x84>)
 8002936:	f001 f8e7 	bl	8003b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40012000 	.word	0x40012000
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_DAC_MspInit+0x7c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d127      	bne.n	80029c2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <HAL_DAC_MspInit+0x80>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_DAC_MspInit+0x80>)
 800297c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_DAC_MspInit+0x80>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_DAC_MspInit+0x80>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_DAC_MspInit+0x80>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_DAC_MspInit+0x80>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029aa:	2310      	movs	r3, #16
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ae:	2303      	movs	r3, #3
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HAL_DAC_MspInit+0x84>)
 80029be:	f001 f8a3 	bl	8003b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40007400 	.word	0x40007400
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020000 	.word	0x40020000

080029d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_I2C_MspInit+0x84>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d12c      	bne.n	8002a54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */
//	__HAL_RCC_I2C1_CLK_ENABLE(); // Added 20/4/2023 for sht3x test
  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_I2C_MspInit+0x88>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <HAL_I2C_MspInit+0x88>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_I2C_MspInit+0x88>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1c:	2312      	movs	r3, #18
 8002a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	480c      	ldr	r0, [pc, #48]	; (8002a64 <HAL_I2C_MspInit+0x8c>)
 8002a34:	f001 f868 	bl	8003b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_I2C_MspInit+0x88>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_I2C_MspInit+0x88>)
 8002a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a46:	6413      	str	r3, [r2, #64]	; 0x40
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_I2C_MspInit+0x88>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40005800 	.word	0x40005800
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40020400 	.word	0x40020400

08002a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	; 0x30
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <HAL_SPI_MspInit+0x108>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d13c      	bne.n	8002b04 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002ac2:	2328      	movs	r3, #40	; 0x28
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f107 031c 	add.w	r3, r7, #28
 8002ada:	4619      	mov	r1, r3
 8002adc:	4826      	ldr	r0, [pc, #152]	; (8002b78 <HAL_SPI_MspInit+0x110>)
 8002ade:	f001 f813 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aea:	2301      	movs	r3, #1
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002af2:	2305      	movs	r3, #5
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	481e      	ldr	r0, [pc, #120]	; (8002b78 <HAL_SPI_MspInit+0x110>)
 8002afe:	f001 f803 	bl	8003b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b02:	e031      	b.n	8002b68 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_SPI_MspInit+0x114>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12c      	bne.n	8002b68 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_SPI_MspInit+0x10c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b46:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b58:	2306      	movs	r3, #6
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4619      	mov	r1, r3
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <HAL_SPI_MspInit+0x118>)
 8002b64:	f000 ffd0 	bl	8003b08 <HAL_GPIO_Init>
}
 8002b68:	bf00      	nop
 8002b6a:	3730      	adds	r7, #48	; 0x30
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40013000 	.word	0x40013000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40003c00 	.word	0x40003c00
 8002b80:	40020800 	.word	0x40020800

08002b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_UART_MspInit+0x84>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12b      	bne.n	8002bfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_UART_MspInit+0x88>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_UART_MspInit+0x88>)
 8002bb0:	f043 0310 	orr.w	r3, r3, #16
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_UART_MspInit+0x88>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_UART_MspInit+0x88>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_UART_MspInit+0x88>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_UART_MspInit+0x88>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bde:	23c0      	movs	r3, #192	; 0xc0
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bee:	2307      	movs	r3, #7
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_UART_MspInit+0x8c>)
 8002bfa:	f000 ff85 	bl	8003b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020400 	.word	0x40020400

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <NMI_Handler+0x4>

08002c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c60:	f000 fb2a 	bl	80032b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <OTG_HS_IRQHandler+0x10>)
 8002c6e:	f002 fe22 	bl	80058b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20003534 	.word	0x20003534

08002c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
	return 1;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_kill>:

int _kill(int pid, int sig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c96:	f009 fc45 	bl	800c524 <__errno>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2216      	movs	r2, #22
 8002c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_exit>:

void _exit (int status)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ffe7 	bl	8002c8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cbe:	e7fe      	b.n	8002cbe <_exit+0x12>

08002cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e00a      	b.n	8002ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cd2:	f3af 8000 	nop.w
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	60ba      	str	r2, [r7, #8]
 8002cde:	b2ca      	uxtb	r2, r1
 8002ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	dbf0      	blt.n	8002cd2 <_read+0x12>
	}

return len;
 8002cf0:	687b      	ldr	r3, [r7, #4]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e009      	b.n	8002d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbf1      	blt.n	8002d0c <_write+0x12>
	}
	return len;
 8002d28:	687b      	ldr	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_close>:

int _close(int file)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	return -1;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <_isatty>:

int _isatty(int file)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	return 1;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <_sbrk+0x5c>)
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <_sbrk+0x60>)
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_sbrk+0x64>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <_sbrk+0x68>)
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dcc:	f009 fbaa 	bl	800c524 <__errno>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e009      	b.n	8002df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <_sbrk+0x64>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <_sbrk+0x64>)
 8002dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20020000 	.word	0x20020000
 8002dfc:	00000800 	.word	0x00000800
 8002e00:	200004b8 	.word	0x200004b8
 8002e04:	20003a40 	.word	0x20003a40

08002e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <SystemInit+0x20>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <SystemInit+0x20>)
 8002e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <usartDllRxFsm>:
/********************************************************************
 * void usartDllRxFsm( uint8_t Char)
 * FSM for checking message is in the correct structure
 * After finishing checking the whole message structure, go to Communication Processing
 *********************************************************************/
void usartDllRxFsm(uint8_t Char) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
	switch (uartRxDllState) {
 8002e36:	4b96      	ldr	r3, [pc, #600]	; (8003090 <usartDllRxFsm+0x264>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b09      	cmp	r3, #9
 8002e3c:	f200 8124 	bhi.w	8003088 <usartDllRxFsm+0x25c>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <usartDllRxFsm+0x1c>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e71 	.word	0x08002e71
 8002e4c:	08002e9f 	.word	0x08002e9f
 8002e50:	08002ed9 	.word	0x08002ed9
 8002e54:	08002f05 	.word	0x08002f05
 8002e58:	08002f61 	.word	0x08002f61
 8002e5c:	08002fb1 	.word	0x08002fb1
 8002e60:	08002fff 	.word	0x08002fff
 8002e64:	08003017 	.word	0x08003017
 8002e68:	0800302f 	.word	0x0800302f
 8002e6c:	08003047 	.word	0x08003047
	case UART_RX_DLL_IDLE:
		// Check if first char is the sync byte
		if (Char == UARTDLL_SYNC_WORD_MSB) {
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b56      	cmp	r3, #86	; 0x56
 8002e74:	f040 8105 	bne.w	8003082 <usartDllRxFsm+0x256>
			uartBufferIndex = 0;
 8002e78:	4b86      	ldr	r3, [pc, #536]	; (8003094 <usartDllRxFsm+0x268>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
			UartRxBuffer[uartBufferIndex] = Char;
 8002e7e:	4b85      	ldr	r3, [pc, #532]	; (8003094 <usartDllRxFsm+0x268>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4a84      	ldr	r2, [pc, #528]	; (8003098 <usartDllRxFsm+0x26c>)
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	5453      	strb	r3, [r2, r1]
			uartBufferIndex++;
 8002e8a:	4b82      	ldr	r3, [pc, #520]	; (8003094 <usartDllRxFsm+0x268>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b80      	ldr	r3, [pc, #512]	; (8003094 <usartDllRxFsm+0x268>)
 8002e94:	701a      	strb	r2, [r3, #0]
			uartRxDllState = UART_RX_DLL_SYNC_LSB_WAIT;
 8002e96:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <usartDllRxFsm+0x264>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002e9c:	e0f1      	b.n	8003082 <usartDllRxFsm+0x256>
	case UART_RX_DLL_SYNC_LSB_WAIT:
		// Check if second char is the sync byte
		if (Char == UARTDLL_SYNC_WORD_LSB) {
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	2b45      	cmp	r3, #69	; 0x45
 8002ea2:	d10f      	bne.n	8002ec4 <usartDllRxFsm+0x98>
			UartRxBuffer[uartBufferIndex] = Char;
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <usartDllRxFsm+0x268>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4a7b      	ldr	r2, [pc, #492]	; (8003098 <usartDllRxFsm+0x26c>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	5453      	strb	r3, [r2, r1]
			uartBufferIndex++;
 8002eb0:	4b78      	ldr	r3, [pc, #480]	; (8003094 <usartDllRxFsm+0x268>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <usartDllRxFsm+0x268>)
 8002eba:	701a      	strb	r2, [r3, #0]
			uartRxDllState = UART_RX_DLL_ADDRESS_MSB_WAIT;
 8002ebc:	4b74      	ldr	r3, [pc, #464]	; (8003090 <usartDllRxFsm+0x264>)
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	701a      	strb	r2, [r3, #0]
		} else {
			uartRxDllState = UART_RX_DLL_IDLE;
			errorCounter++;
		}
		break;
 8002ec2:	e0e1      	b.n	8003088 <usartDllRxFsm+0x25c>
			uartRxDllState = UART_RX_DLL_IDLE;
 8002ec4:	4b72      	ldr	r3, [pc, #456]	; (8003090 <usartDllRxFsm+0x264>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
			errorCounter++;
 8002eca:	4b74      	ldr	r3, [pc, #464]	; (800309c <usartDllRxFsm+0x270>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b72      	ldr	r3, [pc, #456]	; (800309c <usartDllRxFsm+0x270>)
 8002ed4:	801a      	strh	r2, [r3, #0]
		break;
 8002ed6:	e0d7      	b.n	8003088 <usartDllRxFsm+0x25c>
	case UART_RX_DLL_ADDRESS_MSB_WAIT:
		// 3 char is MSB of data length
		UartRxBuffer[uartBufferIndex] = Char;
 8002ed8:	4b6e      	ldr	r3, [pc, #440]	; (8003094 <usartDllRxFsm+0x268>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4619      	mov	r1, r3
 8002ede:	4a6e      	ldr	r2, [pc, #440]	; (8003098 <usartDllRxFsm+0x26c>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	5453      	strb	r3, [r2, r1]
		uartBufferIndex++;
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <usartDllRxFsm+0x268>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4b69      	ldr	r3, [pc, #420]	; (8003094 <usartDllRxFsm+0x268>)
 8002eee:	701a      	strb	r2, [r3, #0]
		uartDllMessageLengthTemp = (((uint16_t) Char) << 8);
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <usartDllRxFsm+0x274>)
 8002efa:	801a      	strh	r2, [r3, #0]
		uartRxDllState = UART_RX_DLL_ADDRESS_LSB_WAIT;
 8002efc:	4b64      	ldr	r3, [pc, #400]	; (8003090 <usartDllRxFsm+0x264>)
 8002efe:	2203      	movs	r2, #3
 8002f00:	701a      	strb	r2, [r3, #0]
		break;
 8002f02:	e0c1      	b.n	8003088 <usartDllRxFsm+0x25c>
	case UART_RX_DLL_ADDRESS_LSB_WAIT:
		// 4 char is LSB of data length
		UartRxBuffer[uartBufferIndex] = Char;
 8002f04:	4b63      	ldr	r3, [pc, #396]	; (8003094 <usartDllRxFsm+0x268>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4a63      	ldr	r2, [pc, #396]	; (8003098 <usartDllRxFsm+0x26c>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	5453      	strb	r3, [r2, r1]
		uartDllMessageLengthTemp += Char;
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <usartDllRxFsm+0x274>)
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	4b60      	ldr	r3, [pc, #384]	; (80030a0 <usartDllRxFsm+0x274>)
 8002f1e:	801a      	strh	r2, [r3, #0]
		uartBufferIndex++;
 8002f20:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <usartDllRxFsm+0x268>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b5a      	ldr	r3, [pc, #360]	; (8003094 <usartDllRxFsm+0x268>)
 8002f2a:	701a      	strb	r2, [r3, #0]

		uartDllMessageLength = uartDllMessageLengthTemp;
 8002f2c:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <usartDllRxFsm+0x274>)
 8002f2e:	881a      	ldrh	r2, [r3, #0]
 8002f30:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <usartDllRxFsm+0x278>)
 8002f32:	801a      	strh	r2, [r3, #0]
		// Check if the message length is invalid, then abort and go to idle
		// Add one to the message dll length when checking the max capacity for the opcode
		if ((uartDllMessageLength + 1) >= UART_RX_BUFFER_LENGTH) {
 8002f34:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <usartDllRxFsm+0x278>)
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	2bfe      	cmp	r3, #254	; 0xfe
 8002f3a:	d908      	bls.n	8002f4e <usartDllRxFsm+0x122>
			uartRxDllState = UART_RX_DLL_IDLE;
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <usartDllRxFsm+0x264>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
			errorCounter++;
 8002f42:	4b56      	ldr	r3, [pc, #344]	; (800309c <usartDllRxFsm+0x270>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	4b54      	ldr	r3, [pc, #336]	; (800309c <usartDllRxFsm+0x270>)
 8002f4c:	801a      	strh	r2, [r3, #0]
		}
		uartAccumulated = crc32Init();
 8002f4e:	f000 f8b1 	bl	80030b4 <crc32Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4a54      	ldr	r2, [pc, #336]	; (80030a8 <usartDllRxFsm+0x27c>)
 8002f56:	6013      	str	r3, [r2, #0]
		uartRxDllState = UART_RX_DLL_OPCODE_WAIT;
 8002f58:	4b4d      	ldr	r3, [pc, #308]	; (8003090 <usartDllRxFsm+0x264>)
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	701a      	strb	r2, [r3, #0]
		break;
 8002f5e:	e093      	b.n	8003088 <usartDllRxFsm+0x25c>
	case UART_RX_DLL_OPCODE_WAIT:
		// Check 5 char is Opcode byte
		UartRxBuffer[uartBufferIndex] = Char;
 8002f60:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <usartDllRxFsm+0x268>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	4a4c      	ldr	r2, [pc, #304]	; (8003098 <usartDllRxFsm+0x26c>)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	5453      	strb	r3, [r2, r1]
		uartBufferIndex++;
 8002f6c:	4b49      	ldr	r3, [pc, #292]	; (8003094 <usartDllRxFsm+0x268>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <usartDllRxFsm+0x268>)
 8002f76:	701a      	strb	r2, [r3, #0]
		uartAccumulated = crc32ByteCalc(uartAccumulated, Char);
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <usartDllRxFsm+0x27c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	79fa      	ldrb	r2, [r7, #7]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f8a1 	bl	80030c8 <crc32ByteCalc>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a47      	ldr	r2, [pc, #284]	; (80030a8 <usartDllRxFsm+0x27c>)
 8002f8a:	6013      	str	r3, [r2, #0]
		uartRxDllState = UART_RX_DLL_PAYLOAD_WAIT;
 8002f8c:	4b40      	ldr	r3, [pc, #256]	; (8003090 <usartDllRxFsm+0x264>)
 8002f8e:	2205      	movs	r2, #5
 8002f90:	701a      	strb	r2, [r3, #0]
		if (uartDllMessageLengthTemp)
 8002f92:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <usartDllRxFsm+0x274>)
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <usartDllRxFsm+0x176>
			uartRxDllState = UART_RX_DLL_PAYLOAD_WAIT;
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <usartDllRxFsm+0x264>)
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	701a      	strb	r2, [r3, #0]
		else {
			uartRxDllState = UART_RX_DLL_CRC32_3_WAIT;
			uartReceivedCrc32 = 0;
		}
		break;
 8002fa0:	e072      	b.n	8003088 <usartDllRxFsm+0x25c>
			uartRxDllState = UART_RX_DLL_CRC32_3_WAIT;
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <usartDllRxFsm+0x264>)
 8002fa4:	2206      	movs	r2, #6
 8002fa6:	701a      	strb	r2, [r3, #0]
			uartReceivedCrc32 = 0;
 8002fa8:	4b40      	ldr	r3, [pc, #256]	; (80030ac <usartDllRxFsm+0x280>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
		break;
 8002fae:	e06b      	b.n	8003088 <usartDllRxFsm+0x25c>
	case UART_RX_DLL_PAYLOAD_WAIT:
		// Data
		UartRxBuffer[uartBufferIndex] = Char;
 8002fb0:	4b38      	ldr	r3, [pc, #224]	; (8003094 <usartDllRxFsm+0x268>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4a38      	ldr	r2, [pc, #224]	; (8003098 <usartDllRxFsm+0x26c>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	5453      	strb	r3, [r2, r1]
		uartBufferIndex++;
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <usartDllRxFsm+0x268>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b33      	ldr	r3, [pc, #204]	; (8003094 <usartDllRxFsm+0x268>)
 8002fc6:	701a      	strb	r2, [r3, #0]
		uartAccumulated = crc32ByteCalc(uartAccumulated, Char);
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <usartDllRxFsm+0x27c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	79fa      	ldrb	r2, [r7, #7]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f879 	bl	80030c8 <crc32ByteCalc>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4a33      	ldr	r2, [pc, #204]	; (80030a8 <usartDllRxFsm+0x27c>)
 8002fda:	6013      	str	r3, [r2, #0]
		if (!--uartDllMessageLengthTemp) {
 8002fdc:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <usartDllRxFsm+0x274>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <usartDllRxFsm+0x274>)
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <usartDllRxFsm+0x274>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d14a      	bne.n	8003086 <usartDllRxFsm+0x25a>
			uartRxDllState = UART_RX_DLL_CRC32_3_WAIT;
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <usartDllRxFsm+0x264>)
 8002ff2:	2206      	movs	r2, #6
 8002ff4:	701a      	strb	r2, [r3, #0]
			uartReceivedCrc32 = 0;
 8002ff6:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <usartDllRxFsm+0x280>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
		}
		break;
 8002ffc:	e043      	b.n	8003086 <usartDllRxFsm+0x25a>
	// Cases for CRC32 bytes
	case UART_RX_DLL_CRC32_3_WAIT:
		uartReceivedCrc32 |= (Char << (24));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	461a      	mov	r2, r3
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <usartDllRxFsm+0x280>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	4a28      	ldr	r2, [pc, #160]	; (80030ac <usartDllRxFsm+0x280>)
 800300c:	6013      	str	r3, [r2, #0]
		uartRxDllState = UART_RX_DLL_CRC32_2_WAIT;
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <usartDllRxFsm+0x264>)
 8003010:	2207      	movs	r2, #7
 8003012:	701a      	strb	r2, [r3, #0]
		break;
 8003014:	e038      	b.n	8003088 <usartDllRxFsm+0x25c>
	case UART_RX_DLL_CRC32_2_WAIT:
		uartReceivedCrc32 |= (Char << (16));
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	461a      	mov	r2, r3
 800301c:	4b23      	ldr	r3, [pc, #140]	; (80030ac <usartDllRxFsm+0x280>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <usartDllRxFsm+0x280>)
 8003024:	6013      	str	r3, [r2, #0]
		uartRxDllState = UART_RX_DLL_CRC32_1_WAIT;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <usartDllRxFsm+0x264>)
 8003028:	2208      	movs	r2, #8
 800302a:	701a      	strb	r2, [r3, #0]
		break;
 800302c:	e02c      	b.n	8003088 <usartDllRxFsm+0x25c>
	case UART_RX_DLL_CRC32_1_WAIT:
		uartReceivedCrc32 |= (Char << (8));
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	461a      	mov	r2, r3
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <usartDllRxFsm+0x280>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <usartDllRxFsm+0x280>)
 800303c:	6013      	str	r3, [r2, #0]
		uartRxDllState = UART_RX_DLL_CRC32_0_WAIT;
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <usartDllRxFsm+0x264>)
 8003040:	2209      	movs	r2, #9
 8003042:	701a      	strb	r2, [r3, #0]
		break;
 8003044:	e020      	b.n	8003088 <usartDllRxFsm+0x25c>
	case UART_RX_DLL_CRC32_0_WAIT:
		uartReceivedCrc32 |= (Char);
 8003046:	79fa      	ldrb	r2, [r7, #7]
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <usartDllRxFsm+0x280>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	4a17      	ldr	r2, [pc, #92]	; (80030ac <usartDllRxFsm+0x280>)
 8003050:	6013      	str	r3, [r2, #0]
		if (~uartAccumulated == uartReceivedCrc32) {
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <usartDllRxFsm+0x27c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	43da      	mvns	r2, r3
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <usartDllRxFsm+0x280>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d109      	bne.n	8003074 <usartDllRxFsm+0x248>
			Pc_Comm_App_Processing(UartRxBuffer, MessageLength);
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <usartDllRxFsm+0x284>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	480c      	ldr	r0, [pc, #48]	; (8003098 <usartDllRxFsm+0x26c>)
 8003068:	f7fe fb82 	bl	8001770 <Pc_Comm_App_Processing>
			uartRxDllState = UART_RX_DLL_IDLE;
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <usartDllRxFsm+0x264>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
		} else
			errorCounter++;
		break;
 8003072:	e009      	b.n	8003088 <usartDllRxFsm+0x25c>
			errorCounter++;
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <usartDllRxFsm+0x270>)
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <usartDllRxFsm+0x270>)
 800307e:	801a      	strh	r2, [r3, #0]
		break;
 8003080:	e002      	b.n	8003088 <usartDllRxFsm+0x25c>
		break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <usartDllRxFsm+0x25c>
		break;
 8003086:	bf00      	nop
	}
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200004bc 	.word	0x200004bc
 8003094:	20002038 	.word	0x20002038
 8003098:	20001f38 	.word	0x20001f38
 800309c:	200004be 	.word	0x200004be
 80030a0:	20002048 	.word	0x20002048
 80030a4:	2000203a 	.word	0x2000203a
 80030a8:	20002044 	.word	0x20002044
 80030ac:	20002040 	.word	0x20002040
 80030b0:	20001f34 	.word	0x20001f34

080030b4 <crc32Init>:
 *
 *
 *
 *
 *****************************************************************************/
uint32_t crc32Init() {
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	// Return the initial CRC32 value
	return (0xFFFFFFFF);
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <crc32ByteCalc>:
 *
 *
 *
 *
 *****************************************************************************/
uint32_t crc32ByteCalc(uint32_t crc32Base, uint8_t NewDataByte) {
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
	int i, j;
	unsigned int byte, crc, mask;
	int nBytes = 1;
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
	i = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
	//crc = 0xFFFFFFFF;
	crc = crc32Base;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	617b      	str	r3, [r7, #20]
	for (i = 0; i < nBytes; i++) {
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e01d      	b.n	8003122 <crc32ByteCalc+0x5a>
		byte = NewDataByte; //message[i];            // Get next byte.
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	60fb      	str	r3, [r7, #12]
		crc = crc ^ byte;
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4053      	eors	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) {    // Do eight times.
 80030f2:	2307      	movs	r3, #7
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	e00e      	b.n	8003116 <crc32ByteCalc+0x4e>
			mask = -(crc & 1);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	425b      	negs	r3, r3
 8003100:	60bb      	str	r3, [r7, #8]
			crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	085a      	lsrs	r2, r3, #1
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <crc32ByteCalc+0x70>)
 800310a:	400b      	ands	r3, r1
 800310c:	4053      	eors	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) {    // Do eight times.
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	3b01      	subs	r3, #1
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	daed      	bge.n	80030f8 <crc32ByteCalc+0x30>
	for (i = 0; i < nBytes; i++) {
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbdd      	blt.n	80030e6 <crc32ByteCalc+0x1e>
		}
	}
	return crc; //~crc;
 800312a:	697b      	ldr	r3, [r7, #20]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3724      	adds	r7, #36	; 0x24
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	edb88320 	.word	0xedb88320

0800313c <crc32BuffCalc>:
 *
 *
 *
 *
 *****************************************************************************/
uint32_t crc32BuffCalc(uint8_t *Message, uint32_t Offset, uint32_t nBytes) {
 800313c:	b480      	push	{r7}
 800313e:	b08b      	sub	sp, #44	; 0x2c
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
	int i, j;
	unsigned int byte, crc, mask;
	uint8_t *MsgPtr = Message + Offset;
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4413      	add	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]

	i = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
	crc = 0xFFFFFFFF;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < nBytes; i++) {
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	e020      	b.n	80031a2 <crc32BuffCalc+0x66>
		byte = MsgPtr[i];            // Get next byte.
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	617b      	str	r3, [r7, #20]
		crc = crc ^ byte;
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4053      	eors	r3, r2
 8003170:	61fb      	str	r3, [r7, #28]
		for (j = 7; j >= 0; j--) {    // Do eight times.
 8003172:	2307      	movs	r3, #7
 8003174:	623b      	str	r3, [r7, #32]
 8003176:	e00e      	b.n	8003196 <crc32BuffCalc+0x5a>
			mask = -(crc & 1);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	425b      	negs	r3, r3
 8003180:	613b      	str	r3, [r7, #16]
			crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	085a      	lsrs	r2, r3, #1
 8003186:	6939      	ldr	r1, [r7, #16]
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <crc32BuffCalc+0x80>)
 800318a:	400b      	ands	r3, r1
 800318c:	4053      	eors	r3, r2
 800318e:	61fb      	str	r3, [r7, #28]
		for (j = 7; j >= 0; j--) {    // Do eight times.
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	3b01      	subs	r3, #1
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2b00      	cmp	r3, #0
 800319a:	daed      	bge.n	8003178 <crc32BuffCalc+0x3c>
	for (i = 0; i < nBytes; i++) {
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	3301      	adds	r3, #1
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d8da      	bhi.n	8003160 <crc32BuffCalc+0x24>
		}
	}
	return ~crc;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	43db      	mvns	r3, r3
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	372c      	adds	r7, #44	; 0x2c
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	edb88320 	.word	0xedb88320

080031c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031c4:	480d      	ldr	r0, [pc, #52]	; (80031fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031c6:	490e      	ldr	r1, [pc, #56]	; (8003200 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031cc:	e002      	b.n	80031d4 <LoopCopyDataInit>

080031ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031d2:	3304      	adds	r3, #4

080031d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d8:	d3f9      	bcc.n	80031ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031da:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031dc:	4c0b      	ldr	r4, [pc, #44]	; (800320c <LoopFillZerobss+0x26>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e0:	e001      	b.n	80031e6 <LoopFillZerobss>

080031e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e4:	3204      	adds	r2, #4

080031e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e8:	d3fb      	bcc.n	80031e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ea:	f7ff fe0d 	bl	8002e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ee:	f009 f9b1 	bl	800c554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f2:	f7fe fdc3 	bl	8001d7c <main>
  bx  lr    
 80031f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003200:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8003204:	0800f100 	.word	0x0800f100
  ldr r2, =_sbss
 8003208:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800320c:	20003a40 	.word	0x20003a40

08003210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003210:	e7fe      	b.n	8003210 <ADC_IRQHandler>
	...

08003214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_Init+0x40>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_Init+0x40>)
 800321e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_Init+0x40>)
 800322a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800322e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_Init+0x40>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800323c:	2003      	movs	r0, #3
 800323e:	f000 fbb1 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003242:	200f      	movs	r0, #15
 8003244:	f000 f808 	bl	8003258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003248:	f7ff fb16 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023c00 	.word	0x40023c00

08003258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_InitTick+0x54>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_InitTick+0x58>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fbc9 	bl	8003a0e <HAL_SYSTICK_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e00e      	b.n	80032a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0f      	cmp	r3, #15
 800328a:	d80a      	bhi.n	80032a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800328c:	2200      	movs	r2, #0
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f000 fb91 	bl	80039ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <HAL_InitTick+0x5c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000264 	.word	0x20000264
 80032b0:	2000026c 	.word	0x2000026c
 80032b4:	20000268 	.word	0x20000268

080032b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_IncTick+0x20>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_IncTick+0x24>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_IncTick+0x24>)
 80032ca:	6013      	str	r3, [r2, #0]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	2000026c 	.word	0x2000026c
 80032dc:	2000204c 	.word	0x2000204c

080032e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return uwTick;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_GetTick+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	2000204c 	.word	0x2000204c

080032f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff ffee 	bl	80032e0 <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d005      	beq.n	800331e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_Delay+0x44>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800331e:	bf00      	nop
 8003320:	f7ff ffde 	bl	80032e0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d8f7      	bhi.n	8003320 <HAL_Delay+0x28>
  {
  }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	2000026c 	.word	0x2000026c

08003340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e033      	b.n	80033be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fab2 	bl	80028c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003386:	f023 0302 	bic.w	r3, r3, #2
 800338a:	f043 0202 	orr.w	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f93a 	bl	800360c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
 80033ae:	e001      	b.n	80033b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e105      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x228>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d925      	bls.n	8003440 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	3b1e      	subs	r3, #30
 800340a:	2207      	movs	r2, #7
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68d9      	ldr	r1, [r3, #12]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4618      	mov	r0, r3
 800342c:	4603      	mov	r3, r0
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4403      	add	r3, r0
 8003432:	3b1e      	subs	r3, #30
 8003434:	409a      	lsls	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e022      	b.n	8003486 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	2207      	movs	r2, #7
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	4603      	mov	r3, r0
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4403      	add	r3, r0
 800347c:	409a      	lsls	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d824      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b05      	subs	r3, #5
 80034a0:	221f      	movs	r2, #31
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	400a      	ands	r2, r1
 80034ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4618      	mov	r0, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b05      	subs	r3, #5
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34
 80034d6:	e04c      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d824      	bhi.n	800352a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	3b23      	subs	r3, #35	; 0x23
 80034f2:	221f      	movs	r2, #31
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43da      	mvns	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	400a      	ands	r2, r1
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4618      	mov	r0, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	3b23      	subs	r3, #35	; 0x23
 800351c:	fa00 f203 	lsl.w	r2, r0, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
 8003528:	e023      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b41      	subs	r3, #65	; 0x41
 800353c:	221f      	movs	r2, #31
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3b41      	subs	r3, #65	; 0x41
 8003566:	fa00 f203 	lsl.w	r2, r0, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_ADC_ConfigChannel+0x234>)
 8003574:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_ADC_ConfigChannel+0x238>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x1cc>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b12      	cmp	r3, #18
 8003586:	d105      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <HAL_ADC_ConfigChannel+0x238>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d123      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x21e>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d003      	beq.n	80035ae <HAL_ADC_ConfigChannel+0x1e6>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b11      	cmp	r3, #17
 80035ac:	d11b      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d111      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_ADC_ConfigChannel+0x23c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <HAL_ADC_ConfigChannel+0x240>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	0c9a      	lsrs	r2, r3, #18
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035d8:	e002      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3b01      	subs	r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f9      	bne.n	80035da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40012300 	.word	0x40012300
 8003600:	40012000 	.word	0x40012000
 8003604:	20000264 	.word	0x20000264
 8003608:	431bde83 	.word	0x431bde83

0800360c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003614:	4b79      	ldr	r3, [pc, #484]	; (80037fc <ADC_Init+0x1f0>)
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	021a      	lsls	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6899      	ldr	r1, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	4a58      	ldr	r2, [pc, #352]	; (8003800 <ADC_Init+0x1f4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	e00f      	b.n	800370a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003708:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0202 	bic.w	r2, r2, #2
 8003718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7e1b      	ldrb	r3, [r3, #24]
 8003724:	005a      	lsls	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003746:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003756:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	3b01      	subs	r3, #1
 8003764:	035a      	lsls	r2, r3, #13
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e007      	b.n	8003780 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	3b01      	subs	r3, #1
 800379c:	051a      	lsls	r2, r3, #20
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037c2:	025a      	lsls	r2, r3, #9
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	029a      	lsls	r2, r3, #10
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40012300 	.word	0x40012300
 8003800:	0f000001 	.word	0x0f000001

08003804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800382c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	60d3      	str	r3, [r2, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <__NVIC_EnableIRQ+0x38>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003970:	d301      	bcc.n	8003976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <SysTick_Config+0x40>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397e:	210f      	movs	r1, #15
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f7ff ff8e 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <SysTick_Config+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SysTick_Config+0x40>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010

080039a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff29 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039cc:	f7ff ff3e 	bl	800384c <__NVIC_GetPriorityGrouping>
 80039d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	6978      	ldr	r0, [r7, #20]
 80039d8:	f7ff ff8e 	bl	80038f8 <NVIC_EncodePriority>
 80039dc:	4602      	mov	r2, r0
 80039de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff5d 	bl	80038a4 <__NVIC_SetPriority>
}
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff31 	bl	8003868 <__NVIC_EnableIRQ>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ffa2 	bl	8003960 <SysTick_Config>
 8003a1c:	4603      	mov	r3, r0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e014      	b.n	8003a62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	791b      	ldrb	r3, [r3, #4]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fe ff81 	bl	8002950 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	795b      	ldrb	r3, [r3, #5]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_DAC_ConfigChannel+0x18>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e03c      	b.n	8003afc <HAL_DAC_ConfigChannel+0x92>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	22c0      	movs	r2, #192	; 0xc0
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	400a      	ands	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	e16b      	b.n	8003dfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b24:	2201      	movs	r2, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	f040 815a 	bne.w	8003df6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d005      	beq.n	8003b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d130      	bne.n	8003bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	2203      	movs	r2, #3
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b90:	2201      	movs	r2, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 0201 	and.w	r2, r3, #1
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d017      	beq.n	8003bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d123      	bne.n	8003c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	08da      	lsrs	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3208      	adds	r2, #8
 8003c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	08da      	lsrs	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3208      	adds	r2, #8
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0203 	and.w	r2, r3, #3
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80b4 	beq.w	8003df6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	4b60      	ldr	r3, [pc, #384]	; (8003e14 <HAL_GPIO_Init+0x30c>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	4a5f      	ldr	r2, [pc, #380]	; (8003e14 <HAL_GPIO_Init+0x30c>)
 8003c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	; (8003e14 <HAL_GPIO_Init+0x30c>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003caa:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a52      	ldr	r2, [pc, #328]	; (8003e1c <HAL_GPIO_Init+0x314>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d02b      	beq.n	8003d2e <HAL_GPIO_Init+0x226>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a51      	ldr	r2, [pc, #324]	; (8003e20 <HAL_GPIO_Init+0x318>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d025      	beq.n	8003d2a <HAL_GPIO_Init+0x222>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a50      	ldr	r2, [pc, #320]	; (8003e24 <HAL_GPIO_Init+0x31c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01f      	beq.n	8003d26 <HAL_GPIO_Init+0x21e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4f      	ldr	r2, [pc, #316]	; (8003e28 <HAL_GPIO_Init+0x320>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d019      	beq.n	8003d22 <HAL_GPIO_Init+0x21a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4e      	ldr	r2, [pc, #312]	; (8003e2c <HAL_GPIO_Init+0x324>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_GPIO_Init+0x216>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4d      	ldr	r2, [pc, #308]	; (8003e30 <HAL_GPIO_Init+0x328>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00d      	beq.n	8003d1a <HAL_GPIO_Init+0x212>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4c      	ldr	r2, [pc, #304]	; (8003e34 <HAL_GPIO_Init+0x32c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <HAL_GPIO_Init+0x20e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4b      	ldr	r2, [pc, #300]	; (8003e38 <HAL_GPIO_Init+0x330>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_GPIO_Init+0x20a>
 8003d0e:	2307      	movs	r3, #7
 8003d10:	e00e      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d12:	2308      	movs	r3, #8
 8003d14:	e00c      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d16:	2306      	movs	r3, #6
 8003d18:	e00a      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d1a:	2305      	movs	r3, #5
 8003d1c:	e008      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	e006      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d22:	2303      	movs	r3, #3
 8003d24:	e004      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e002      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_GPIO_Init+0x228>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f002 0203 	and.w	r2, r2, #3
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	4093      	lsls	r3, r2
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d40:	4935      	ldr	r1, [pc, #212]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d72:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d78:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d9c:	4a27      	ldr	r2, [pc, #156]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003da2:	4b26      	ldr	r3, [pc, #152]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	f67f ae90 	bls.w	8003b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	40020400 	.word	0x40020400
 8003e24:	40020800 	.word	0x40020800
 8003e28:	40020c00 	.word	0x40020c00
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40021400 	.word	0x40021400
 8003e34:	40021800 	.word	0x40021800
 8003e38:	40021c00 	.word	0x40021c00
 8003e3c:	40013c00 	.word	0x40013c00

08003e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e50:	787b      	ldrb	r3, [r7, #1]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e5c:	e003      	b.n	8003e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	041a      	lsls	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e12b      	b.n	80040de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe fd9c 	bl	80029d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f003 fa4a 	bl	8007370 <HAL_RCC_GetPCLK1Freq>
 8003edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a81      	ldr	r2, [pc, #516]	; (80040e8 <HAL_I2C_Init+0x274>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d807      	bhi.n	8003ef8 <HAL_I2C_Init+0x84>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a80      	ldr	r2, [pc, #512]	; (80040ec <HAL_I2C_Init+0x278>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bf94      	ite	ls
 8003ef0:	2301      	movls	r3, #1
 8003ef2:	2300      	movhi	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e006      	b.n	8003f06 <HAL_I2C_Init+0x92>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a7d      	ldr	r2, [pc, #500]	; (80040f0 <HAL_I2C_Init+0x27c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bf94      	ite	ls
 8003f00:	2301      	movls	r3, #1
 8003f02:	2300      	movhi	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0e7      	b.n	80040de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a78      	ldr	r2, [pc, #480]	; (80040f4 <HAL_I2C_Init+0x280>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	0c9b      	lsrs	r3, r3, #18
 8003f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a6a      	ldr	r2, [pc, #424]	; (80040e8 <HAL_I2C_Init+0x274>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d802      	bhi.n	8003f48 <HAL_I2C_Init+0xd4>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3301      	adds	r3, #1
 8003f46:	e009      	b.n	8003f5c <HAL_I2C_Init+0xe8>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <HAL_I2C_Init+0x284>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	495c      	ldr	r1, [pc, #368]	; (80040e8 <HAL_I2C_Init+0x274>)
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	d819      	bhi.n	8003fb0 <HAL_I2C_Init+0x13c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e59      	subs	r1, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f8a:	1c59      	adds	r1, r3, #1
 8003f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f90:	400b      	ands	r3, r1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_I2C_Init+0x138>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1e59      	subs	r1, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	e051      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8003fac:	2304      	movs	r3, #4
 8003fae:	e04f      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d111      	bne.n	8003fdc <HAL_I2C_Init+0x168>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	440b      	add	r3, r1
 8003fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e012      	b.n	8004002 <HAL_I2C_Init+0x18e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e58      	subs	r0, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	0099      	lsls	r1, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Init+0x196>
 8004006:	2301      	movs	r3, #1
 8004008:	e022      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <HAL_I2C_Init+0x1bc>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1e58      	subs	r0, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6859      	ldr	r1, [r3, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	440b      	add	r3, r1
 8004020:	fbb0 f3f3 	udiv	r3, r0, r3
 8004024:	3301      	adds	r3, #1
 8004026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402e:	e00f      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	0099      	lsls	r1, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	6809      	ldr	r1, [r1, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800407e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6911      	ldr	r1, [r2, #16]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	4311      	orrs	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	000186a0 	.word	0x000186a0
 80040ec:	001e847f 	.word	0x001e847f
 80040f0:	003d08ff 	.word	0x003d08ff
 80040f4:	431bde83 	.word	0x431bde83
 80040f8:	10624dd3 	.word	0x10624dd3

080040fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	461a      	mov	r2, r3
 8004108:	460b      	mov	r3, r1
 800410a:	817b      	strh	r3, [r7, #10]
 800410c:	4613      	mov	r3, r2
 800410e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004110:	f7ff f8e6 	bl	80032e0 <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b20      	cmp	r3, #32
 8004120:	f040 80e0 	bne.w	80042e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2319      	movs	r3, #25
 800412a:	2201      	movs	r2, #1
 800412c:	4970      	ldr	r1, [pc, #448]	; (80042f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f001 f894 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	e0d3      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2C_Master_Transmit+0x50>
 8004148:	2302      	movs	r3, #2
 800414a:	e0cc      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d007      	beq.n	8004172 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2210      	movs	r2, #16
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	893a      	ldrh	r2, [r7, #8]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a50      	ldr	r2, [pc, #320]	; (80042f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041b4:	8979      	ldrh	r1, [r7, #10]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fe16 	bl	8004dec <I2C_MasterRequestWrite>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e08d      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041e0:	e066      	b.n	80042b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f001 f90e 	bl	8005408 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06b      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11b      	bne.n	8004284 <HAL_I2C_Master_Transmit+0x188>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	6a39      	ldr	r1, [r7, #32]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f001 f8fe 	bl	800548a <I2C_WaitOnBTFFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00d      	beq.n	80042b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b04      	cmp	r3, #4
 800429a:	d107      	bne.n	80042ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e01a      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d194      	bne.n	80041e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	00100002 	.word	0x00100002
 80042f4:	ffff0000 	.word	0xffff0000

080042f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	; 0x30
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	461a      	mov	r2, r3
 8004304:	460b      	mov	r3, r1
 8004306:	817b      	strh	r3, [r7, #10]
 8004308:	4613      	mov	r3, r2
 800430a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430c:	f7fe ffe8 	bl	80032e0 <HAL_GetTick>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b20      	cmp	r3, #32
 800431c:	f040 820b 	bne.w	8004736 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2319      	movs	r3, #25
 8004326:	2201      	movs	r2, #1
 8004328:	497c      	ldr	r1, [pc, #496]	; (800451c <HAL_I2C_Master_Receive+0x224>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 ff96 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	e1fe      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_I2C_Master_Receive+0x50>
 8004344:	2302      	movs	r3, #2
 8004346:	e1f7      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d007      	beq.n	800436e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2222      	movs	r2, #34	; 0x22
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2210      	movs	r2, #16
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	893a      	ldrh	r2, [r7, #8]
 800439e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a5c      	ldr	r2, [pc, #368]	; (8004520 <HAL_I2C_Master_Receive+0x228>)
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043b0:	8979      	ldrh	r1, [r7, #10]
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fd9a 	bl	8004ef0 <I2C_MasterRequestRead>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1b8      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e18c      	b.n	8004710 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d11b      	bne.n	8004436 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e16c      	b.n	8004710 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	2b02      	cmp	r3, #2
 800443c:	d11b      	bne.n	8004476 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800445c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	e14c      	b.n	8004710 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800449c:	e138      	b.n	8004710 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	f200 80f1 	bhi.w	800468a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d123      	bne.n	80044f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f001 f829 	bl	800550c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e139      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044f6:	e10b      	b.n	8004710 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d14e      	bne.n	800459e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	2200      	movs	r2, #0
 8004508:	4906      	ldr	r1, [pc, #24]	; (8004524 <HAL_I2C_Master_Receive+0x22c>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fea6 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e10e      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
 800451a:	bf00      	nop
 800451c:	00100002 	.word	0x00100002
 8004520:	ffff0000 	.word	0xffff0000
 8004524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800459c:	e0b8      	b.n	8004710 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	2200      	movs	r2, #0
 80045a6:	4966      	ldr	r1, [pc, #408]	; (8004740 <HAL_I2C_Master_Receive+0x448>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fe57 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0bf      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	2200      	movs	r2, #0
 8004602:	494f      	ldr	r1, [pc, #316]	; (8004740 <HAL_I2C_Master_Receive+0x448>)
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fe29 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e091      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004688:	e042      	b.n	8004710 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 ff3c 	bl	800550c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e04c      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d118      	bne.n	8004710 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	f47f aec2 	bne.w	800449e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e000      	b.n	8004738 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004736:	2302      	movs	r3, #2
  }
}
 8004738:	4618      	mov	r0, r3
 800473a:	3728      	adds	r7, #40	; 0x28
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	00010004 	.word	0x00010004

08004744 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08c      	sub	sp, #48	; 0x30
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	817b      	strh	r3, [r7, #10]
 8004756:	460b      	mov	r3, r1
 8004758:	813b      	strh	r3, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800475e:	f7fe fdbf 	bl	80032e0 <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b20      	cmp	r3, #32
 800476e:	f040 8208 	bne.w	8004b82 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2319      	movs	r3, #25
 8004778:	2201      	movs	r2, #1
 800477a:	497b      	ldr	r1, [pc, #492]	; (8004968 <HAL_I2C_Mem_Read+0x224>)
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fd6d 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
 800478a:	e1fb      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_I2C_Mem_Read+0x56>
 8004796:	2302      	movs	r3, #2
 8004798:	e1f4      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d007      	beq.n	80047c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2222      	movs	r2, #34	; 0x22
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a5b      	ldr	r2, [pc, #364]	; (800496c <HAL_I2C_Mem_Read+0x228>)
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004802:	88f8      	ldrh	r0, [r7, #6]
 8004804:	893a      	ldrh	r2, [r7, #8]
 8004806:	8979      	ldrh	r1, [r7, #10]
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	4603      	mov	r3, r0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fc3a 	bl	800508c <I2C_RequestMemoryRead>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e1b0      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d113      	bne.n	8004852 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	623b      	str	r3, [r7, #32]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e184      	b.n	8004b5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	2b01      	cmp	r3, #1
 8004858:	d11b      	bne.n	8004892 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e164      	b.n	8004b5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	2b02      	cmp	r3, #2
 8004898:	d11b      	bne.n	80048d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	e144      	b.n	8004b5c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048e8:	e138      	b.n	8004b5c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	f200 80f1 	bhi.w	8004ad6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d123      	bne.n	8004944 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fe03 	bl	800550c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e139      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004942:	e10b      	b.n	8004b5c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	2b02      	cmp	r3, #2
 800494a:	d14e      	bne.n	80049ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	2200      	movs	r2, #0
 8004954:	4906      	ldr	r1, [pc, #24]	; (8004970 <HAL_I2C_Mem_Read+0x22c>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fc80 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e10e      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
 8004966:	bf00      	nop
 8004968:	00100002 	.word	0x00100002
 800496c:	ffff0000 	.word	0xffff0000
 8004970:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049e8:	e0b8      	b.n	8004b5c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2200      	movs	r2, #0
 80049f2:	4966      	ldr	r1, [pc, #408]	; (8004b8c <HAL_I2C_Mem_Read+0x448>)
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fc31 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0bf      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	494f      	ldr	r1, [pc, #316]	; (8004b8c <HAL_I2C_Mem_Read+0x448>)
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fc03 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e091      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad4:	e042      	b.n	8004b5c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fd16 	bl	800550c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e04c      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d118      	bne.n	8004b5c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f aec2 	bne.w	80048ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3728      	adds	r7, #40	; 0x28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	00010004 	.word	0x00010004

08004b90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ba0:	f7fe fb9e 	bl	80032e0 <HAL_GetTick>
 8004ba4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	f040 8111 	bne.w	8004dda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2319      	movs	r3, #25
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4988      	ldr	r1, [pc, #544]	; (8004de4 <HAL_I2C_IsDeviceReady+0x254>)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fb4a 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e104      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_I2C_IsDeviceReady+0x50>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e0fd      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x24c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d007      	beq.n	8004c06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2224      	movs	r2, #36	; 0x24
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a70      	ldr	r2, [pc, #448]	; (8004de8 <HAL_I2C_IsDeviceReady+0x258>)
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fb08 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d103      	bne.n	8004c6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e0b6      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c6e:	897b      	ldrh	r3, [r7, #10]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004c7e:	f7fe fb2f 	bl	80032e0 <HAL_GetTick>
 8004c82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004cb2:	e025      	b.n	8004d00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cb4:	f7fe fb14 	bl	80032e0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <HAL_I2C_IsDeviceReady+0x13a>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	22a0      	movs	r2, #160	; 0xa0
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2ba0      	cmp	r3, #160	; 0xa0
 8004d0a:	d005      	beq.n	8004d18 <HAL_I2C_IsDeviceReady+0x188>
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <HAL_I2C_IsDeviceReady+0x188>
 8004d12:	7dbb      	ldrb	r3, [r7, #22]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0cd      	beq.n	8004cb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d129      	bne.n	8004d82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2319      	movs	r3, #25
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4921      	ldr	r1, [pc, #132]	; (8004de4 <HAL_I2C_IsDeviceReady+0x254>)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fa7c 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e036      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e02c      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2319      	movs	r3, #25
 8004da2:	2201      	movs	r2, #1
 8004da4:	490f      	ldr	r1, [pc, #60]	; (8004de4 <HAL_I2C_IsDeviceReady+0x254>)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fa58 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e012      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f4ff af32 	bcc.w	8004c2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	00100002 	.word	0x00100002
 8004de8:	ffff0000 	.word	0xffff0000

08004dec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d006      	beq.n	8004e16 <I2C_MasterRequestWrite+0x2a>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d003      	beq.n	8004e16 <I2C_MasterRequestWrite+0x2a>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e14:	d108      	bne.n	8004e28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e00b      	b.n	8004e40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	2b12      	cmp	r3, #18
 8004e2e:	d107      	bne.n	8004e40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 fa05 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d103      	bne.n	8004e70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e035      	b.n	8004ee0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e7c:	d108      	bne.n	8004e90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e8c:	611a      	str	r2, [r3, #16]
 8004e8e:	e01b      	b.n	8004ec8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e90:	897b      	ldrh	r3, [r7, #10]
 8004e92:	11db      	asrs	r3, r3, #7
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f003 0306 	and.w	r3, r3, #6
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f063 030f 	orn	r3, r3, #15
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <I2C_MasterRequestWrite+0xfc>)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fa2b 	bl	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e010      	b.n	8004ee0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4907      	ldr	r1, [pc, #28]	; (8004eec <I2C_MasterRequestWrite+0x100>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fa1b 	bl	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	00010008 	.word	0x00010008
 8004eec:	00010002 	.word	0x00010002

08004ef0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	460b      	mov	r3, r1
 8004efe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d006      	beq.n	8004f2a <I2C_MasterRequestRead+0x3a>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d003      	beq.n	8004f2a <I2C_MasterRequestRead+0x3a>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f28:	d108      	bne.n	8004f3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e00b      	b.n	8004f54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	2b11      	cmp	r3, #17
 8004f42:	d107      	bne.n	8004f54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f97b 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7a:	d103      	bne.n	8004f84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e079      	b.n	800507c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f90:	d108      	bne.n	8004fa4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f92:	897b      	ldrh	r3, [r7, #10]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	611a      	str	r2, [r3, #16]
 8004fa2:	e05f      	b.n	8005064 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fa4:	897b      	ldrh	r3, [r7, #10]
 8004fa6:	11db      	asrs	r3, r3, #7
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 0306 	and.w	r3, r3, #6
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f063 030f 	orn	r3, r3, #15
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4930      	ldr	r1, [pc, #192]	; (8005084 <I2C_MasterRequestRead+0x194>)
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f9a1 	bl	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e054      	b.n	800507c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4929      	ldr	r1, [pc, #164]	; (8005088 <I2C_MasterRequestRead+0x198>)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f991 	bl	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e044      	b.n	800507c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f919 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d103      	bne.n	8005048 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005046:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e017      	b.n	800507c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800504c:	897b      	ldrh	r3, [r7, #10]
 800504e:	11db      	asrs	r3, r3, #7
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f063 030e 	orn	r3, r3, #14
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4907      	ldr	r1, [pc, #28]	; (8005088 <I2C_MasterRequestRead+0x198>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f94d 	bl	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	00010008 	.word	0x00010008
 8005088:	00010002 	.word	0x00010002

0800508c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	4608      	mov	r0, r1
 8005096:	4611      	mov	r1, r2
 8005098:	461a      	mov	r2, r3
 800509a:	4603      	mov	r3, r0
 800509c:	817b      	strh	r3, [r7, #10]
 800509e:	460b      	mov	r3, r1
 80050a0:	813b      	strh	r3, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f8c2 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ec:	d103      	bne.n	80050f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0aa      	b.n	8005250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050fa:	897b      	ldrh	r3, [r7, #10]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005108:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	6a3a      	ldr	r2, [r7, #32]
 800510e:	4952      	ldr	r1, [pc, #328]	; (8005258 <I2C_RequestMemoryRead+0x1cc>)
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f8fa 	bl	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e097      	b.n	8005250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	6a39      	ldr	r1, [r7, #32]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f964 	bl	8005408 <I2C_WaitOnTXEFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00d      	beq.n	8005162 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	2b04      	cmp	r3, #4
 800514c:	d107      	bne.n	800515e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e076      	b.n	8005250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005168:	893b      	ldrh	r3, [r7, #8]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	611a      	str	r2, [r3, #16]
 8005172:	e021      	b.n	80051b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005174:	893b      	ldrh	r3, [r7, #8]
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	b29b      	uxth	r3, r3
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005184:	6a39      	ldr	r1, [r7, #32]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f93e 	bl	8005408 <I2C_WaitOnTXEFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b04      	cmp	r3, #4
 8005198:	d107      	bne.n	80051aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e050      	b.n	8005250 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ae:	893b      	ldrh	r3, [r7, #8]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	6a39      	ldr	r1, [r7, #32]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f923 	bl	8005408 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00d      	beq.n	80051e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d107      	bne.n	80051e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e035      	b.n	8005250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f82b 	bl	800525c <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	d103      	bne.n	8005224 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e013      	b.n	8005250 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005228:	897b      	ldrh	r3, [r7, #10]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	6a3a      	ldr	r2, [r7, #32]
 800523c:	4906      	ldr	r1, [pc, #24]	; (8005258 <I2C_RequestMemoryRead+0x1cc>)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f863 	bl	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	00010002 	.word	0x00010002

0800525c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800526c:	e025      	b.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d021      	beq.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fe f833 	bl	80032e0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d116      	bne.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e023      	b.n	8005302 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	0c1b      	lsrs	r3, r3, #16
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10d      	bne.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	43da      	mvns	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4013      	ands	r3, r2
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf0c      	ite	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	2300      	movne	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	e00c      	b.n	80052fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	43da      	mvns	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d0b6      	beq.n	800526e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005318:	e051      	b.n	80053be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005328:	d123      	bne.n	8005372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005342:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0204 	orr.w	r2, r3, #4
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e046      	b.n	8005400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d021      	beq.n	80053be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fd ffb1 	bl	80032e0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d116      	bne.n	80053be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e020      	b.n	8005400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10c      	bne.n	80053e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	43da      	mvns	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf14      	ite	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	2300      	moveq	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	e00b      	b.n	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	43da      	mvns	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d18d      	bne.n	800531a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005414:	e02d      	b.n	8005472 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f8ce 	bl	80055b8 <I2C_IsAcknowledgeFailed>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e02d      	b.n	8005482 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d021      	beq.n	8005472 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542e:	f7fd ff57 	bl	80032e0 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d116      	bne.n	8005472 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f043 0220 	orr.w	r2, r3, #32
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e007      	b.n	8005482 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b80      	cmp	r3, #128	; 0x80
 800547e:	d1ca      	bne.n	8005416 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005496:	e02d      	b.n	80054f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f88d 	bl	80055b8 <I2C_IsAcknowledgeFailed>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e02d      	b.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d021      	beq.n	80054f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b0:	f7fd ff16 	bl	80032e0 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d302      	bcc.n	80054c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d116      	bne.n	80054f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e007      	b.n	8005504 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d1ca      	bne.n	8005498 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005518:	e042      	b.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d119      	bne.n	800555c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0210 	mvn.w	r2, #16
 8005530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e029      	b.n	80055b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555c:	f7fd fec0 	bl	80032e0 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d116      	bne.n	80055a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f043 0220 	orr.w	r2, r3, #32
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e007      	b.n	80055b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d1b5      	bne.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ce:	d11b      	bne.n	8005608 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0204 	orr.w	r2, r3, #4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005618:	b08f      	sub	sp, #60	; 0x3c
 800561a:	af0a      	add	r7, sp, #40	; 0x28
 800561c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e10f      	b.n	8005848 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f006 fc16 	bl	800be74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2203      	movs	r2, #3
 800564c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f002 feb3 	bl	80083d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	687e      	ldr	r6, [r7, #4]
 8005674:	466d      	mov	r5, sp
 8005676:	f106 0410 	add.w	r4, r6, #16
 800567a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800567c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800567e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005682:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005686:	e885 0003 	stmia.w	r5, {r0, r1}
 800568a:	1d33      	adds	r3, r6, #4
 800568c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800568e:	6838      	ldr	r0, [r7, #0]
 8005690:	f002 fd8a 	bl	80081a8 <USB_CoreInit>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0d0      	b.n	8005848 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f002 fea1 	bl	80083f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
 80056b6:	e04a      	b.n	800574e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	333d      	adds	r3, #61	; 0x3d
 80056c8:	2201      	movs	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	333c      	adds	r3, #60	; 0x3c
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	b298      	uxth	r0, r3
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3344      	adds	r3, #68	; 0x44
 80056f4:	4602      	mov	r2, r0
 80056f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	3340      	adds	r3, #64	; 0x40
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3348      	adds	r3, #72	; 0x48
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	334c      	adds	r3, #76	; 0x4c
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	3354      	adds	r3, #84	; 0x54
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	3301      	adds	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d3af      	bcc.n	80056b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
 800575c:	e044      	b.n	80057e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800575e:	7bfa      	ldrb	r2, [r7, #15]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005774:	7bfa      	ldrb	r2, [r7, #15]
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005786:	7bfa      	ldrb	r2, [r7, #15]
 8005788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800578a:	7bfa      	ldrb	r2, [r7, #15]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057a0:	7bfa      	ldrb	r2, [r7, #15]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057b6:	7bfa      	ldrb	r2, [r7, #15]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	3301      	adds	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d3b5      	bcc.n	800575e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	687e      	ldr	r6, [r7, #4]
 80057fa:	466d      	mov	r5, sp
 80057fc:	f106 0410 	add.w	r4, r6, #16
 8005800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005808:	e894 0003 	ldmia.w	r4, {r0, r1}
 800580c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005810:	1d33      	adds	r3, r6, #4
 8005812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005814:	6838      	ldr	r0, [r7, #0]
 8005816:	f002 fe39 	bl	800848c <USB_DevInit>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e00d      	b.n	8005848 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f003 ff88 	bl	8009756 <USB_DevDisconnect>

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005850 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_PCD_Start+0x1c>
 8005868:	2302      	movs	r3, #2
 800586a:	e020      	b.n	80058ae <HAL_PCD_Start+0x5e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	2b01      	cmp	r3, #1
 800587a:	d109      	bne.n	8005890 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005880:	2b01      	cmp	r3, #1
 8005882:	d005      	beq.n	8005890 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f002 fd8b 	bl	80083b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f003 ff38 	bl	8009714 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058b6:	b590      	push	{r4, r7, lr}
 80058b8:	b08d      	sub	sp, #52	; 0x34
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f003 fff6 	bl	80098be <USB_GetMode>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 848a 	bne.w	80061ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f003 ff5a 	bl	8009798 <USB_ReadInterrupts>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8480 	beq.w	80061ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f003 ff47 	bl	8009798 <USB_ReadInterrupts>
 800590a:	4603      	mov	r3, r0
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b02      	cmp	r3, #2
 8005912:	d107      	bne.n	8005924 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f002 0202 	and.w	r2, r2, #2
 8005922:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f003 ff35 	bl	8009798 <USB_ReadInterrupts>
 800592e:	4603      	mov	r3, r0
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b10      	cmp	r3, #16
 8005936:	d161      	bne.n	80059fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0210 	bic.w	r2, r2, #16
 8005946:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	f003 020f 	and.w	r2, r3, #15
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	3304      	adds	r3, #4
 8005966:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	0c5b      	lsrs	r3, r3, #17
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	2b02      	cmp	r3, #2
 8005972:	d124      	bne.n	80059be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d035      	beq.n	80059ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800598a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	6a38      	ldr	r0, [r7, #32]
 8005994:	f003 fd6c 	bl	8009470 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059a4:	441a      	add	r2, r3
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b6:	441a      	add	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	621a      	str	r2, [r3, #32]
 80059bc:	e016      	b.n	80059ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	0c5b      	lsrs	r3, r3, #17
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d110      	bne.n	80059ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059d0:	2208      	movs	r2, #8
 80059d2:	4619      	mov	r1, r3
 80059d4:	6a38      	ldr	r0, [r7, #32]
 80059d6:	f003 fd4b 	bl	8009470 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e6:	441a      	add	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0210 	orr.w	r2, r2, #16
 80059fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f003 fec9 	bl	8009798 <USB_ReadInterrupts>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a10:	f040 80a7 	bne.w	8005b62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f003 fece 	bl	80097be <USB_ReadDevAllOutEpInterrupt>
 8005a22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005a24:	e099      	b.n	8005b5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 808e 	beq.w	8005b4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 fef2 	bl	8009826 <USB_ReadDevOutEPInterrupt>
 8005a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fec2 	bl	80067ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2308      	movs	r3, #8
 8005a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 ff98 	bl	80069bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d008      	beq.n	8005aa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d030      	beq.n	8005b14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d109      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	78db      	ldrb	r3, [r3, #3]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d108      	bne.n	8005b02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2200      	movs	r2, #0
 8005af4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f006 fabb 	bl	800c078 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2302      	movs	r3, #2
 8005b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	461a      	mov	r2, r3
 8005b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	3301      	adds	r3, #1
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f47f af62 	bne.w	8005a26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f003 fe16 	bl	8009798 <USB_ReadInterrupts>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b76:	f040 80db 	bne.w	8005d30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f003 fe37 	bl	80097f2 <USB_ReadDevAllInEpInterrupt>
 8005b84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b8a:	e0cd      	b.n	8005d28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80c2 	beq.w	8005d1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f003 fe5d 	bl	8009862 <USB_ReadDevInEPInterrupt>
 8005ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d057      	beq.n	8005c64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	2201      	movs	r2, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69f9      	ldr	r1, [r7, #28]
 8005bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	461a      	mov	r2, r3
 8005be6:	2301      	movs	r3, #1
 8005be8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d132      	bne.n	8005c58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	334c      	adds	r3, #76	; 0x4c
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4403      	add	r3, r0
 8005c12:	3348      	adds	r3, #72	; 0x48
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4419      	add	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4403      	add	r3, r0
 8005c26:	334c      	adds	r3, #76	; 0x4c
 8005c28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d113      	bne.n	8005c58 <HAL_PCD_IRQHandler+0x3a2>
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3354      	adds	r3, #84	; 0x54
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c50:	461a      	mov	r2, r3
 8005c52:	2101      	movs	r1, #1
 8005c54:	f003 fe64 	bl	8009920 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f006 f985 	bl	800bf6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c96:	461a      	mov	r2, r3
 8005c98:	2310      	movs	r3, #16
 8005c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2340      	movs	r3, #64	; 0x40
 8005cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d023      	beq.n	8005d0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cc4:	6a38      	ldr	r0, [r7, #32]
 8005cc6:	f002 fd45 	bl	8008754 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	3338      	adds	r3, #56	; 0x38
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	3304      	adds	r3, #4
 8005cdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	78db      	ldrb	r3, [r3, #3]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d108      	bne.n	8005cf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f006 f9d2 	bl	800c09c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	461a      	mov	r2, r3
 8005d06:	2302      	movs	r3, #2
 8005d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fcdb 	bl	80066d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f47f af2e 	bne.w	8005b8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f003 fd2f 	bl	8009798 <USB_ReadInterrupts>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d44:	d122      	bne.n	8005d8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d108      	bne.n	8005d76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fec2 	bl	8006af8 <HAL_PCDEx_LPM_Callback>
 8005d74:	e002      	b.n	8005d7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f006 f970 	bl	800c05c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f003 fd01 	bl	8009798 <USB_ReadInterrupts>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da0:	d112      	bne.n	8005dc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d102      	bne.n	8005db8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f006 f92c 	bl	800c010 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005dc6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f003 fce3 	bl	8009798 <USB_ReadInterrupts>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ddc:	f040 80b7 	bne.w	8005f4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dee:	f023 0301 	bic.w	r3, r3, #1
 8005df2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2110      	movs	r1, #16
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f002 fcaa 	bl	8008754 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e04:	e046      	b.n	8005e94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	461a      	mov	r2, r3
 8005e14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	3301      	adds	r3, #1
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d3b3      	bcc.n	8005e06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005eb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eca:	f043 030b 	orr.w	r3, r3, #11
 8005ece:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee0:	f043 030b 	orr.w	r3, r3, #11
 8005ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ee6:	e015      	b.n	8005f14 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005efa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005efe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f043 030b 	orr.w	r3, r3, #11
 8005f12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f003 fcf1 	bl	8009920 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695a      	ldr	r2, [r3, #20]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f003 fc20 	bl	8009798 <USB_ReadInterrupts>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f62:	d124      	bne.n	8005fae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f003 fcb6 	bl	80098da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f002 fc6b 	bl	800884e <USB_GetDevSpeed>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681c      	ldr	r4, [r3, #0]
 8005f84:	f001 f9e8 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 8005f88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	4620      	mov	r0, r4
 8005f94:	f002 f96a 	bl	800826c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f006 f810 	bl	800bfbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f003 fbf0 	bl	8009798 <USB_ReadInterrupts>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d10a      	bne.n	8005fd8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f005 ffed 	bl	800bfa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f002 0208 	and.w	r2, r2, #8
 8005fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f003 fbdb 	bl	8009798 <USB_ReadInterrupts>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe8:	2b80      	cmp	r3, #128	; 0x80
 8005fea:	d122      	bne.n	8006032 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	e014      	b.n	8006028 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d105      	bne.n	8006022 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	b2db      	uxtb	r3, r3
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fb27 	bl	8006670 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	3301      	adds	r3, #1
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602e:	429a      	cmp	r2, r3
 8006030:	d3e5      	bcc.n	8005ffe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f003 fbae 	bl	8009798 <USB_ReadInterrupts>
 800603c:	4603      	mov	r3, r0
 800603e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006046:	d13b      	bne.n	80060c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006048:	2301      	movs	r3, #1
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	e02b      	b.n	80060a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3340      	adds	r3, #64	; 0x40
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d115      	bne.n	80060a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006076:	2b00      	cmp	r3, #0
 8006078:	da12      	bge.n	80060a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607e:	4613      	mov	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	333f      	adds	r3, #63	; 0x3f
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fae8 	bl	8006670 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	3301      	adds	r3, #1
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d3ce      	bcc.n	800604e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80060be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f003 fb67 	bl	8009798 <USB_ReadInterrupts>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060d4:	d155      	bne.n	8006182 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060d6:	2301      	movs	r3, #1
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	e045      	b.n	8006168 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d12e      	bne.n	8006162 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006104:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006106:	2b00      	cmp	r3, #0
 8006108:	da2b      	bge.n	8006162 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006116:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800611a:	429a      	cmp	r2, r3
 800611c:	d121      	bne.n	8006162 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006122:	4613      	mov	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800615a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800615e:	6053      	str	r3, [r2, #4]
            break;
 8006160:	e007      	b.n	8006172 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	3301      	adds	r3, #1
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616e:	429a      	cmp	r2, r3
 8006170:	d3b4      	bcc.n	80060dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f003 fb06 	bl	8009798 <USB_ReadInterrupts>
 800618c:	4603      	mov	r3, r0
 800618e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006196:	d10a      	bne.n	80061ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f005 ff91 	bl	800c0c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f003 faf0 	bl	8009798 <USB_ReadInterrupts>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d115      	bne.n	80061ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f005 ff81 	bl	800c0dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	e000      	b.n	80061ee <HAL_PCD_IRQHandler+0x938>
      return;
 80061ec:	bf00      	nop
    }
  }
}
 80061ee:	3734      	adds	r7, #52	; 0x34
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd90      	pop	{r4, r7, pc}

080061f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_PCD_SetAddress+0x1a>
 800620a:	2302      	movs	r3, #2
 800620c:	e013      	b.n	8006236 <HAL_PCD_SetAddress+0x42>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	4611      	mov	r1, r2
 8006226:	4618      	mov	r0, r3
 8006228:	f003 fa4e 	bl	80096c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	4608      	mov	r0, r1
 8006248:	4611      	mov	r1, r2
 800624a:	461a      	mov	r2, r3
 800624c:	4603      	mov	r3, r0
 800624e:	70fb      	strb	r3, [r7, #3]
 8006250:	460b      	mov	r3, r1
 8006252:	803b      	strh	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800625c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006260:	2b00      	cmp	r3, #0
 8006262:	da0f      	bge.n	8006284 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	3338      	adds	r3, #56	; 0x38
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	3304      	adds	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	705a      	strb	r2, [r3, #1]
 8006282:	e00f      	b.n	80062a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	f003 020f 	and.w	r2, r3, #15
 800628a:	4613      	mov	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	4413      	add	r3, r2
 800629a:	3304      	adds	r3, #4
 800629c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80062b0:	883a      	ldrh	r2, [r7, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	78ba      	ldrb	r2, [r7, #2]
 80062ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062ce:	78bb      	ldrb	r3, [r7, #2]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d102      	bne.n	80062da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_PCD_EP_Open+0xaa>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e00e      	b.n	8006306 <HAL_PCD_EP_Open+0xc8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f002 face 	bl	8008898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006304:	7afb      	ldrb	r3, [r7, #11]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	460b      	mov	r3, r1
 8006318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800631a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800631e:	2b00      	cmp	r3, #0
 8006320:	da0f      	bge.n	8006342 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	f003 020f 	and.w	r2, r3, #15
 8006328:	4613      	mov	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	3338      	adds	r3, #56	; 0x38
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	3304      	adds	r3, #4
 8006338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	705a      	strb	r2, [r3, #1]
 8006340:	e00f      	b.n	8006362 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	4413      	add	r3, r2
 8006358:	3304      	adds	r3, #4
 800635a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_PCD_EP_Close+0x6e>
 8006378:	2302      	movs	r3, #2
 800637a:	e00e      	b.n	800639a <HAL_PCD_EP_Close+0x8c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68f9      	ldr	r1, [r7, #12]
 800638a:	4618      	mov	r0, r3
 800638c:	f002 fb0c 	bl	80089a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
 80063ae:	460b      	mov	r3, r1
 80063b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	f003 020f 	and.w	r2, r3, #15
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	3304      	adds	r3, #4
 80063ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2200      	movs	r2, #0
 80063dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d102      	bne.n	80063fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	f002 fdeb 	bl	8008ff0 <USB_EP0StartXfer>
 800641a:	e008      	b.n	800642e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	6979      	ldr	r1, [r7, #20]
 800642a:	f002 fb99 	bl	8008b60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	f003 020f 	and.w	r2, r3, #15
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800645a:	681b      	ldr	r3, [r3, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	460b      	mov	r3, r1
 8006476:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	f003 020f 	and.w	r2, r3, #15
 800647e:	4613      	mov	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	3338      	adds	r3, #56	; 0x38
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	3304      	adds	r3, #4
 800648e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2201      	movs	r2, #1
 80064a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d102      	bne.n	80064c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	461a      	mov	r2, r3
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	f002 fd89 	bl	8008ff0 <USB_EP0StartXfer>
 80064de:	e008      	b.n	80064f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	6979      	ldr	r1, [r7, #20]
 80064ee:	f002 fb37 	bl	8008b60 <USB_EPStartXfer>
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	f003 020f 	and.w	r2, r3, #15
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d901      	bls.n	800651a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e050      	b.n	80065bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800651a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da0f      	bge.n	8006542 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	4613      	mov	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	3338      	adds	r3, #56	; 0x38
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	3304      	adds	r3, #4
 8006538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2201      	movs	r2, #1
 800653e:	705a      	strb	r2, [r3, #1]
 8006540:	e00d      	b.n	800655e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	4613      	mov	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	3304      	adds	r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	b2da      	uxtb	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_PCD_EP_SetStall+0x82>
 800657a:	2302      	movs	r3, #2
 800657c:	e01e      	b.n	80065bc <HAL_PCD_EP_SetStall+0xc0>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	4618      	mov	r0, r3
 800658e:	f002 ffc7 	bl	8009520 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	b2d9      	uxtb	r1, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065ac:	461a      	mov	r2, r3
 80065ae:	f003 f9b7 	bl	8009920 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	f003 020f 	and.w	r2, r3, #15
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d901      	bls.n	80065e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e042      	b.n	8006668 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da0f      	bge.n	800660a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	4613      	mov	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	3338      	adds	r3, #56	; 0x38
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	3304      	adds	r3, #4
 8006600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	705a      	strb	r2, [r3, #1]
 8006608:	e00f      	b.n	800662a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 020f 	and.w	r2, r3, #15
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	3304      	adds	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_PCD_EP_ClrStall+0x86>
 8006646:	2302      	movs	r3, #2
 8006648:	e00e      	b.n	8006668 <HAL_PCD_EP_ClrStall+0xa4>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	4618      	mov	r0, r3
 800665a:	f002 ffcf 	bl	80095fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800667c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	da0c      	bge.n	800669e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	f003 020f 	and.w	r2, r3, #15
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	3338      	adds	r3, #56	; 0x38
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	4413      	add	r3, r2
 8006698:	3304      	adds	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e00c      	b.n	80066b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	f003 020f 	and.w	r2, r3, #15
 80066a4:	4613      	mov	r3, r2
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4413      	add	r3, r2
 80066b4:	3304      	adds	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68f9      	ldr	r1, [r7, #12]
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 fdee 	bl	80092a0 <USB_EPStopXfer>
 80066c4:	4603      	mov	r3, r0
 80066c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066c8:	7afb      	ldrb	r3, [r7, #11]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b08a      	sub	sp, #40	; 0x28
 80066d6:	af02      	add	r7, sp, #8
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	3338      	adds	r3, #56	; 0x38
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	3304      	adds	r3, #4
 80066f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1a      	ldr	r2, [r3, #32]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	429a      	cmp	r2, r3
 8006704:	d901      	bls.n	800670a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e06c      	b.n	80067e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	429a      	cmp	r2, r3
 800671e:	d902      	bls.n	8006726 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3303      	adds	r3, #3
 800672a:	089b      	lsrs	r3, r3, #2
 800672c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800672e:	e02b      	b.n	8006788 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	429a      	cmp	r2, r3
 8006744:	d902      	bls.n	800674c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	3303      	adds	r3, #3
 8006750:	089b      	lsrs	r3, r3, #2
 8006752:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6919      	ldr	r1, [r3, #16]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006764:	b2db      	uxtb	r3, r3
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	4603      	mov	r3, r0
 800676a:	6978      	ldr	r0, [r7, #20]
 800676c:	f002 fe42 	bl	80093f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	441a      	add	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1a      	ldr	r2, [r3, #32]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	441a      	add	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	b29b      	uxth	r3, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	429a      	cmp	r2, r3
 800679c:	d809      	bhi.n	80067b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d203      	bcs.n	80067b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1be      	bne.n	8006730 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d811      	bhi.n	80067e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	2201      	movs	r2, #1
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	43db      	mvns	r3, r3
 80067d8:	6939      	ldr	r1, [r7, #16]
 80067da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067de:	4013      	ands	r3, r2
 80067e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	333c      	adds	r3, #60	; 0x3c
 8006804:	3304      	adds	r3, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d17b      	bne.n	800691a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d015      	beq.n	8006858 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4a61      	ldr	r2, [pc, #388]	; (80069b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	f240 80b9 	bls.w	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80b3 	beq.w	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684e:	461a      	mov	r2, r3
 8006850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006854:	6093      	str	r3, [r2, #8]
 8006856:	e0a7      	b.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686e:	461a      	mov	r2, r3
 8006870:	2320      	movs	r3, #32
 8006872:	6093      	str	r3, [r2, #8]
 8006874:	e098      	b.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 8093 	bne.w	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4a4b      	ldr	r2, [pc, #300]	; (80069b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d90f      	bls.n	80068aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	461a      	mov	r2, r3
 80068a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a6:	6093      	str	r3, [r2, #8]
 80068a8:	e07e      	b.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	3304      	adds	r3, #4
 80068be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	0159      	lsls	r1, r3, #5
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	440b      	add	r3, r1
 80068cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068d6:	1ad2      	subs	r2, r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d114      	bne.n	800690c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068f4:	461a      	mov	r2, r3
 80068f6:	2101      	movs	r1, #1
 80068f8:	f003 f812 	bl	8009920 <USB_EP0_OutStart>
 80068fc:	e006      	b.n	800690c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	441a      	add	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f005 fb10 	bl	800bf38 <HAL_PCD_DataOutStageCallback>
 8006918:	e046      	b.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4a26      	ldr	r2, [pc, #152]	; (80069b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d124      	bne.n	800696c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693e:	6093      	str	r3, [r2, #8]
 8006940:	e032      	b.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	461a      	mov	r2, r3
 800695a:	2320      	movs	r3, #32
 800695c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f005 fae7 	bl	800bf38 <HAL_PCD_DataOutStageCallback>
 800696a:	e01d      	b.n	80069a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d114      	bne.n	800699c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	4613      	mov	r3, r2
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d108      	bne.n	800699c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006994:	461a      	mov	r2, r3
 8006996:	2100      	movs	r1, #0
 8006998:	f002 ffc2 	bl	8009920 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f005 fac8 	bl	800bf38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	4f54300a 	.word	0x4f54300a
 80069b8:	4f54310a 	.word	0x4f54310a

080069bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	333c      	adds	r3, #60	; 0x3c
 80069d4:	3304      	adds	r3, #4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <PCD_EP_OutSetupPacket_int+0x88>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d90e      	bls.n	8006a10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f005 fa7f 	bl	800bf14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d90c      	bls.n	8006a38 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d108      	bne.n	8006a38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a30:	461a      	mov	r2, r3
 8006a32:	2101      	movs	r1, #1
 8006a34:	f002 ff74 	bl	8009920 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	4f54300a 	.word	0x4f54300a

08006a48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
 8006a54:	4613      	mov	r3, r2
 8006a56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d107      	bne.n	8006a76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a66:	883b      	ldrh	r3, [r7, #0]
 8006a68:	0419      	lsls	r1, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
 8006a74:	e028      	b.n	8006ac8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	0c1b      	lsrs	r3, r3, #16
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	e00d      	b.n	8006aa6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	3340      	adds	r3, #64	; 0x40
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	7bfa      	ldrb	r2, [r7, #15]
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d3ec      	bcc.n	8006a8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ab0:	883b      	ldrh	r3, [r7, #0]
 8006ab2:	0418      	lsls	r0, r3, #16
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6819      	ldr	r1, [r3, #0]
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	4302      	orrs	r2, r0
 8006ac0:	3340      	adds	r3, #64	; 0x40
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	887a      	ldrh	r2, [r7, #2]
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e267      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d075      	beq.n	8006c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b2e:	4b88      	ldr	r3, [pc, #544]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d00c      	beq.n	8006b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b3a:	4b85      	ldr	r3, [pc, #532]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d112      	bne.n	8006b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b46:	4b82      	ldr	r3, [pc, #520]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b52:	d10b      	bne.n	8006b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b54:	4b7e      	ldr	r3, [pc, #504]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d05b      	beq.n	8006c18 <HAL_RCC_OscConfig+0x108>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d157      	bne.n	8006c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e242      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b74:	d106      	bne.n	8006b84 <HAL_RCC_OscConfig+0x74>
 8006b76:	4b76      	ldr	r3, [pc, #472]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a75      	ldr	r2, [pc, #468]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	e01d      	b.n	8006bc0 <HAL_RCC_OscConfig+0xb0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b8c:	d10c      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x98>
 8006b8e:	4b70      	ldr	r3, [pc, #448]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a6f      	ldr	r2, [pc, #444]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	4b6d      	ldr	r3, [pc, #436]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a6c      	ldr	r2, [pc, #432]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	e00b      	b.n	8006bc0 <HAL_RCC_OscConfig+0xb0>
 8006ba8:	4b69      	ldr	r3, [pc, #420]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a68      	ldr	r2, [pc, #416]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	4b66      	ldr	r3, [pc, #408]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a65      	ldr	r2, [pc, #404]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d013      	beq.n	8006bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc8:	f7fc fb8a 	bl	80032e0 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bd0:	f7fc fb86 	bl	80032e0 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b64      	cmp	r3, #100	; 0x64
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e207      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be2:	4b5b      	ldr	r3, [pc, #364]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCC_OscConfig+0xc0>
 8006bee:	e014      	b.n	8006c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7fc fb76 	bl	80032e0 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bf8:	f7fc fb72 	bl	80032e0 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	; 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e1f3      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c0a:	4b51      	ldr	r3, [pc, #324]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f0      	bne.n	8006bf8 <HAL_RCC_OscConfig+0xe8>
 8006c16:	e000      	b.n	8006c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d063      	beq.n	8006cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c26:	4b4a      	ldr	r3, [pc, #296]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c32:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c3a:	2b08      	cmp	r3, #8
 8006c3c:	d11c      	bne.n	8006c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c3e:	4b44      	ldr	r3, [pc, #272]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d116      	bne.n	8006c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4a:	4b41      	ldr	r3, [pc, #260]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_RCC_OscConfig+0x152>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d001      	beq.n	8006c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e1c7      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c62:	4b3b      	ldr	r3, [pc, #236]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4937      	ldr	r1, [pc, #220]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c76:	e03a      	b.n	8006cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d020      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c80:	4b34      	ldr	r3, [pc, #208]	; (8006d54 <HAL_RCC_OscConfig+0x244>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c86:	f7fc fb2b 	bl	80032e0 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c8e:	f7fc fb27 	bl	80032e0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e1a8      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca0:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f0      	beq.n	8006c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cac:	4b28      	ldr	r3, [pc, #160]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	4925      	ldr	r1, [pc, #148]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	600b      	str	r3, [r1, #0]
 8006cc0:	e015      	b.n	8006cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <HAL_RCC_OscConfig+0x244>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fc fb0a 	bl	80032e0 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cd0:	f7fc fb06 	bl	80032e0 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e187      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce2:	4b1b      	ldr	r3, [pc, #108]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d036      	beq.n	8006d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <HAL_RCC_OscConfig+0x248>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d08:	f7fc faea 	bl	80032e0 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d10:	f7fc fae6 	bl	80032e0 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e167      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCC_OscConfig+0x240>)
 8006d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x200>
 8006d2e:	e01b      	b.n	8006d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d30:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <HAL_RCC_OscConfig+0x248>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d36:	f7fc fad3 	bl	80032e0 <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d3c:	e00e      	b.n	8006d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d3e:	f7fc facf 	bl	80032e0 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d907      	bls.n	8006d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e150      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
 8006d50:	40023800 	.word	0x40023800
 8006d54:	42470000 	.word	0x42470000
 8006d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d5c:	4b88      	ldr	r3, [pc, #544]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1ea      	bne.n	8006d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8097 	beq.w	8006ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d7a:	4b81      	ldr	r3, [pc, #516]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10f      	bne.n	8006da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d86:	2300      	movs	r3, #0
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	4b7d      	ldr	r3, [pc, #500]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	4a7c      	ldr	r2, [pc, #496]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d94:	6413      	str	r3, [r2, #64]	; 0x40
 8006d96:	4b7a      	ldr	r3, [pc, #488]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9e:	60bb      	str	r3, [r7, #8]
 8006da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006da2:	2301      	movs	r3, #1
 8006da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da6:	4b77      	ldr	r3, [pc, #476]	; (8006f84 <HAL_RCC_OscConfig+0x474>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d118      	bne.n	8006de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006db2:	4b74      	ldr	r3, [pc, #464]	; (8006f84 <HAL_RCC_OscConfig+0x474>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a73      	ldr	r2, [pc, #460]	; (8006f84 <HAL_RCC_OscConfig+0x474>)
 8006db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dbe:	f7fc fa8f 	bl	80032e0 <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dc6:	f7fc fa8b 	bl	80032e0 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e10c      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd8:	4b6a      	ldr	r3, [pc, #424]	; (8006f84 <HAL_RCC_OscConfig+0x474>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d106      	bne.n	8006dfa <HAL_RCC_OscConfig+0x2ea>
 8006dec:	4b64      	ldr	r3, [pc, #400]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df0:	4a63      	ldr	r2, [pc, #396]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	6713      	str	r3, [r2, #112]	; 0x70
 8006df8:	e01c      	b.n	8006e34 <HAL_RCC_OscConfig+0x324>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d10c      	bne.n	8006e1c <HAL_RCC_OscConfig+0x30c>
 8006e02:	4b5f      	ldr	r3, [pc, #380]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	4a5e      	ldr	r2, [pc, #376]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e08:	f043 0304 	orr.w	r3, r3, #4
 8006e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e0e:	4b5c      	ldr	r3, [pc, #368]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	4a5b      	ldr	r2, [pc, #364]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1a:	e00b      	b.n	8006e34 <HAL_RCC_OscConfig+0x324>
 8006e1c:	4b58      	ldr	r3, [pc, #352]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e20:	4a57      	ldr	r2, [pc, #348]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	6713      	str	r3, [r2, #112]	; 0x70
 8006e28:	4b55      	ldr	r3, [pc, #340]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	4a54      	ldr	r2, [pc, #336]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e2e:	f023 0304 	bic.w	r3, r3, #4
 8006e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d015      	beq.n	8006e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3c:	f7fc fa50 	bl	80032e0 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e42:	e00a      	b.n	8006e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e44:	f7fc fa4c 	bl	80032e0 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e0cb      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e5a:	4b49      	ldr	r3, [pc, #292]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0ee      	beq.n	8006e44 <HAL_RCC_OscConfig+0x334>
 8006e66:	e014      	b.n	8006e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e68:	f7fc fa3a 	bl	80032e0 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e6e:	e00a      	b.n	8006e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e70:	f7fc fa36 	bl	80032e0 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e0b5      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e86:	4b3e      	ldr	r3, [pc, #248]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1ee      	bne.n	8006e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d105      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e98:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	4a38      	ldr	r2, [pc, #224]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80a1 	beq.w	8006ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eae:	4b34      	ldr	r3, [pc, #208]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d05c      	beq.n	8006f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d141      	bne.n	8006f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec2:	4b31      	ldr	r3, [pc, #196]	; (8006f88 <HAL_RCC_OscConfig+0x478>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec8:	f7fc fa0a 	bl	80032e0 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed0:	f7fc fa06 	bl	80032e0 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e087      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee2:	4b27      	ldr	r3, [pc, #156]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f0      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69da      	ldr	r2, [r3, #28]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	019b      	lsls	r3, r3, #6
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	3b01      	subs	r3, #1
 8006f08:	041b      	lsls	r3, r3, #16
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	061b      	lsls	r3, r3, #24
 8006f12:	491b      	ldr	r1, [pc, #108]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f18:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <HAL_RCC_OscConfig+0x478>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1e:	f7fc f9df 	bl	80032e0 <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f26:	f7fc f9db 	bl	80032e0 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e05c      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f38:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0f0      	beq.n	8006f26 <HAL_RCC_OscConfig+0x416>
 8006f44:	e054      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_RCC_OscConfig+0x478>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f4c:	f7fc f9c8 	bl	80032e0 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f54:	f7fc f9c4 	bl	80032e0 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e045      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <HAL_RCC_OscConfig+0x470>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCC_OscConfig+0x444>
 8006f72:	e03d      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e038      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40007000 	.word	0x40007000
 8006f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f8c:	4b1b      	ldr	r3, [pc, #108]	; (8006ffc <HAL_RCC_OscConfig+0x4ec>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d028      	beq.n	8006fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d121      	bne.n	8006fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d11a      	bne.n	8006fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d111      	bne.n	8006fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d107      	bne.n	8006fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d001      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40023800 	.word	0x40023800

08007000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e0cc      	b.n	80071ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007014:	4b68      	ldr	r3, [pc, #416]	; (80071b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d90c      	bls.n	800703c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007022:	4b65      	ldr	r3, [pc, #404]	; (80071b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800702a:	4b63      	ldr	r3, [pc, #396]	; (80071b8 <HAL_RCC_ClockConfig+0x1b8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d001      	beq.n	800703c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0b8      	b.n	80071ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d020      	beq.n	800708a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007054:	4b59      	ldr	r3, [pc, #356]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	4a58      	ldr	r2, [pc, #352]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 800705a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800705e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800706c:	4b53      	ldr	r3, [pc, #332]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4a52      	ldr	r2, [pc, #328]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007078:	4b50      	ldr	r3, [pc, #320]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	494d      	ldr	r1, [pc, #308]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	4313      	orrs	r3, r2
 8007088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d044      	beq.n	8007120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800709e:	4b47      	ldr	r3, [pc, #284]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d119      	bne.n	80070de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e07f      	b.n	80071ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d003      	beq.n	80070be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d107      	bne.n	80070ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070be:	4b3f      	ldr	r3, [pc, #252]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d109      	bne.n	80070de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e06f      	b.n	80071ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ce:	4b3b      	ldr	r3, [pc, #236]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e067      	b.n	80071ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070de:	4b37      	ldr	r3, [pc, #220]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f023 0203 	bic.w	r2, r3, #3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4934      	ldr	r1, [pc, #208]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070f0:	f7fc f8f6 	bl	80032e0 <HAL_GetTick>
 80070f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070f6:	e00a      	b.n	800710e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f8:	f7fc f8f2 	bl	80032e0 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	f241 3288 	movw	r2, #5000	; 0x1388
 8007106:	4293      	cmp	r3, r2
 8007108:	d901      	bls.n	800710e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e04f      	b.n	80071ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710e:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 020c 	and.w	r2, r3, #12
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	429a      	cmp	r2, r3
 800711e:	d1eb      	bne.n	80070f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d20c      	bcs.n	8007148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712e:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007136:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d001      	beq.n	8007148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e032      	b.n	80071ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d008      	beq.n	8007166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007154:	4b19      	ldr	r3, [pc, #100]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	4916      	ldr	r1, [pc, #88]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	4313      	orrs	r3, r2
 8007164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007172:	4b12      	ldr	r3, [pc, #72]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	490e      	ldr	r1, [pc, #56]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007186:	f000 f821 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 800718a:	4602      	mov	r2, r0
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	091b      	lsrs	r3, r3, #4
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	490a      	ldr	r1, [pc, #40]	; (80071c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007198:	5ccb      	ldrb	r3, [r1, r3]
 800719a:	fa22 f303 	lsr.w	r3, r2, r3
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <HAL_RCC_ClockConfig+0x1c4>)
 80071a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <HAL_RCC_ClockConfig+0x1c8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fc f856 	bl	8003258 <HAL_InitTick>

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40023c00 	.word	0x40023c00
 80071bc:	40023800 	.word	0x40023800
 80071c0:	0800ee14 	.word	0x0800ee14
 80071c4:	20000264 	.word	0x20000264
 80071c8:	20000268 	.word	0x20000268

080071cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d0:	b090      	sub	sp, #64	; 0x40
 80071d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	637b      	str	r3, [r7, #52]	; 0x34
 80071d8:	2300      	movs	r3, #0
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071dc:	2300      	movs	r3, #0
 80071de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071e4:	4b59      	ldr	r3, [pc, #356]	; (800734c <HAL_RCC_GetSysClockFreq+0x180>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 030c 	and.w	r3, r3, #12
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d00d      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x40>
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	f200 80a1 	bhi.w	8007338 <HAL_RCC_GetSysClockFreq+0x16c>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <HAL_RCC_GetSysClockFreq+0x34>
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d003      	beq.n	8007206 <HAL_RCC_GetSysClockFreq+0x3a>
 80071fe:	e09b      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007200:	4b53      	ldr	r3, [pc, #332]	; (8007350 <HAL_RCC_GetSysClockFreq+0x184>)
 8007202:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007204:	e09b      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007206:	4b53      	ldr	r3, [pc, #332]	; (8007354 <HAL_RCC_GetSysClockFreq+0x188>)
 8007208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800720a:	e098      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800720c:	4b4f      	ldr	r3, [pc, #316]	; (800734c <HAL_RCC_GetSysClockFreq+0x180>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007216:	4b4d      	ldr	r3, [pc, #308]	; (800734c <HAL_RCC_GetSysClockFreq+0x180>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d028      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007222:	4b4a      	ldr	r3, [pc, #296]	; (800734c <HAL_RCC_GetSysClockFreq+0x180>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	2200      	movs	r2, #0
 800722a:	623b      	str	r3, [r7, #32]
 800722c:	627a      	str	r2, [r7, #36]	; 0x24
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007234:	2100      	movs	r1, #0
 8007236:	4b47      	ldr	r3, [pc, #284]	; (8007354 <HAL_RCC_GetSysClockFreq+0x188>)
 8007238:	fb03 f201 	mul.w	r2, r3, r1
 800723c:	2300      	movs	r3, #0
 800723e:	fb00 f303 	mul.w	r3, r0, r3
 8007242:	4413      	add	r3, r2
 8007244:	4a43      	ldr	r2, [pc, #268]	; (8007354 <HAL_RCC_GetSysClockFreq+0x188>)
 8007246:	fba0 1202 	umull	r1, r2, r0, r2
 800724a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800724c:	460a      	mov	r2, r1
 800724e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007252:	4413      	add	r3, r2
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	2200      	movs	r2, #0
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	61fa      	str	r2, [r7, #28]
 800725e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007266:	f7f9 fc89 	bl	8000b7c <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4613      	mov	r3, r2
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007272:	e053      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007274:	4b35      	ldr	r3, [pc, #212]	; (800734c <HAL_RCC_GetSysClockFreq+0x180>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	099b      	lsrs	r3, r3, #6
 800727a:	2200      	movs	r2, #0
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	617a      	str	r2, [r7, #20]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007286:	f04f 0b00 	mov.w	fp, #0
 800728a:	4652      	mov	r2, sl
 800728c:	465b      	mov	r3, fp
 800728e:	f04f 0000 	mov.w	r0, #0
 8007292:	f04f 0100 	mov.w	r1, #0
 8007296:	0159      	lsls	r1, r3, #5
 8007298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800729c:	0150      	lsls	r0, r2, #5
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	ebb2 080a 	subs.w	r8, r2, sl
 80072a6:	eb63 090b 	sbc.w	r9, r3, fp
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80072b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80072ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072be:	ebb2 0408 	subs.w	r4, r2, r8
 80072c2:	eb63 0509 	sbc.w	r5, r3, r9
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	00eb      	lsls	r3, r5, #3
 80072d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072d4:	00e2      	lsls	r2, r4, #3
 80072d6:	4614      	mov	r4, r2
 80072d8:	461d      	mov	r5, r3
 80072da:	eb14 030a 	adds.w	r3, r4, sl
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	eb45 030b 	adc.w	r3, r5, fp
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072f2:	4629      	mov	r1, r5
 80072f4:	028b      	lsls	r3, r1, #10
 80072f6:	4621      	mov	r1, r4
 80072f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072fc:	4621      	mov	r1, r4
 80072fe:	028a      	lsls	r2, r1, #10
 8007300:	4610      	mov	r0, r2
 8007302:	4619      	mov	r1, r3
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	2200      	movs	r2, #0
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	60fa      	str	r2, [r7, #12]
 800730c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007310:	f7f9 fc34 	bl	8000b7c <__aeabi_uldivmod>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4613      	mov	r3, r2
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_RCC_GetSysClockFreq+0x180>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	0c1b      	lsrs	r3, r3, #16
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	3301      	adds	r3, #1
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800732c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007336:	e002      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <HAL_RCC_GetSysClockFreq+0x184>)
 800733a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800733c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007340:	4618      	mov	r0, r3
 8007342:	3740      	adds	r7, #64	; 0x40
 8007344:	46bd      	mov	sp, r7
 8007346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800734a:	bf00      	nop
 800734c:	40023800 	.word	0x40023800
 8007350:	00f42400 	.word	0x00f42400
 8007354:	00b71b00 	.word	0x00b71b00

08007358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <HAL_RCC_GetHCLKFreq+0x14>)
 800735e:	681b      	ldr	r3, [r3, #0]
}
 8007360:	4618      	mov	r0, r3
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20000264 	.word	0x20000264

08007370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007374:	f7ff fff0 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 8007378:	4602      	mov	r2, r0
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	0a9b      	lsrs	r3, r3, #10
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	4903      	ldr	r1, [pc, #12]	; (8007394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007386:	5ccb      	ldrb	r3, [r1, r3]
 8007388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800738c:	4618      	mov	r0, r3
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40023800 	.word	0x40023800
 8007394:	0800ee24 	.word	0x0800ee24

08007398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800739c:	f7ff ffdc 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 80073a0:	4602      	mov	r2, r0
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	0b5b      	lsrs	r3, r3, #13
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	4903      	ldr	r1, [pc, #12]	; (80073bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ae:	5ccb      	ldrb	r3, [r1, r3]
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40023800 	.word	0x40023800
 80073bc:	0800ee24 	.word	0x0800ee24

080073c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e07b      	b.n	80074ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073e2:	d009      	beq.n	80073f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	61da      	str	r2, [r3, #28]
 80073ea:	e005      	b.n	80073f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fb fb28 	bl	8002a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800742e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747c:	ea42 0103 	orr.w	r1, r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	f003 0104 	and.w	r1, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	f003 0210 	and.w	r2, r3, #16
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b088      	sub	sp, #32
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	603b      	str	r3, [r7, #0]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_SPI_Transmit+0x22>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e126      	b.n	8007742 <HAL_SPI_Transmit+0x270>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074fc:	f7fb fef0 	bl	80032e0 <HAL_GetTick>
 8007500:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b01      	cmp	r3, #1
 8007510:	d002      	beq.n	8007518 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007512:	2302      	movs	r3, #2
 8007514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007516:	e10b      	b.n	8007730 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_SPI_Transmit+0x52>
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007528:	e102      	b.n	8007730 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2203      	movs	r2, #3
 800752e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	88fa      	ldrh	r2, [r7, #6]
 8007542:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007570:	d10f      	bne.n	8007592 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007580:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007590:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759c:	2b40      	cmp	r3, #64	; 0x40
 800759e:	d007      	beq.n	80075b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b8:	d14b      	bne.n	8007652 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_SPI_Transmit+0xf6>
 80075c2:	8afb      	ldrh	r3, [r7, #22]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d13e      	bne.n	8007646 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	881a      	ldrh	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	1c9a      	adds	r2, r3, #2
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075ec:	e02b      	b.n	8007646 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d112      	bne.n	8007622 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	881a      	ldrh	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	1c9a      	adds	r2, r3, #2
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007620:	e011      	b.n	8007646 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007622:	f7fb fe5d 	bl	80032e0 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d803      	bhi.n	800763a <HAL_SPI_Transmit+0x168>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d102      	bne.n	8007640 <HAL_SPI_Transmit+0x16e>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d102      	bne.n	8007646 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007644:	e074      	b.n	8007730 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1ce      	bne.n	80075ee <HAL_SPI_Transmit+0x11c>
 8007650:	e04c      	b.n	80076ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_SPI_Transmit+0x18e>
 800765a:	8afb      	ldrh	r3, [r7, #22]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d140      	bne.n	80076e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	7812      	ldrb	r2, [r2, #0]
 800766c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007686:	e02c      	b.n	80076e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b02      	cmp	r3, #2
 8007694:	d113      	bne.n	80076be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	330c      	adds	r3, #12
 80076a0:	7812      	ldrb	r2, [r2, #0]
 80076a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80076bc:	e011      	b.n	80076e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076be:	f7fb fe0f 	bl	80032e0 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d803      	bhi.n	80076d6 <HAL_SPI_Transmit+0x204>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d102      	bne.n	80076dc <HAL_SPI_Transmit+0x20a>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076e0:	e026      	b.n	8007730 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1cd      	bne.n	8007688 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fa55 	bl	8007ba0 <SPI_EndRxTxTransaction>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2220      	movs	r2, #32
 8007700:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800770a:	2300      	movs	r3, #0
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	613b      	str	r3, [r7, #16]
 800771e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	77fb      	strb	r3, [r7, #31]
 800772c:	e000      	b.n	8007730 <HAL_SPI_Transmit+0x25e>
  }

error:
 800772e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007740:	7ffb      	ldrb	r3, [r7, #31]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b08c      	sub	sp, #48	; 0x30
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007758:	2301      	movs	r3, #1
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_SPI_TransmitReceive+0x26>
 800776c:	2302      	movs	r3, #2
 800776e:	e18a      	b.n	8007a86 <HAL_SPI_TransmitReceive+0x33c>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007778:	f7fb fdb2 	bl	80032e0 <HAL_GetTick>
 800777c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800778e:	887b      	ldrh	r3, [r7, #2]
 8007790:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007796:	2b01      	cmp	r3, #1
 8007798:	d00f      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x70>
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077a0:	d107      	bne.n	80077b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <HAL_SPI_TransmitReceive+0x68>
 80077aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d003      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
 80077b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077b8:	e15b      	b.n	8007a72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <HAL_SPI_TransmitReceive+0x82>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_SPI_TransmitReceive+0x82>
 80077c6:	887b      	ldrh	r3, [r7, #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077d2:	e14e      	b.n	8007a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d003      	beq.n	80077e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2205      	movs	r2, #5
 80077e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	887a      	ldrh	r2, [r7, #2]
 80077f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	887a      	ldrh	r2, [r7, #2]
 80077fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	887a      	ldrh	r2, [r7, #2]
 800780a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	887a      	ldrh	r2, [r7, #2]
 8007810:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b40      	cmp	r3, #64	; 0x40
 800782a:	d007      	beq.n	800783c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800783a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007844:	d178      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x10a>
 800784e:	8b7b      	ldrh	r3, [r7, #26]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d166      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	881a      	ldrh	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	1c9a      	adds	r2, r3, #2
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007878:	e053      	b.n	8007922 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b02      	cmp	r3, #2
 8007886:	d11b      	bne.n	80078c0 <HAL_SPI_TransmitReceive+0x176>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_SPI_TransmitReceive+0x176>
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	2b01      	cmp	r3, #1
 8007896:	d113      	bne.n	80078c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	881a      	ldrh	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d119      	bne.n	8007902 <HAL_SPI_TransmitReceive+0x1b8>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d014      	beq.n	8007902 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	b292      	uxth	r2, r2
 80078e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	1c9a      	adds	r2, r3, #2
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078fe:	2301      	movs	r3, #1
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007902:	f7fb fced 	bl	80032e0 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800790e:	429a      	cmp	r2, r3
 8007910:	d807      	bhi.n	8007922 <HAL_SPI_TransmitReceive+0x1d8>
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d003      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007920:	e0a7      	b.n	8007a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1a6      	bne.n	800787a <HAL_SPI_TransmitReceive+0x130>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1a1      	bne.n	800787a <HAL_SPI_TransmitReceive+0x130>
 8007936:	e07c      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <HAL_SPI_TransmitReceive+0x1fc>
 8007940:	8b7b      	ldrh	r3, [r7, #26]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d16b      	bne.n	8007a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	7812      	ldrb	r2, [r2, #0]
 8007952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800796c:	e057      	b.n	8007a1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b02      	cmp	r3, #2
 800797a:	d11c      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x26c>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d017      	beq.n	80079b6 <HAL_SPI_TransmitReceive+0x26c>
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d114      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330c      	adds	r3, #12
 8007996:	7812      	ldrb	r2, [r2, #0]
 8007998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d119      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x2ae>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d014      	beq.n	80079f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079f4:	2301      	movs	r3, #1
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079f8:	f7fb fc72 	bl	80032e0 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d803      	bhi.n	8007a10 <HAL_SPI_TransmitReceive+0x2c6>
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d102      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x2cc>
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d103      	bne.n	8007a1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a1c:	e029      	b.n	8007a72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1a2      	bne.n	800796e <HAL_SPI_TransmitReceive+0x224>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d19d      	bne.n	800796e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f8b2 	bl	8007ba0 <SPI_EndRxTxTransaction>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d006      	beq.n	8007a50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a4e:	e010      	b.n	8007a72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10b      	bne.n	8007a70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a58:	2300      	movs	r3, #0
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	e000      	b.n	8007a72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3730      	adds	r7, #48	; 0x30
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007aa0:	f7fb fc1e 	bl	80032e0 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	1a9b      	subs	r3, r3, r2
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4413      	add	r3, r2
 8007aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ab0:	f7fb fc16 	bl	80032e0 <HAL_GetTick>
 8007ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ab6:	4b39      	ldr	r3, [pc, #228]	; (8007b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	015b      	lsls	r3, r3, #5
 8007abc:	0d1b      	lsrs	r3, r3, #20
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	fb02 f303 	mul.w	r3, r2, r3
 8007ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ac6:	e054      	b.n	8007b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d050      	beq.n	8007b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ad0:	f7fb fc06 	bl	80032e0 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d902      	bls.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d13d      	bne.n	8007b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007afe:	d111      	bne.n	8007b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b08:	d004      	beq.n	8007b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b12:	d107      	bne.n	8007b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2c:	d10f      	bne.n	8007b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e017      	b.n	8007b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	bf0c      	ite	eq
 8007b82:	2301      	moveq	r3, #1
 8007b84:	2300      	movne	r3, #0
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d19b      	bne.n	8007ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000264 	.word	0x20000264

08007ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <SPI_EndRxTxTransaction+0x7c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <SPI_EndRxTxTransaction+0x80>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	0d5b      	lsrs	r3, r3, #21
 8007bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bca:	d112      	bne.n	8007bf2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2180      	movs	r1, #128	; 0x80
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff ff5a 	bl	8007a90 <SPI_WaitFlagStateUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be6:	f043 0220 	orr.w	r2, r3, #32
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e00f      	b.n	8007c12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c08:	2b80      	cmp	r3, #128	; 0x80
 8007c0a:	d0f2      	beq.n	8007bf2 <SPI_EndRxTxTransaction+0x52>
 8007c0c:	e000      	b.n	8007c10 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c0e:	bf00      	nop
  }

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000264 	.word	0x20000264
 8007c20:	165e9f81 	.word	0x165e9f81

08007c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e03f      	b.n	8007cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7fa ff9a 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2224      	movs	r2, #36	; 0x24
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f829 	bl	8007cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	695a      	ldr	r2, [r3, #20]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc4:	b0c0      	sub	sp, #256	; 0x100
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	68d9      	ldr	r1, [r3, #12]
 8007cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	ea40 0301 	orr.w	r3, r0, r1
 8007ce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d18:	f021 010c 	bic.w	r1, r1, #12
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d26:	430b      	orrs	r3, r1
 8007d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3a:	6999      	ldr	r1, [r3, #24]
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	ea40 0301 	orr.w	r3, r0, r1
 8007d46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4b8f      	ldr	r3, [pc, #572]	; (8007f8c <UART_SetConfig+0x2cc>)
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d005      	beq.n	8007d60 <UART_SetConfig+0xa0>
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4b8d      	ldr	r3, [pc, #564]	; (8007f90 <UART_SetConfig+0x2d0>)
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d104      	bne.n	8007d6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d60:	f7ff fb1a 	bl	8007398 <HAL_RCC_GetPCLK2Freq>
 8007d64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d68:	e003      	b.n	8007d72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d6a:	f7ff fb01 	bl	8007370 <HAL_RCC_GetPCLK1Freq>
 8007d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d7c:	f040 810c 	bne.w	8007f98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d92:	4622      	mov	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	1891      	adds	r1, r2, r2
 8007d98:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d9a:	415b      	adcs	r3, r3
 8007d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007da2:	4621      	mov	r1, r4
 8007da4:	eb12 0801 	adds.w	r8, r2, r1
 8007da8:	4629      	mov	r1, r5
 8007daa:	eb43 0901 	adc.w	r9, r3, r1
 8007dae:	f04f 0200 	mov.w	r2, #0
 8007db2:	f04f 0300 	mov.w	r3, #0
 8007db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dc2:	4690      	mov	r8, r2
 8007dc4:	4699      	mov	r9, r3
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	eb18 0303 	adds.w	r3, r8, r3
 8007dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd0:	462b      	mov	r3, r5
 8007dd2:	eb49 0303 	adc.w	r3, r9, r3
 8007dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007de6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dee:	460b      	mov	r3, r1
 8007df0:	18db      	adds	r3, r3, r3
 8007df2:	653b      	str	r3, [r7, #80]	; 0x50
 8007df4:	4613      	mov	r3, r2
 8007df6:	eb42 0303 	adc.w	r3, r2, r3
 8007dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8007dfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e04:	f7f8 feba 	bl	8000b7c <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4b61      	ldr	r3, [pc, #388]	; (8007f94 <UART_SetConfig+0x2d4>)
 8007e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	011c      	lsls	r4, r3, #4
 8007e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	1891      	adds	r1, r2, r2
 8007e2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e30:	415b      	adcs	r3, r3
 8007e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e38:	4641      	mov	r1, r8
 8007e3a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e3e:	4649      	mov	r1, r9
 8007e40:	eb43 0b01 	adc.w	fp, r3, r1
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e58:	4692      	mov	sl, r2
 8007e5a:	469b      	mov	fp, r3
 8007e5c:	4643      	mov	r3, r8
 8007e5e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e66:	464b      	mov	r3, r9
 8007e68:	eb4b 0303 	adc.w	r3, fp, r3
 8007e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e84:	460b      	mov	r3, r1
 8007e86:	18db      	adds	r3, r3, r3
 8007e88:	643b      	str	r3, [r7, #64]	; 0x40
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	eb42 0303 	adc.w	r3, r2, r3
 8007e90:	647b      	str	r3, [r7, #68]	; 0x44
 8007e92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e9a:	f7f8 fe6f 	bl	8000b7c <__aeabi_uldivmod>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4b3b      	ldr	r3, [pc, #236]	; (8007f94 <UART_SetConfig+0x2d4>)
 8007ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8007eaa:	095b      	lsrs	r3, r3, #5
 8007eac:	2264      	movs	r2, #100	; 0x64
 8007eae:	fb02 f303 	mul.w	r3, r2, r3
 8007eb2:	1acb      	subs	r3, r1, r3
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007eba:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <UART_SetConfig+0x2d4>)
 8007ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ec8:	441c      	add	r4, r3
 8007eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ed4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ed8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	1891      	adds	r1, r2, r2
 8007ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ee4:	415b      	adcs	r3, r3
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007eec:	4641      	mov	r1, r8
 8007eee:	1851      	adds	r1, r2, r1
 8007ef0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	414b      	adcs	r3, r1
 8007ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f04:	4659      	mov	r1, fp
 8007f06:	00cb      	lsls	r3, r1, #3
 8007f08:	4651      	mov	r1, sl
 8007f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f0e:	4651      	mov	r1, sl
 8007f10:	00ca      	lsls	r2, r1, #3
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	4642      	mov	r2, r8
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f20:	464b      	mov	r3, r9
 8007f22:	460a      	mov	r2, r1
 8007f24:	eb42 0303 	adc.w	r3, r2, r3
 8007f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f40:	460b      	mov	r3, r1
 8007f42:	18db      	adds	r3, r3, r3
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f46:	4613      	mov	r3, r2
 8007f48:	eb42 0303 	adc.w	r3, r2, r3
 8007f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f56:	f7f8 fe11 	bl	8000b7c <__aeabi_uldivmod>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <UART_SetConfig+0x2d4>)
 8007f60:	fba3 1302 	umull	r1, r3, r3, r2
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	2164      	movs	r1, #100	; 0x64
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	3332      	adds	r3, #50	; 0x32
 8007f72:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <UART_SetConfig+0x2d4>)
 8007f74:	fba2 2303 	umull	r2, r3, r2, r3
 8007f78:	095b      	lsrs	r3, r3, #5
 8007f7a:	f003 0207 	and.w	r2, r3, #7
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4422      	add	r2, r4
 8007f86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f88:	e105      	b.n	8008196 <UART_SetConfig+0x4d6>
 8007f8a:	bf00      	nop
 8007f8c:	40011000 	.word	0x40011000
 8007f90:	40011400 	.word	0x40011400
 8007f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007faa:	4642      	mov	r2, r8
 8007fac:	464b      	mov	r3, r9
 8007fae:	1891      	adds	r1, r2, r2
 8007fb0:	6239      	str	r1, [r7, #32]
 8007fb2:	415b      	adcs	r3, r3
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fba:	4641      	mov	r1, r8
 8007fbc:	1854      	adds	r4, r2, r1
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	eb43 0501 	adc.w	r5, r3, r1
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	00eb      	lsls	r3, r5, #3
 8007fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fd2:	00e2      	lsls	r2, r4, #3
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	4643      	mov	r3, r8
 8007fda:	18e3      	adds	r3, r4, r3
 8007fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	eb45 0303 	adc.w	r3, r5, r3
 8007fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ffa:	f04f 0200 	mov.w	r2, #0
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008006:	4629      	mov	r1, r5
 8008008:	008b      	lsls	r3, r1, #2
 800800a:	4621      	mov	r1, r4
 800800c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008010:	4621      	mov	r1, r4
 8008012:	008a      	lsls	r2, r1, #2
 8008014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008018:	f7f8 fdb0 	bl	8000b7c <__aeabi_uldivmod>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4b60      	ldr	r3, [pc, #384]	; (80081a4 <UART_SetConfig+0x4e4>)
 8008022:	fba3 2302 	umull	r2, r3, r3, r2
 8008026:	095b      	lsrs	r3, r3, #5
 8008028:	011c      	lsls	r4, r3, #4
 800802a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800802e:	2200      	movs	r2, #0
 8008030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008034:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800803c:	4642      	mov	r2, r8
 800803e:	464b      	mov	r3, r9
 8008040:	1891      	adds	r1, r2, r2
 8008042:	61b9      	str	r1, [r7, #24]
 8008044:	415b      	adcs	r3, r3
 8008046:	61fb      	str	r3, [r7, #28]
 8008048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800804c:	4641      	mov	r1, r8
 800804e:	1851      	adds	r1, r2, r1
 8008050:	6139      	str	r1, [r7, #16]
 8008052:	4649      	mov	r1, r9
 8008054:	414b      	adcs	r3, r1
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008064:	4659      	mov	r1, fp
 8008066:	00cb      	lsls	r3, r1, #3
 8008068:	4651      	mov	r1, sl
 800806a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800806e:	4651      	mov	r1, sl
 8008070:	00ca      	lsls	r2, r1, #3
 8008072:	4610      	mov	r0, r2
 8008074:	4619      	mov	r1, r3
 8008076:	4603      	mov	r3, r0
 8008078:	4642      	mov	r2, r8
 800807a:	189b      	adds	r3, r3, r2
 800807c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008080:	464b      	mov	r3, r9
 8008082:	460a      	mov	r2, r1
 8008084:	eb42 0303 	adc.w	r3, r2, r3
 8008088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	67bb      	str	r3, [r7, #120]	; 0x78
 8008096:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080a4:	4649      	mov	r1, r9
 80080a6:	008b      	lsls	r3, r1, #2
 80080a8:	4641      	mov	r1, r8
 80080aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ae:	4641      	mov	r1, r8
 80080b0:	008a      	lsls	r2, r1, #2
 80080b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080b6:	f7f8 fd61 	bl	8000b7c <__aeabi_uldivmod>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <UART_SetConfig+0x4e4>)
 80080c0:	fba3 1302 	umull	r1, r3, r3, r2
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	2164      	movs	r1, #100	; 0x64
 80080c8:	fb01 f303 	mul.w	r3, r1, r3
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	3332      	adds	r3, #50	; 0x32
 80080d2:	4a34      	ldr	r2, [pc, #208]	; (80081a4 <UART_SetConfig+0x4e4>)
 80080d4:	fba2 2303 	umull	r2, r3, r2, r3
 80080d8:	095b      	lsrs	r3, r3, #5
 80080da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080de:	441c      	add	r4, r3
 80080e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080e4:	2200      	movs	r2, #0
 80080e6:	673b      	str	r3, [r7, #112]	; 0x70
 80080e8:	677a      	str	r2, [r7, #116]	; 0x74
 80080ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080ee:	4642      	mov	r2, r8
 80080f0:	464b      	mov	r3, r9
 80080f2:	1891      	adds	r1, r2, r2
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	415b      	adcs	r3, r3
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080fe:	4641      	mov	r1, r8
 8008100:	1851      	adds	r1, r2, r1
 8008102:	6039      	str	r1, [r7, #0]
 8008104:	4649      	mov	r1, r9
 8008106:	414b      	adcs	r3, r1
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008116:	4659      	mov	r1, fp
 8008118:	00cb      	lsls	r3, r1, #3
 800811a:	4651      	mov	r1, sl
 800811c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008120:	4651      	mov	r1, sl
 8008122:	00ca      	lsls	r2, r1, #3
 8008124:	4610      	mov	r0, r2
 8008126:	4619      	mov	r1, r3
 8008128:	4603      	mov	r3, r0
 800812a:	4642      	mov	r2, r8
 800812c:	189b      	adds	r3, r3, r2
 800812e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008130:	464b      	mov	r3, r9
 8008132:	460a      	mov	r2, r1
 8008134:	eb42 0303 	adc.w	r3, r2, r3
 8008138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800813a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	663b      	str	r3, [r7, #96]	; 0x60
 8008144:	667a      	str	r2, [r7, #100]	; 0x64
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008152:	4649      	mov	r1, r9
 8008154:	008b      	lsls	r3, r1, #2
 8008156:	4641      	mov	r1, r8
 8008158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800815c:	4641      	mov	r1, r8
 800815e:	008a      	lsls	r2, r1, #2
 8008160:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008164:	f7f8 fd0a 	bl	8000b7c <__aeabi_uldivmod>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <UART_SetConfig+0x4e4>)
 800816e:	fba3 1302 	umull	r1, r3, r3, r2
 8008172:	095b      	lsrs	r3, r3, #5
 8008174:	2164      	movs	r1, #100	; 0x64
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	3332      	adds	r3, #50	; 0x32
 8008180:	4a08      	ldr	r2, [pc, #32]	; (80081a4 <UART_SetConfig+0x4e4>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4422      	add	r2, r4
 8008194:	609a      	str	r2, [r3, #8]
}
 8008196:	bf00      	nop
 8008198:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800819c:	46bd      	mov	sp, r7
 800819e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081a2:	bf00      	nop
 80081a4:	51eb851f 	.word	0x51eb851f

080081a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081a8:	b084      	sub	sp, #16
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	f107 001c 	add.w	r0, r7, #28
 80081b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d122      	bne.n	8008206 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d105      	bne.n	80081fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f001 fbee 	bl	80099dc <USB_CoreReset>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
 8008204:	e01a      	b.n	800823c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fbe2 	bl	80099dc <USB_CoreReset>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800821c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
 800822e:	e005      	b.n	800823c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	2b01      	cmp	r3, #1
 8008240:	d10b      	bne.n	800825a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f043 0206 	orr.w	r2, r3, #6
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f043 0220 	orr.w	r2, r3, #32
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008266:	b004      	add	sp, #16
 8008268:	4770      	bx	lr
	...

0800826c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d165      	bne.n	800834c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4a41      	ldr	r2, [pc, #260]	; (8008388 <USB_SetTurnaroundTime+0x11c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d906      	bls.n	8008296 <USB_SetTurnaroundTime+0x2a>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	4a40      	ldr	r2, [pc, #256]	; (800838c <USB_SetTurnaroundTime+0x120>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d202      	bcs.n	8008296 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008290:	230f      	movs	r3, #15
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	e062      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4a3c      	ldr	r2, [pc, #240]	; (800838c <USB_SetTurnaroundTime+0x120>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d306      	bcc.n	80082ac <USB_SetTurnaroundTime+0x40>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4a3b      	ldr	r2, [pc, #236]	; (8008390 <USB_SetTurnaroundTime+0x124>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d202      	bcs.n	80082ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082a6:	230e      	movs	r3, #14
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e057      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4a38      	ldr	r2, [pc, #224]	; (8008390 <USB_SetTurnaroundTime+0x124>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d306      	bcc.n	80082c2 <USB_SetTurnaroundTime+0x56>
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	4a37      	ldr	r2, [pc, #220]	; (8008394 <USB_SetTurnaroundTime+0x128>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d202      	bcs.n	80082c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80082bc:	230d      	movs	r3, #13
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	e04c      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	4a33      	ldr	r2, [pc, #204]	; (8008394 <USB_SetTurnaroundTime+0x128>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d306      	bcc.n	80082d8 <USB_SetTurnaroundTime+0x6c>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4a32      	ldr	r2, [pc, #200]	; (8008398 <USB_SetTurnaroundTime+0x12c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d802      	bhi.n	80082d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80082d2:	230c      	movs	r3, #12
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	e041      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4a2f      	ldr	r2, [pc, #188]	; (8008398 <USB_SetTurnaroundTime+0x12c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d906      	bls.n	80082ee <USB_SetTurnaroundTime+0x82>
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4a2e      	ldr	r2, [pc, #184]	; (800839c <USB_SetTurnaroundTime+0x130>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d802      	bhi.n	80082ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80082e8:	230b      	movs	r3, #11
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e036      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4a2a      	ldr	r2, [pc, #168]	; (800839c <USB_SetTurnaroundTime+0x130>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d906      	bls.n	8008304 <USB_SetTurnaroundTime+0x98>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4a29      	ldr	r2, [pc, #164]	; (80083a0 <USB_SetTurnaroundTime+0x134>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d802      	bhi.n	8008304 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80082fe:	230a      	movs	r3, #10
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e02b      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <USB_SetTurnaroundTime+0x134>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d906      	bls.n	800831a <USB_SetTurnaroundTime+0xae>
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4a25      	ldr	r2, [pc, #148]	; (80083a4 <USB_SetTurnaroundTime+0x138>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d202      	bcs.n	800831a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008314:	2309      	movs	r3, #9
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e020      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4a21      	ldr	r2, [pc, #132]	; (80083a4 <USB_SetTurnaroundTime+0x138>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d306      	bcc.n	8008330 <USB_SetTurnaroundTime+0xc4>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4a20      	ldr	r2, [pc, #128]	; (80083a8 <USB_SetTurnaroundTime+0x13c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d802      	bhi.n	8008330 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800832a:	2308      	movs	r3, #8
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e015      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <USB_SetTurnaroundTime+0x13c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d906      	bls.n	8008346 <USB_SetTurnaroundTime+0xda>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <USB_SetTurnaroundTime+0x140>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d202      	bcs.n	8008346 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008340:	2307      	movs	r3, #7
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e00a      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008346:	2306      	movs	r3, #6
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	e007      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d102      	bne.n	8008358 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008352:	2309      	movs	r3, #9
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	e001      	b.n	800835c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008358:	2309      	movs	r3, #9
 800835a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	029b      	lsls	r3, r3, #10
 8008370:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008374:	431a      	orrs	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	00d8acbf 	.word	0x00d8acbf
 800838c:	00e4e1c0 	.word	0x00e4e1c0
 8008390:	00f42400 	.word	0x00f42400
 8008394:	01067380 	.word	0x01067380
 8008398:	011a499f 	.word	0x011a499f
 800839c:	01312cff 	.word	0x01312cff
 80083a0:	014ca43f 	.word	0x014ca43f
 80083a4:	016e3600 	.word	0x016e3600
 80083a8:	01a6ab1f 	.word	0x01a6ab1f
 80083ac:	01e84800 	.word	0x01e84800

080083b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f043 0201 	orr.w	r2, r3, #1
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d115      	bne.n	8008442 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008422:	2001      	movs	r0, #1
 8008424:	f7fa ff68 	bl	80032f8 <HAL_Delay>
      ms++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3301      	adds	r3, #1
 800842c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 fa45 	bl	80098be <USB_GetMode>
 8008434:	4603      	mov	r3, r0
 8008436:	2b01      	cmp	r3, #1
 8008438:	d01e      	beq.n	8008478 <USB_SetCurrentMode+0x84>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b31      	cmp	r3, #49	; 0x31
 800843e:	d9f0      	bls.n	8008422 <USB_SetCurrentMode+0x2e>
 8008440:	e01a      	b.n	8008478 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d115      	bne.n	8008474 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008454:	2001      	movs	r0, #1
 8008456:	f7fa ff4f 	bl	80032f8 <HAL_Delay>
      ms++;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 fa2c 	bl	80098be <USB_GetMode>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <USB_SetCurrentMode+0x84>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b31      	cmp	r3, #49	; 0x31
 8008470:	d9f0      	bls.n	8008454 <USB_SetCurrentMode+0x60>
 8008472:	e001      	b.n	8008478 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e005      	b.n	8008484 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b32      	cmp	r3, #50	; 0x32
 800847c:	d101      	bne.n	8008482 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800848c:	b084      	sub	sp, #16
 800848e:	b580      	push	{r7, lr}
 8008490:	b086      	sub	sp, #24
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800849a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084a6:	2300      	movs	r3, #0
 80084a8:	613b      	str	r3, [r7, #16]
 80084aa:	e009      	b.n	80084c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	3340      	adds	r3, #64	; 0x40
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	2200      	movs	r2, #0
 80084b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3301      	adds	r3, #1
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b0e      	cmp	r3, #14
 80084c4:	d9f2      	bls.n	80084ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11c      	bne.n	8008506 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084da:	f043 0302 	orr.w	r3, r3, #2
 80084de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	639a      	str	r2, [r3, #56]	; 0x38
 8008504:	e00b      	b.n	800851e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008524:	461a      	mov	r2, r3
 8008526:	2300      	movs	r3, #0
 8008528:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008530:	4619      	mov	r1, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008538:	461a      	mov	r2, r3
 800853a:	680b      	ldr	r3, [r1, #0]
 800853c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	2b01      	cmp	r3, #1
 8008542:	d10c      	bne.n	800855e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d104      	bne.n	8008554 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800854a:	2100      	movs	r1, #0
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f965 	bl	800881c <USB_SetDevSpeed>
 8008552:	e008      	b.n	8008566 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008554:	2101      	movs	r1, #1
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f960 	bl	800881c <USB_SetDevSpeed>
 800855c:	e003      	b.n	8008566 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800855e:	2103      	movs	r1, #3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f95b 	bl	800881c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008566:	2110      	movs	r1, #16
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f8f3 	bl	8008754 <USB_FlushTxFifo>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f91f 	bl	80087bc <USB_FlushRxFifo>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	461a      	mov	r2, r3
 8008590:	2300      	movs	r3, #0
 8008592:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859a:	461a      	mov	r2, r3
 800859c:	2300      	movs	r3, #0
 800859e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	461a      	mov	r2, r3
 80085a8:	2300      	movs	r3, #0
 80085aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085ac:	2300      	movs	r3, #0
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	e043      	b.n	800863a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085c8:	d118      	bne.n	80085fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	461a      	mov	r2, r3
 80085de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	e013      	b.n	800860e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f2:	461a      	mov	r2, r3
 80085f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	e008      	b.n	800860e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	461a      	mov	r2, r3
 800860a:	2300      	movs	r3, #0
 800860c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861a:	461a      	mov	r2, r3
 800861c:	2300      	movs	r3, #0
 800861e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862c:	461a      	mov	r2, r3
 800862e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008632:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	3301      	adds	r3, #1
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	429a      	cmp	r2, r3
 8008640:	d3b7      	bcc.n	80085b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]
 8008646:	e043      	b.n	80086d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800865a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800865e:	d118      	bne.n	8008692 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008672:	461a      	mov	r2, r3
 8008674:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	e013      	b.n	80086a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008688:	461a      	mov	r2, r3
 800868a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	e008      	b.n	80086a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869e:	461a      	mov	r2, r3
 80086a0:	2300      	movs	r3, #0
 80086a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b0:	461a      	mov	r2, r3
 80086b2:	2300      	movs	r3, #0
 80086b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c2:	461a      	mov	r2, r3
 80086c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	3301      	adds	r3, #1
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d3b7      	bcc.n	8008648 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d105      	bne.n	800870c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	f043 0210 	orr.w	r2, r3, #16
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	699a      	ldr	r2, [r3, #24]
 8008710:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <USB_DevInit+0x2c4>)
 8008712:	4313      	orrs	r3, r2
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	f043 0208 	orr.w	r2, r3, #8
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800872a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800872c:	2b01      	cmp	r3, #1
 800872e:	d107      	bne.n	8008740 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008738:	f043 0304 	orr.w	r3, r3, #4
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800874c:	b004      	add	sp, #16
 800874e:	4770      	bx	lr
 8008750:	803c3800 	.word	0x803c3800

08008754 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4a13      	ldr	r2, [pc, #76]	; (80087b8 <USB_FlushTxFifo+0x64>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d901      	bls.n	8008774 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e01b      	b.n	80087ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	daf2      	bge.n	8008762 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	019b      	lsls	r3, r3, #6
 8008784:	f043 0220 	orr.w	r2, r3, #32
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <USB_FlushTxFifo+0x64>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d901      	bls.n	800879e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e006      	b.n	80087ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b20      	cmp	r3, #32
 80087a8:	d0f0      	beq.n	800878c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	00030d40 	.word	0x00030d40

080087bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	4a11      	ldr	r2, [pc, #68]	; (8008818 <USB_FlushRxFifo+0x5c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d901      	bls.n	80087da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e018      	b.n	800880c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	daf2      	bge.n	80087c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2210      	movs	r2, #16
 80087ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4a08      	ldr	r2, [pc, #32]	; (8008818 <USB_FlushRxFifo+0x5c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d901      	bls.n	80087fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e006      	b.n	800880c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	f003 0310 	and.w	r3, r3, #16
 8008806:	2b10      	cmp	r3, #16
 8008808:	d0f0      	beq.n	80087ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	00030d40 	.word	0x00030d40

0800881c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	68f9      	ldr	r1, [r7, #12]
 8008838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800883c:	4313      	orrs	r3, r2
 800883e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800884e:	b480      	push	{r7}
 8008850:	b087      	sub	sp, #28
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 0306 	and.w	r3, r3, #6
 8008866:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800886e:	2300      	movs	r3, #0
 8008870:	75fb      	strb	r3, [r7, #23]
 8008872:	e00a      	b.n	800888a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d002      	beq.n	8008880 <USB_GetDevSpeed+0x32>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b06      	cmp	r3, #6
 800887e:	d102      	bne.n	8008886 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008880:	2302      	movs	r3, #2
 8008882:	75fb      	strb	r3, [r7, #23]
 8008884:	e001      	b.n	800888a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008886:	230f      	movs	r3, #15
 8008888:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
}
 800888c:	4618      	mov	r0, r3
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d13a      	bne.n	800892a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	2101      	movs	r1, #1
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	68f9      	ldr	r1, [r7, #12]
 80088ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088d2:	4313      	orrs	r3, r2
 80088d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d155      	bne.n	8008998 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	791b      	ldrb	r3, [r3, #4]
 8008906:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008908:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008910:	4313      	orrs	r3, r2
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	0151      	lsls	r1, r2, #5
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	440a      	add	r2, r1
 800891a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800891e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	e036      	b.n	8008998 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008930:	69da      	ldr	r2, [r3, #28]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	2101      	movs	r1, #1
 800893c:	fa01 f303 	lsl.w	r3, r1, r3
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008948:	4313      	orrs	r3, r2
 800894a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d11a      	bne.n	8008998 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	791b      	ldrb	r3, [r3, #4]
 800897c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800897e:	430b      	orrs	r3, r1
 8008980:	4313      	orrs	r3, r2
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	0151      	lsls	r1, r2, #5
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	440a      	add	r2, r1
 800898a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008996:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d161      	bne.n	8008a88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089da:	d11f      	bne.n	8008a1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	43db      	mvns	r3, r3
 8008a36:	68f9      	ldr	r1, [r7, #12]
 8008a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	2101      	movs	r1, #1
 8008a52:	fa01 f303 	lsl.w	r3, r1, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	43db      	mvns	r3, r3
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a60:	4013      	ands	r3, r2
 8008a62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	0159      	lsls	r1, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	440b      	add	r3, r1
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4b35      	ldr	r3, [pc, #212]	; (8008b58 <USB_DeactivateEndpoint+0x1b0>)
 8008a82:	4013      	ands	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]
 8008a86:	e060      	b.n	8008b4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a9e:	d11f      	bne.n	8008ae0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008abe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	0151      	lsls	r1, r2, #5
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	440a      	add	r2, r1
 8008ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ade:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f003 030f 	and.w	r3, r3, #15
 8008af0:	2101      	movs	r1, #1
 8008af2:	fa01 f303 	lsl.w	r3, r1, r3
 8008af6:	041b      	lsls	r3, r3, #16
 8008af8:	43db      	mvns	r3, r3
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b00:	4013      	ands	r3, r2
 8008b02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	69da      	ldr	r2, [r3, #28]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	2101      	movs	r1, #1
 8008b16:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1a:	041b      	lsls	r3, r3, #16
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b24:	4013      	ands	r3, r2
 8008b26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	0159      	lsls	r1, r3, #5
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	440b      	add	r3, r1
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b42:	4619      	mov	r1, r3
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <USB_DeactivateEndpoint+0x1b4>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	ec337800 	.word	0xec337800
 8008b5c:	eff37800 	.word	0xeff37800

08008b60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	; 0x28
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	f040 815c 	bne.w	8008e3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d132      	bne.n	8008bf0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ba8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be8:	0cdb      	lsrs	r3, r3, #19
 8008bea:	04db      	lsls	r3, r3, #19
 8008bec:	6113      	str	r3, [r2, #16]
 8008bee:	e074      	b.n	8008cda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0a:	0cdb      	lsrs	r3, r3, #19
 8008c0c:	04db      	lsls	r3, r3, #19
 8008c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6999      	ldr	r1, [r3, #24]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	440b      	add	r3, r1
 8008c4c:	1e59      	subs	r1, r3, #1
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c58:	4b9d      	ldr	r3, [pc, #628]	; (8008ed0 <USB_EPStartXfer+0x370>)
 8008c5a:	400b      	ands	r3, r1
 8008c5c:	69b9      	ldr	r1, [r7, #24]
 8008c5e:	0148      	lsls	r0, r1, #5
 8008c60:	69f9      	ldr	r1, [r7, #28]
 8008c62:	4401      	add	r1, r0
 8008c64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c78:	691a      	ldr	r2, [r3, #16]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c82:	69b9      	ldr	r1, [r7, #24]
 8008c84:	0148      	lsls	r0, r1, #5
 8008c86:	69f9      	ldr	r1, [r7, #28]
 8008c88:	4401      	add	r1, r0
 8008c8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	791b      	ldrb	r3, [r3, #4]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d11f      	bne.n	8008cda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	69fa      	ldr	r2, [r7, #28]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008cb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	0151      	lsls	r1, r2, #5
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	440a      	add	r2, r1
 8008cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d14b      	bne.n	8008d78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d009      	beq.n	8008cfc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	791b      	ldrb	r3, [r3, #4]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d128      	bne.n	8008d56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d110      	bne.n	8008d36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	0151      	lsls	r1, r2, #5
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	440a      	add	r2, r1
 8008d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	e00f      	b.n	8008d56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	0151      	lsls	r1, r2, #5
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	e133      	b.n	8008fe0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	0151      	lsls	r1, r2, #5
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	440a      	add	r2, r1
 8008d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	791b      	ldrb	r3, [r3, #4]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d015      	beq.n	8008dcc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 811b 	beq.w	8008fe0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	2101      	movs	r1, #1
 8008dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc0:	69f9      	ldr	r1, [r7, #28]
 8008dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	634b      	str	r3, [r1, #52]	; 0x34
 8008dca:	e109      	b.n	8008fe0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d110      	bne.n	8008dfe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	e00f      	b.n	8008e1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	0151      	lsls	r1, r2, #5
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	440a      	add	r2, r1
 8008e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6919      	ldr	r1, [r3, #16]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	781a      	ldrb	r2, [r3, #0]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	b298      	uxth	r0, r3
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	4603      	mov	r3, r0
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 fade 	bl	80093f4 <USB_WritePacket>
 8008e38:	e0d2      	b.n	8008fe0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	0151      	lsls	r1, r2, #5
 8008e4c:	69fa      	ldr	r2, [r7, #28]
 8008e4e:	440a      	add	r2, r1
 8008e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e54:	0cdb      	lsrs	r3, r3, #19
 8008e56:	04db      	lsls	r3, r3, #19
 8008e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d126      	bne.n	8008ed4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e92:	691a      	ldr	r2, [r3, #16]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e9c:	69b9      	ldr	r1, [r7, #24]
 8008e9e:	0148      	lsls	r0, r1, #5
 8008ea0:	69f9      	ldr	r1, [r7, #28]
 8008ea2:	4401      	add	r1, r0
 8008ea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eca:	6113      	str	r3, [r2, #16]
 8008ecc:	e03a      	b.n	8008f44 <USB_EPStartXfer+0x3e4>
 8008ece:	bf00      	nop
 8008ed0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	8afa      	ldrh	r2, [r7, #22]
 8008ef0:	fb03 f202 	mul.w	r2, r3, r2
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	8afb      	ldrh	r3, [r7, #22]
 8008f08:	04d9      	lsls	r1, r3, #19
 8008f0a:	4b38      	ldr	r3, [pc, #224]	; (8008fec <USB_EPStartXfer+0x48c>)
 8008f0c:	400b      	ands	r3, r1
 8008f0e:	69b9      	ldr	r1, [r7, #24]
 8008f10:	0148      	lsls	r0, r1, #5
 8008f12:	69f9      	ldr	r1, [r7, #28]
 8008f14:	4401      	add	r1, r0
 8008f16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2a:	691a      	ldr	r2, [r3, #16]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f34:	69b9      	ldr	r1, [r7, #24]
 8008f36:	0148      	lsls	r0, r1, #5
 8008f38:	69f9      	ldr	r1, [r7, #28]
 8008f3a:	4401      	add	r1, r0
 8008f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f40:	4313      	orrs	r3, r2
 8008f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d10d      	bne.n	8008f66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d009      	beq.n	8008f66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6919      	ldr	r1, [r3, #16]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	460a      	mov	r2, r1
 8008f64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	791b      	ldrb	r3, [r3, #4]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d128      	bne.n	8008fc0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d110      	bne.n	8008fa0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	e00f      	b.n	8008fc0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69ba      	ldr	r2, [r7, #24]
 8008fb0:	0151      	lsls	r1, r2, #5
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	440a      	add	r2, r1
 8008fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	0151      	lsls	r1, r2, #5
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3720      	adds	r7, #32
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	1ff80000 	.word	0x1ff80000

08008ff0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	2b01      	cmp	r3, #1
 800900e:	f040 80ce 	bne.w	80091ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d132      	bne.n	8009080 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	0151      	lsls	r1, r2, #5
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	440a      	add	r2, r1
 8009030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800903c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	0151      	lsls	r1, r2, #5
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	440a      	add	r2, r1
 8009054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800905c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	0151      	lsls	r1, r2, #5
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	440a      	add	r2, r1
 8009074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009078:	0cdb      	lsrs	r3, r3, #19
 800907a:	04db      	lsls	r3, r3, #19
 800907c:	6113      	str	r3, [r2, #16]
 800907e:	e04e      	b.n	800911e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	0151      	lsls	r1, r2, #5
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	440a      	add	r2, r1
 8009096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800909a:	0cdb      	lsrs	r3, r3, #19
 800909c:	04db      	lsls	r3, r3, #19
 800909e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	699a      	ldr	r2, [r3, #24]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d903      	bls.n	80090d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	0151      	lsls	r1, r2, #5
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	440a      	add	r2, r1
 80090ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	691a      	ldr	r2, [r3, #16]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800910e:	6939      	ldr	r1, [r7, #16]
 8009110:	0148      	lsls	r0, r1, #5
 8009112:	6979      	ldr	r1, [r7, #20]
 8009114:	4401      	add	r1, r0
 8009116:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800911a:	4313      	orrs	r3, r2
 800911c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d11e      	bne.n	8009162 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d009      	beq.n	8009140 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009138:	461a      	mov	r2, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	440a      	add	r2, r1
 8009156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	e097      	b.n	8009292 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	0151      	lsls	r1, r2, #5
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	440a      	add	r2, r1
 8009178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009180:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8083 	beq.w	8009292 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	2101      	movs	r1, #1
 800919e:	fa01 f303 	lsl.w	r3, r1, r3
 80091a2:	6979      	ldr	r1, [r7, #20]
 80091a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a8:	4313      	orrs	r3, r2
 80091aa:	634b      	str	r3, [r1, #52]	; 0x34
 80091ac:	e071      	b.n	8009292 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	0151      	lsls	r1, r2, #5
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	440a      	add	r2, r1
 80091c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c8:	0cdb      	lsrs	r3, r3, #19
 80091ca:	04db      	lsls	r3, r3, #19
 80091cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	0151      	lsls	r1, r2, #5
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	440a      	add	r2, r1
 80091e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	440a      	add	r2, r1
 8009220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009236:	691a      	ldr	r2, [r3, #16]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009240:	6939      	ldr	r1, [r7, #16]
 8009242:	0148      	lsls	r0, r1, #5
 8009244:	6979      	ldr	r1, [r7, #20]
 8009246:	4401      	add	r1, r0
 8009248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800924c:	4313      	orrs	r3, r2
 800924e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d10d      	bne.n	8009272 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d009      	beq.n	8009272 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6919      	ldr	r1, [r3, #16]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926e:	460a      	mov	r2, r1
 8009270:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	0151      	lsls	r1, r2, #5
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	440a      	add	r2, r1
 8009288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800928c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009290:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	785b      	ldrb	r3, [r3, #1]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d14a      	bne.n	8009354 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d6:	f040 8086 	bne.w	80093e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	7812      	ldrb	r2, [r2, #0]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	7812      	ldrb	r2, [r2, #0]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3301      	adds	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f242 7210 	movw	r2, #10000	; 0x2710
 800932e:	4293      	cmp	r3, r2
 8009330:	d902      	bls.n	8009338 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	75fb      	strb	r3, [r7, #23]
          break;
 8009336:	e056      	b.n	80093e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800934c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009350:	d0e7      	beq.n	8009322 <USB_EPStopXfer+0x82>
 8009352:	e048      	b.n	80093e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800936c:	d13b      	bne.n	80093e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	7812      	ldrb	r2, [r2, #0]
 8009382:	0151      	lsls	r1, r2, #5
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	440a      	add	r2, r1
 8009388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009390:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	7812      	ldrb	r2, [r2, #0]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3301      	adds	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f242 7210 	movw	r2, #10000	; 0x2710
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d902      	bls.n	80093cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ca:	e00c      	b.n	80093e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093e4:	d0e7      	beq.n	80093b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b089      	sub	sp, #36	; 0x24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4611      	mov	r1, r2
 8009400:	461a      	mov	r2, r3
 8009402:	460b      	mov	r3, r1
 8009404:	71fb      	strb	r3, [r7, #7]
 8009406:	4613      	mov	r3, r2
 8009408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009416:	2b00      	cmp	r3, #0
 8009418:	d123      	bne.n	8009462 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800941a:	88bb      	ldrh	r3, [r7, #4]
 800941c:	3303      	adds	r3, #3
 800941e:	089b      	lsrs	r3, r3, #2
 8009420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009422:	2300      	movs	r3, #0
 8009424:	61bb      	str	r3, [r7, #24]
 8009426:	e018      	b.n	800945a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	031a      	lsls	r2, r3, #12
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	4413      	add	r3, r2
 8009430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009434:	461a      	mov	r2, r3
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	3301      	adds	r3, #1
 8009440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	3301      	adds	r3, #1
 8009446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	3301      	adds	r3, #1
 800944c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	3301      	adds	r3, #1
 8009452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	3301      	adds	r3, #1
 8009458:	61bb      	str	r3, [r7, #24]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	429a      	cmp	r2, r3
 8009460:	d3e2      	bcc.n	8009428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3724      	adds	r7, #36	; 0x24
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009470:	b480      	push	{r7}
 8009472:	b08b      	sub	sp, #44	; 0x2c
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	089b      	lsrs	r3, r3, #2
 800948a:	b29b      	uxth	r3, r3
 800948c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009496:	2300      	movs	r3, #0
 8009498:	623b      	str	r3, [r7, #32]
 800949a:	e014      	b.n	80094c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	3301      	adds	r3, #1
 80094ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b0:	3301      	adds	r3, #1
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	3301      	adds	r3, #1
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	3301      	adds	r3, #1
 80094be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	3301      	adds	r3, #1
 80094c4:	623b      	str	r3, [r7, #32]
 80094c6:	6a3a      	ldr	r2, [r7, #32]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d3e6      	bcc.n	800949c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80094ce:	8bfb      	ldrh	r3, [r7, #30]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d01e      	beq.n	8009512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094de:	461a      	mov	r2, r3
 80094e0:	f107 0310 	add.w	r3, r7, #16
 80094e4:	6812      	ldr	r2, [r2, #0]
 80094e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	00db      	lsls	r3, r3, #3
 80094f0:	fa22 f303 	lsr.w	r3, r2, r3
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	701a      	strb	r2, [r3, #0]
      i++;
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	3301      	adds	r3, #1
 80094fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	3301      	adds	r3, #1
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009506:	8bfb      	ldrh	r3, [r7, #30]
 8009508:	3b01      	subs	r3, #1
 800950a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800950c:	8bfb      	ldrh	r3, [r7, #30]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1ea      	bne.n	80094e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009514:	4618      	mov	r0, r3
 8009516:	372c      	adds	r7, #44	; 0x2c
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	785b      	ldrb	r3, [r3, #1]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d12c      	bne.n	8009596 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	db12      	blt.n	8009574 <USB_EPSetStall+0x54>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00f      	beq.n	8009574 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	440a      	add	r2, r1
 800956a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800956e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009572:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	440a      	add	r2, r1
 800958a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	e02b      	b.n	80095ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	db12      	blt.n	80095ce <USB_EPSetStall+0xae>
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00f      	beq.n	80095ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d128      	bne.n	800966a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009636:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	791b      	ldrb	r3, [r3, #4]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d003      	beq.n	8009648 <USB_EPClearStall+0x4c>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	791b      	ldrb	r3, [r3, #4]
 8009644:	2b02      	cmp	r3, #2
 8009646:	d138      	bne.n	80096ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	e027      	b.n	80096ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	440a      	add	r2, r1
 8009680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009688:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	791b      	ldrb	r3, [r3, #4]
 800968e:	2b03      	cmp	r3, #3
 8009690:	d003      	beq.n	800969a <USB_EPClearStall+0x9e>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	791b      	ldrb	r3, [r3, #4]
 8009696:	2b02      	cmp	r3, #2
 8009698:	d10f      	bne.n	80096ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	0151      	lsls	r1, r2, #5
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	440a      	add	r2, r1
 80096b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80096ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80096fc:	68f9      	ldr	r1, [r7, #12]
 80096fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009702:	4313      	orrs	r3, r2
 8009704:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800972e:	f023 0303 	bic.w	r3, r3, #3
 8009732:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009742:	f023 0302 	bic.w	r3, r3, #2
 8009746:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009756:	b480      	push	{r7}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009770:	f023 0303 	bic.w	r3, r3, #3
 8009774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009784:	f043 0302 	orr.w	r3, r3, #2
 8009788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	4013      	ands	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097b0:	68fb      	ldr	r3, [r7, #12]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	4013      	ands	r3, r2
 80097e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	0c1b      	lsrs	r3, r3, #16
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b085      	sub	sp, #20
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	4013      	ands	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	b29b      	uxth	r3, r3
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	460b      	mov	r3, r1
 8009830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	4013      	ands	r3, r2
 8009852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009854:	68bb      	ldr	r3, [r7, #8]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009862:	b480      	push	{r7}
 8009864:	b087      	sub	sp, #28
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009884:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009886:	78fb      	ldrb	r3, [r7, #3]
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	fa22 f303 	lsr.w	r3, r2, r3
 8009892:	01db      	lsls	r3, r3, #7
 8009894:	b2db      	uxtb	r3, r3
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4313      	orrs	r3, r2
 800989a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4013      	ands	r3, r2
 80098ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098b0:	68bb      	ldr	r3, [r7, #8]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	f003 0301 	and.w	r3, r3, #1
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80098f8:	f023 0307 	bic.w	r3, r3, #7
 80098fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800990c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	460b      	mov	r3, r1
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	333c      	adds	r3, #60	; 0x3c
 8009936:	3304      	adds	r3, #4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	4a26      	ldr	r2, [pc, #152]	; (80099d8 <USB_EP0_OutStart+0xb8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d90a      	bls.n	800995a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009954:	d101      	bne.n	800995a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	e037      	b.n	80099ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009960:	461a      	mov	r2, r3
 8009962:	2300      	movs	r3, #0
 8009964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009988:	f043 0318 	orr.w	r3, r3, #24
 800998c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800999c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80099a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d10f      	bne.n	80099c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80099c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	371c      	adds	r7, #28
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	4f54300a 	.word	0x4f54300a

080099dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4a13      	ldr	r2, [pc, #76]	; (8009a40 <USB_CoreReset+0x64>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d901      	bls.n	80099fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e01b      	b.n	8009a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	daf2      	bge.n	80099e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	f043 0201 	orr.w	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <USB_CoreReset+0x64>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d901      	bls.n	8009a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e006      	b.n	8009a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d0f0      	beq.n	8009a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	00030d40 	.word	0x00030d40

08009a44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a54:	f002 fce0 	bl	800c418 <USBD_static_malloc>
 8009a58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d109      	bne.n	8009a74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	32b0      	adds	r2, #176	; 0xb0
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a70:	2302      	movs	r3, #2
 8009a72:	e0d4      	b.n	8009c1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009a78:	2100      	movs	r1, #0
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f002 fd9c 	bl	800c5b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32b0      	adds	r2, #176	; 0xb0
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	32b0      	adds	r2, #176	; 0xb0
 8009a9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7c1b      	ldrb	r3, [r3, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d138      	bne.n	8009b1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009aac:	4b5e      	ldr	r3, [pc, #376]	; (8009c28 <USBD_CDC_Init+0x1e4>)
 8009aae:	7819      	ldrb	r1, [r3, #0]
 8009ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f002 fb8b 	bl	800c1d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009abc:	4b5a      	ldr	r3, [pc, #360]	; (8009c28 <USBD_CDC_Init+0x1e4>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	f003 020f 	and.w	r2, r3, #15
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ad6:	4b55      	ldr	r3, [pc, #340]	; (8009c2c <USBD_CDC_Init+0x1e8>)
 8009ad8:	7819      	ldrb	r1, [r3, #0]
 8009ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ade:	2202      	movs	r2, #2
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f002 fb76 	bl	800c1d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ae6:	4b51      	ldr	r3, [pc, #324]	; (8009c2c <USBD_CDC_Init+0x1e8>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	f003 020f 	and.w	r2, r3, #15
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009afe:	2201      	movs	r2, #1
 8009b00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b02:	4b4b      	ldr	r3, [pc, #300]	; (8009c30 <USBD_CDC_Init+0x1ec>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	f003 020f 	and.w	r2, r3, #15
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	3326      	adds	r3, #38	; 0x26
 8009b18:	2210      	movs	r2, #16
 8009b1a:	801a      	strh	r2, [r3, #0]
 8009b1c:	e035      	b.n	8009b8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b1e:	4b42      	ldr	r3, [pc, #264]	; (8009c28 <USBD_CDC_Init+0x1e4>)
 8009b20:	7819      	ldrb	r1, [r3, #0]
 8009b22:	2340      	movs	r3, #64	; 0x40
 8009b24:	2202      	movs	r2, #2
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f002 fb53 	bl	800c1d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b2c:	4b3e      	ldr	r3, [pc, #248]	; (8009c28 <USBD_CDC_Init+0x1e4>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 020f 	and.w	r2, r3, #15
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	3324      	adds	r3, #36	; 0x24
 8009b42:	2201      	movs	r2, #1
 8009b44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b46:	4b39      	ldr	r3, [pc, #228]	; (8009c2c <USBD_CDC_Init+0x1e8>)
 8009b48:	7819      	ldrb	r1, [r3, #0]
 8009b4a:	2340      	movs	r3, #64	; 0x40
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f002 fb3f 	bl	800c1d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b54:	4b35      	ldr	r3, [pc, #212]	; (8009c2c <USBD_CDC_Init+0x1e8>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 020f 	and.w	r2, r3, #15
 8009b5c:	6879      	ldr	r1, [r7, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	440b      	add	r3, r1
 8009b68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b70:	4b2f      	ldr	r3, [pc, #188]	; (8009c30 <USBD_CDC_Init+0x1ec>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 020f 	and.w	r2, r3, #15
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	3326      	adds	r3, #38	; 0x26
 8009b86:	2210      	movs	r2, #16
 8009b88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b8a:	4b29      	ldr	r3, [pc, #164]	; (8009c30 <USBD_CDC_Init+0x1ec>)
 8009b8c:	7819      	ldrb	r1, [r3, #0]
 8009b8e:	2308      	movs	r3, #8
 8009b90:	2203      	movs	r2, #3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f002 fb1d 	bl	800c1d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b98:	4b25      	ldr	r3, [pc, #148]	; (8009c30 <USBD_CDC_Init+0x1ec>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	f003 020f 	and.w	r2, r3, #15
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	3324      	adds	r3, #36	; 0x24
 8009bae:	2201      	movs	r2, #1
 8009bb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	33b0      	adds	r3, #176	; 0xb0
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009be8:	2302      	movs	r3, #2
 8009bea:	e018      	b.n	8009c1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	7c1b      	ldrb	r3, [r3, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bf4:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <USBD_CDC_Init+0x1e8>)
 8009bf6:	7819      	ldrb	r1, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fbd4 	bl	800c3b0 <USBD_LL_PrepareReceive>
 8009c08:	e008      	b.n	8009c1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c0a:	4b08      	ldr	r3, [pc, #32]	; (8009c2c <USBD_CDC_Init+0x1e8>)
 8009c0c:	7819      	ldrb	r1, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f002 fbca 	bl	800c3b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	200002f7 	.word	0x200002f7
 8009c2c:	200002f8 	.word	0x200002f8
 8009c30:	200002f9 	.word	0x200002f9

08009c34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009c40:	4b3a      	ldr	r3, [pc, #232]	; (8009d2c <USBD_CDC_DeInit+0xf8>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f002 fae9 	bl	800c21e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c4c:	4b37      	ldr	r3, [pc, #220]	; (8009d2c <USBD_CDC_DeInit+0xf8>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	3324      	adds	r3, #36	; 0x24
 8009c62:	2200      	movs	r2, #0
 8009c64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c66:	4b32      	ldr	r3, [pc, #200]	; (8009d30 <USBD_CDC_DeInit+0xfc>)
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f002 fad6 	bl	800c21e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c72:	4b2f      	ldr	r3, [pc, #188]	; (8009d30 <USBD_CDC_DeInit+0xfc>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	f003 020f 	and.w	r2, r3, #15
 8009c7a:	6879      	ldr	r1, [r7, #4]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c8e:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <USBD_CDC_DeInit+0x100>)
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f002 fac2 	bl	800c21e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c9a:	4b26      	ldr	r3, [pc, #152]	; (8009d34 <USBD_CDC_DeInit+0x100>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	f003 020f 	and.w	r2, r3, #15
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	440b      	add	r3, r1
 8009cae:	3324      	adds	r3, #36	; 0x24
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009cb4:	4b1f      	ldr	r3, [pc, #124]	; (8009d34 <USBD_CDC_DeInit+0x100>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 020f 	and.w	r2, r3, #15
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	3326      	adds	r3, #38	; 0x26
 8009cca:	2200      	movs	r2, #0
 8009ccc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	32b0      	adds	r2, #176	; 0xb0
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01f      	beq.n	8009d20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	33b0      	adds	r3, #176	; 0xb0
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	32b0      	adds	r2, #176	; 0xb0
 8009cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f002 fb96 	bl	800c434 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	32b0      	adds	r2, #176	; 0xb0
 8009d12:	2100      	movs	r1, #0
 8009d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200002f7 	.word	0x200002f7
 8009d30:	200002f8 	.word	0x200002f8
 8009d34:	200002f9 	.word	0x200002f9

08009d38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	32b0      	adds	r2, #176	; 0xb0
 8009d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e0bf      	b.n	8009ee8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d050      	beq.n	8009e16 <USBD_CDC_Setup+0xde>
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	f040 80af 	bne.w	8009ed8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	88db      	ldrh	r3, [r3, #6]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d03a      	beq.n	8009df8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	b25b      	sxtb	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	da1b      	bge.n	8009dc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	33b0      	adds	r3, #176	; 0xb0
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009da2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	88d2      	ldrh	r2, [r2, #6]
 8009da8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88db      	ldrh	r3, [r3, #6]
 8009dae:	2b07      	cmp	r3, #7
 8009db0:	bf28      	it	cs
 8009db2:	2307      	movcs	r3, #7
 8009db4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	89fa      	ldrh	r2, [r7, #14]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f001 fd89 	bl	800b8d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009dc2:	e090      	b.n	8009ee6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	785a      	ldrb	r2, [r3, #1]
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	88db      	ldrh	r3, [r3, #6]
 8009dd2:	2b3f      	cmp	r3, #63	; 0x3f
 8009dd4:	d803      	bhi.n	8009dde <USBD_CDC_Setup+0xa6>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	88db      	ldrh	r3, [r3, #6]
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	e000      	b.n	8009de0 <USBD_CDC_Setup+0xa8>
 8009dde:	2240      	movs	r2, #64	; 0x40
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009de6:	6939      	ldr	r1, [r7, #16]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009dee:	461a      	mov	r2, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 fd9b 	bl	800b92c <USBD_CtlPrepareRx>
      break;
 8009df6:	e076      	b.n	8009ee6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	33b0      	adds	r3, #176	; 0xb0
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	7850      	ldrb	r0, [r2, #1]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	4798      	blx	r3
      break;
 8009e14:	e067      	b.n	8009ee6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	785b      	ldrb	r3, [r3, #1]
 8009e1a:	2b0b      	cmp	r3, #11
 8009e1c:	d851      	bhi.n	8009ec2 <USBD_CDC_Setup+0x18a>
 8009e1e:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <USBD_CDC_Setup+0xec>)
 8009e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e24:	08009e55 	.word	0x08009e55
 8009e28:	08009ed1 	.word	0x08009ed1
 8009e2c:	08009ec3 	.word	0x08009ec3
 8009e30:	08009ec3 	.word	0x08009ec3
 8009e34:	08009ec3 	.word	0x08009ec3
 8009e38:	08009ec3 	.word	0x08009ec3
 8009e3c:	08009ec3 	.word	0x08009ec3
 8009e40:	08009ec3 	.word	0x08009ec3
 8009e44:	08009ec3 	.word	0x08009ec3
 8009e48:	08009ec3 	.word	0x08009ec3
 8009e4c:	08009e7f 	.word	0x08009e7f
 8009e50:	08009ea9 	.word	0x08009ea9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d107      	bne.n	8009e70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e60:	f107 030a 	add.w	r3, r7, #10
 8009e64:	2202      	movs	r2, #2
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 fd33 	bl	800b8d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e6e:	e032      	b.n	8009ed6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 fcbd 	bl	800b7f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	75fb      	strb	r3, [r7, #23]
          break;
 8009e7c:	e02b      	b.n	8009ed6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d107      	bne.n	8009e9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e8a:	f107 030d 	add.w	r3, r7, #13
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 fd1e 	bl	800b8d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e98:	e01d      	b.n	8009ed6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f001 fca8 	bl	800b7f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ea6:	e016      	b.n	8009ed6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d00f      	beq.n	8009ed4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 fc9b 	bl	800b7f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ec0:	e008      	b.n	8009ed4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 fc94 	bl	800b7f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ece:	e002      	b.n	8009ed6 <USBD_CDC_Setup+0x19e>
          break;
 8009ed0:	bf00      	nop
 8009ed2:	e008      	b.n	8009ee6 <USBD_CDC_Setup+0x1ae>
          break;
 8009ed4:	bf00      	nop
      }
      break;
 8009ed6:	e006      	b.n	8009ee6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 fc89 	bl	800b7f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee4:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	32b0      	adds	r2, #176	; 0xb0
 8009f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e065      	b.n	8009fe6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	32b0      	adds	r2, #176	; 0xb0
 8009f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	f003 020f 	and.w	r2, r3, #15
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3318      	adds	r3, #24
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d02f      	beq.n	8009fa4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	f003 020f 	and.w	r2, r3, #15
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	3318      	adds	r3, #24
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	f003 010f 	and.w	r1, r3, #15
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	460b      	mov	r3, r1
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	440b      	add	r3, r1
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4403      	add	r3, r0
 8009f6c:	3348      	adds	r3, #72	; 0x48
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f74:	fb01 f303 	mul.w	r3, r1, r3
 8009f78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d112      	bne.n	8009fa4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	f003 020f 	and.w	r2, r3, #15
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	3318      	adds	r3, #24
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f96:	78f9      	ldrb	r1, [r7, #3]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f002 f9e6 	bl	800c36e <USBD_LL_Transmit>
 8009fa2:	e01f      	b.n	8009fe4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	33b0      	adds	r3, #176	; 0xb0
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d010      	beq.n	8009fe4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	33b0      	adds	r3, #176	; 0xb0
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	32b0      	adds	r2, #176	; 0xb0
 800a004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a008:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	32b0      	adds	r2, #176	; 0xb0
 800a014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e01a      	b.n	800a056 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f002 f9e4 	bl	800c3f2 <USBD_LL_GetRxDataSize>
 800a02a:	4602      	mov	r2, r0
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	33b0      	adds	r3, #176	; 0xb0
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a050:	4611      	mov	r1, r2
 800a052:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	32b0      	adds	r2, #176	; 0xb0
 800a070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a074:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e025      	b.n	800a0cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	33b0      	adds	r3, #176	; 0xb0
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01a      	beq.n	800a0ca <USBD_CDC_EP0_RxReady+0x6c>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a09a:	2bff      	cmp	r3, #255	; 0xff
 800a09c:	d015      	beq.n	800a0ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	33b0      	adds	r3, #176	; 0xb0
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a0b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0be:	b292      	uxth	r2, r2
 800a0c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	22ff      	movs	r2, #255	; 0xff
 800a0c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0dc:	2182      	movs	r1, #130	; 0x82
 800a0de:	4818      	ldr	r0, [pc, #96]	; (800a140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0e0:	f000 fd4f 	bl	800ab82 <USBD_GetEpDesc>
 800a0e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	4815      	ldr	r0, [pc, #84]	; (800a140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0ea:	f000 fd4a 	bl	800ab82 <USBD_GetEpDesc>
 800a0ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0f0:	2181      	movs	r1, #129	; 0x81
 800a0f2:	4813      	ldr	r0, [pc, #76]	; (800a140 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0f4:	f000 fd45 	bl	800ab82 <USBD_GetEpDesc>
 800a0f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2210      	movs	r2, #16
 800a104:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d006      	beq.n	800a11a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2200      	movs	r2, #0
 800a110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a114:	711a      	strb	r2, [r3, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d006      	beq.n	800a12e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a128:	711a      	strb	r2, [r3, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2243      	movs	r2, #67	; 0x43
 800a132:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a134:	4b02      	ldr	r3, [pc, #8]	; (800a140 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	200002b4 	.word	0x200002b4

0800a144 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a14c:	2182      	movs	r1, #130	; 0x82
 800a14e:	4818      	ldr	r0, [pc, #96]	; (800a1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a150:	f000 fd17 	bl	800ab82 <USBD_GetEpDesc>
 800a154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a156:	2101      	movs	r1, #1
 800a158:	4815      	ldr	r0, [pc, #84]	; (800a1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a15a:	f000 fd12 	bl	800ab82 <USBD_GetEpDesc>
 800a15e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a160:	2181      	movs	r1, #129	; 0x81
 800a162:	4813      	ldr	r0, [pc, #76]	; (800a1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a164:	f000 fd0d 	bl	800ab82 <USBD_GetEpDesc>
 800a168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2210      	movs	r2, #16
 800a174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d006      	beq.n	800a18a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2200      	movs	r2, #0
 800a180:	711a      	strb	r2, [r3, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f042 0202 	orr.w	r2, r2, #2
 800a188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	711a      	strb	r2, [r3, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f042 0202 	orr.w	r2, r2, #2
 800a19c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2243      	movs	r2, #67	; 0x43
 800a1a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1a4:	4b02      	ldr	r3, [pc, #8]	; (800a1b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200002b4 	.word	0x200002b4

0800a1b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1bc:	2182      	movs	r1, #130	; 0x82
 800a1be:	4818      	ldr	r0, [pc, #96]	; (800a220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1c0:	f000 fcdf 	bl	800ab82 <USBD_GetEpDesc>
 800a1c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	4815      	ldr	r0, [pc, #84]	; (800a220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1ca:	f000 fcda 	bl	800ab82 <USBD_GetEpDesc>
 800a1ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1d0:	2181      	movs	r1, #129	; 0x81
 800a1d2:	4813      	ldr	r0, [pc, #76]	; (800a220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1d4:	f000 fcd5 	bl	800ab82 <USBD_GetEpDesc>
 800a1d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2210      	movs	r2, #16
 800a1e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1f4:	711a      	strb	r2, [r3, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a208:	711a      	strb	r2, [r3, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2243      	movs	r2, #67	; 0x43
 800a212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a214:	4b02      	ldr	r3, [pc, #8]	; (800a220 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	200002b4 	.word	0x200002b4

0800a224 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	220a      	movs	r2, #10
 800a230:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a232:	4b03      	ldr	r3, [pc, #12]	; (800a240 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	20000270 	.word	0x20000270

0800a244 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a254:	2303      	movs	r3, #3
 800a256:	e009      	b.n	800a26c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	33b0      	adds	r3, #176	; 0xb0
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	32b0      	adds	r2, #176	; 0xb0
 800a28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a292:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e008      	b.n	800a2b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	371c      	adds	r7, #28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	32b0      	adds	r2, #176	; 0xb0
 800a2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e004      	b.n	800a2ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
	...

0800a2f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	32b0      	adds	r2, #176	; 0xb0
 800a30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a310:	2301      	movs	r3, #1
 800a312:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32b0      	adds	r2, #176	; 0xb0
 800a31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	e025      	b.n	800a376 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a330:	2b00      	cmp	r3, #0
 800a332:	d11f      	bne.n	800a374 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2201      	movs	r2, #1
 800a338:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a33c:	4b10      	ldr	r3, [pc, #64]	; (800a380 <USBD_CDC_TransmitPacket+0x88>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	f003 020f 	and.w	r2, r3, #15
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4403      	add	r3, r0
 800a356:	3318      	adds	r3, #24
 800a358:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a35a:	4b09      	ldr	r3, [pc, #36]	; (800a380 <USBD_CDC_TransmitPacket+0x88>)
 800a35c:	7819      	ldrb	r1, [r3, #0]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 ffff 	bl	800c36e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	200002f7 	.word	0x200002f7

0800a384 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	32b0      	adds	r2, #176	; 0xb0
 800a396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	32b0      	adds	r2, #176	; 0xb0
 800a3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e018      	b.n	800a3e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	7c1b      	ldrb	r3, [r3, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3ba:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <USBD_CDC_ReceivePacket+0x68>)
 800a3bc:	7819      	ldrb	r1, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f001 fff1 	bl	800c3b0 <USBD_LL_PrepareReceive>
 800a3ce:	e008      	b.n	800a3e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3d0:	4b06      	ldr	r3, [pc, #24]	; (800a3ec <USBD_CDC_ReceivePacket+0x68>)
 800a3d2:	7819      	ldrb	r1, [r3, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3da:	2340      	movs	r3, #64	; 0x40
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 ffe7 	bl	800c3b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	200002f8 	.word	0x200002f8

0800a3f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d101      	bne.n	800a408 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a404:	2303      	movs	r3, #3
 800a406:	e01f      	b.n	800a448 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	79fa      	ldrb	r2, [r7, #7]
 800a43a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f001 fe5b 	bl	800c0f8 <USBD_LL_Init>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a45a:	2300      	movs	r3, #0
 800a45c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a464:	2303      	movs	r3, #3
 800a466:	e025      	b.n	800a4b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	32ae      	adds	r2, #174	; 0xae
 800a47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00f      	beq.n	800a4a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	32ae      	adds	r2, #174	; 0xae
 800a48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	f107 020e 	add.w	r2, r7, #14
 800a498:	4610      	mov	r0, r2
 800a49a:	4798      	blx	r3
 800a49c:	4602      	mov	r2, r0
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 fe69 	bl	800c19c <USBD_LL_Start>
 800a4ca:	4603      	mov	r3, r0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d009      	beq.n	800a518 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	78fa      	ldrb	r2, [r7, #3]
 800a50e:	4611      	mov	r1, r2
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	4611      	mov	r1, r2
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a548:	2303      	movs	r3, #3
 800a54a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 f908 	bl	800b77e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a57c:	461a      	mov	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a58a:	f003 031f 	and.w	r3, r3, #31
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d01a      	beq.n	800a5c8 <USBD_LL_SetupStage+0x72>
 800a592:	2b02      	cmp	r3, #2
 800a594:	d822      	bhi.n	800a5dc <USBD_LL_SetupStage+0x86>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <USBD_LL_SetupStage+0x4a>
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d00a      	beq.n	800a5b4 <USBD_LL_SetupStage+0x5e>
 800a59e:	e01d      	b.n	800a5dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fb5f 	bl	800ac6c <USBD_StdDevReq>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b2:	e020      	b.n	800a5f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fbc7 	bl	800ad50 <USBD_StdItfReq>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c6:	e016      	b.n	800a5f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fc29 	bl	800ae28 <USBD_StdEPReq>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5da:	e00c      	b.n	800a5f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f001 fe36 	bl	800c25c <USBD_LL_StallEP>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f4:	bf00      	nop
  }

  return ret;
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	460b      	mov	r3, r1
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d16e      	bne.n	800a6f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a61e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a626:	2b03      	cmp	r3, #3
 800a628:	f040 8098 	bne.w	800a75c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	429a      	cmp	r2, r3
 800a636:	d913      	bls.n	800a660 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	1ad2      	subs	r2, r2, r3
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	4293      	cmp	r3, r2
 800a650:	bf28      	it	cs
 800a652:	4613      	movcs	r3, r2
 800a654:	461a      	mov	r2, r3
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f001 f984 	bl	800b966 <USBD_CtlContinueRx>
 800a65e:	e07d      	b.n	800a75c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d014      	beq.n	800a698 <USBD_LL_DataOutStage+0x98>
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d81d      	bhi.n	800a6ae <USBD_LL_DataOutStage+0xae>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <USBD_LL_DataOutStage+0x7c>
 800a676:	2b01      	cmp	r3, #1
 800a678:	d003      	beq.n	800a682 <USBD_LL_DataOutStage+0x82>
 800a67a:	e018      	b.n	800a6ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	75bb      	strb	r3, [r7, #22]
            break;
 800a680:	e018      	b.n	800a6b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	4619      	mov	r1, r3
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 fa5e 	bl	800ab4e <USBD_CoreFindIF>
 800a692:	4603      	mov	r3, r0
 800a694:	75bb      	strb	r3, [r7, #22]
            break;
 800a696:	e00d      	b.n	800a6b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f000 fa60 	bl	800ab68 <USBD_CoreFindEP>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	75bb      	strb	r3, [r7, #22]
            break;
 800a6ac:	e002      	b.n	800a6b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	75bb      	strb	r3, [r7, #22]
            break;
 800a6b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a6b4:	7dbb      	ldrb	r3, [r7, #22]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d119      	bne.n	800a6ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d113      	bne.n	800a6ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a6c6:	7dba      	ldrb	r2, [r7, #22]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	32ae      	adds	r2, #174	; 0xae
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00b      	beq.n	800a6ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a6d6:	7dba      	ldrb	r2, [r7, #22]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a6de:	7dba      	ldrb	r2, [r7, #22]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	32ae      	adds	r2, #174	; 0xae
 800a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f001 f94a 	bl	800b988 <USBD_CtlSendStatus>
 800a6f4:	e032      	b.n	800a75c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a6f6:	7afb      	ldrb	r3, [r7, #11]
 800a6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	4619      	mov	r1, r3
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fa31 	bl	800ab68 <USBD_CoreFindEP>
 800a706:	4603      	mov	r3, r0
 800a708:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a70a:	7dbb      	ldrb	r3, [r7, #22]
 800a70c:	2bff      	cmp	r3, #255	; 0xff
 800a70e:	d025      	beq.n	800a75c <USBD_LL_DataOutStage+0x15c>
 800a710:	7dbb      	ldrb	r3, [r7, #22]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d122      	bne.n	800a75c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b03      	cmp	r3, #3
 800a720:	d117      	bne.n	800a752 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a722:	7dba      	ldrb	r2, [r7, #22]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	32ae      	adds	r2, #174	; 0xae
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00f      	beq.n	800a752 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a732:	7dba      	ldrb	r2, [r7, #22]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a73a:	7dba      	ldrb	r2, [r7, #22]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	32ae      	adds	r2, #174	; 0xae
 800a740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	7afa      	ldrb	r2, [r7, #11]
 800a748:	4611      	mov	r1, r2
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	4798      	blx	r3
 800a74e:	4603      	mov	r3, r0
 800a750:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	e000      	b.n	800a75e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b086      	sub	sp, #24
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	60f8      	str	r0, [r7, #12]
 800a76e:	460b      	mov	r3, r1
 800a770:	607a      	str	r2, [r7, #4]
 800a772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a774:	7afb      	ldrb	r3, [r7, #11]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d16f      	bne.n	800a85a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3314      	adds	r3, #20
 800a77e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a786:	2b02      	cmp	r3, #2
 800a788:	d15a      	bne.n	800a840 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	429a      	cmp	r2, r3
 800a794:	d914      	bls.n	800a7c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	689a      	ldr	r2, [r3, #8]
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	1ad2      	subs	r2, r2, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f001 f8ac 	bl	800b90a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f001 fdf9 	bl	800c3b0 <USBD_LL_PrepareReceive>
 800a7be:	e03f      	b.n	800a840 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d11c      	bne.n	800a806 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d316      	bcc.n	800a806 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d20f      	bcs.n	800a806 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f001 f88d 	bl	800b90a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f001 fdd6 	bl	800c3b0 <USBD_LL_PrepareReceive>
 800a804:	e01c      	b.n	800a840 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d10f      	bne.n	800a832 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d009      	beq.n	800a832 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a832:	2180      	movs	r1, #128	; 0x80
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f001 fd11 	bl	800c25c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f001 f8b7 	bl	800b9ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d03a      	beq.n	800a8c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7ff fe42 	bl	800a4d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a858:	e032      	b.n	800a8c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a85a:	7afb      	ldrb	r3, [r7, #11]
 800a85c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a860:	b2db      	uxtb	r3, r3
 800a862:	4619      	mov	r1, r3
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f97f 	bl	800ab68 <USBD_CoreFindEP>
 800a86a:	4603      	mov	r3, r0
 800a86c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	2bff      	cmp	r3, #255	; 0xff
 800a872:	d025      	beq.n	800a8c0 <USBD_LL_DataInStage+0x15a>
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d122      	bne.n	800a8c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b03      	cmp	r3, #3
 800a884:	d11c      	bne.n	800a8c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a886:	7dfa      	ldrb	r2, [r7, #23]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	32ae      	adds	r2, #174	; 0xae
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d014      	beq.n	800a8c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a896:	7dfa      	ldrb	r2, [r7, #23]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a89e:	7dfa      	ldrb	r2, [r7, #23]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	32ae      	adds	r2, #174	; 0xae
 800a8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	7afa      	ldrb	r2, [r7, #11]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	4798      	blx	r3
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a8b6:	7dbb      	ldrb	r3, [r7, #22]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a8bc:	7dbb      	ldrb	r3, [r7, #22]
 800a8be:	e000      	b.n	800a8c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d014      	beq.n	800a930 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00e      	beq.n	800a930 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6852      	ldr	r2, [r2, #4]
 800a91e:	b2d2      	uxtb	r2, r2
 800a920:	4611      	mov	r1, r2
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	4798      	blx	r3
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a92c:	2303      	movs	r3, #3
 800a92e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a930:	2340      	movs	r3, #64	; 0x40
 800a932:	2200      	movs	r2, #0
 800a934:	2100      	movs	r1, #0
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f001 fc4b 	bl	800c1d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2240      	movs	r2, #64	; 0x40
 800a948:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a94c:	2340      	movs	r3, #64	; 0x40
 800a94e:	2200      	movs	r2, #0
 800a950:	2180      	movs	r1, #128	; 0x80
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 fc3d 	bl	800c1d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2240      	movs	r2, #64	; 0x40
 800a962:	621a      	str	r2, [r3, #32]

  return ret;
 800a964:	7bfb      	ldrb	r3, [r7, #15]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	460b      	mov	r3, r1
 800a978:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	78fa      	ldrb	r2, [r7, #3]
 800a97e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a98e:	b480      	push	{r7}
 800a990:	b083      	sub	sp, #12
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2204      	movs	r2, #4
 800a9a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b04      	cmp	r3, #4
 800a9cc:	d106      	bne.n	800a9dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d110      	bne.n	800aa20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1a:	69db      	ldr	r3, [r3, #28]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	460b      	mov	r3, r1
 800aa34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	32ae      	adds	r2, #174	; 0xae
 800aa40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e01c      	b.n	800aa86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d115      	bne.n	800aa84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	32ae      	adds	r2, #174	; 0xae
 800aa62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa66:	6a1b      	ldr	r3, [r3, #32]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00b      	beq.n	800aa84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	32ae      	adds	r2, #174	; 0xae
 800aa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	78fa      	ldrb	r2, [r7, #3]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	32ae      	adds	r2, #174	; 0xae
 800aaa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e01c      	b.n	800aaea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d115      	bne.n	800aae8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	32ae      	adds	r2, #174	; 0xae
 800aac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00b      	beq.n	800aae8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	32ae      	adds	r2, #174	; 0xae
 800aada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	78fa      	ldrb	r2, [r7, #3]
 800aae2:	4611      	mov	r1, r2
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00e      	beq.n	800ab44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6852      	ldr	r2, [r2, #4]
 800ab32:	b2d2      	uxtb	r2, r2
 800ab34:	4611      	mov	r1, r2
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	4798      	blx	r3
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab40:	2303      	movs	r3, #3
 800ab42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	460b      	mov	r3, r1
 800ab58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b086      	sub	sp, #24
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	885b      	ldrh	r3, [r3, #2]
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d920      	bls.n	800abec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800abb2:	e013      	b.n	800abdc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800abb4:	f107 030a 	add.w	r3, r7, #10
 800abb8:	4619      	mov	r1, r3
 800abba:	6978      	ldr	r0, [r7, #20]
 800abbc:	f000 f81b 	bl	800abf6 <USBD_GetNextDesc>
 800abc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	785b      	ldrb	r3, [r3, #1]
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	d108      	bne.n	800abdc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	789b      	ldrb	r3, [r3, #2]
 800abd2:	78fa      	ldrb	r2, [r7, #3]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d008      	beq.n	800abea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800abd8:	2300      	movs	r3, #0
 800abda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	885b      	ldrh	r3, [r3, #2]
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	897b      	ldrh	r3, [r7, #10]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d8e5      	bhi.n	800abb4 <USBD_GetEpDesc+0x32>
 800abe8:	e000      	b.n	800abec <USBD_GetEpDesc+0x6a>
          break;
 800abea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800abec:	693b      	ldr	r3, [r7, #16]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3718      	adds	r7, #24
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b085      	sub	sp, #20
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	881a      	ldrh	r2, [r3, #0]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	4413      	add	r3, r2
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4413      	add	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac22:	68fb      	ldr	r3, [r7, #12]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	3301      	adds	r3, #1
 800ac46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac4e:	8a3b      	ldrh	r3, [r7, #16]
 800ac50:	021b      	lsls	r3, r3, #8
 800ac52:	b21a      	sxth	r2, r3
 800ac54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	b21b      	sxth	r3, r3
 800ac5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac5e:	89fb      	ldrh	r3, [r7, #14]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	371c      	adds	r7, #28
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac82:	2b40      	cmp	r3, #64	; 0x40
 800ac84:	d005      	beq.n	800ac92 <USBD_StdDevReq+0x26>
 800ac86:	2b40      	cmp	r3, #64	; 0x40
 800ac88:	d857      	bhi.n	800ad3a <USBD_StdDevReq+0xce>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00f      	beq.n	800acae <USBD_StdDevReq+0x42>
 800ac8e:	2b20      	cmp	r3, #32
 800ac90:	d153      	bne.n	800ad3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	32ae      	adds	r2, #174	; 0xae
 800ac9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	4798      	blx	r3
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
      break;
 800acac:	e04a      	b.n	800ad44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	2b09      	cmp	r3, #9
 800acb4:	d83b      	bhi.n	800ad2e <USBD_StdDevReq+0xc2>
 800acb6:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <USBD_StdDevReq+0x50>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ad25 	.word	0x0800ad25
 800acc4:	0800ad2f 	.word	0x0800ad2f
 800acc8:	0800ad1b 	.word	0x0800ad1b
 800accc:	0800ad2f 	.word	0x0800ad2f
 800acd0:	0800acef 	.word	0x0800acef
 800acd4:	0800ace5 	.word	0x0800ace5
 800acd8:	0800ad2f 	.word	0x0800ad2f
 800acdc:	0800ad07 	.word	0x0800ad07
 800ace0:	0800acf9 	.word	0x0800acf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa3c 	bl	800b164 <USBD_GetDescriptor>
          break;
 800acec:	e024      	b.n	800ad38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fba1 	bl	800b438 <USBD_SetAddress>
          break;
 800acf6:	e01f      	b.n	800ad38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fbe0 	bl	800b4c0 <USBD_SetConfig>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73fb      	strb	r3, [r7, #15]
          break;
 800ad04:	e018      	b.n	800ad38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fc83 	bl	800b614 <USBD_GetConfig>
          break;
 800ad0e:	e013      	b.n	800ad38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fcb4 	bl	800b680 <USBD_GetStatus>
          break;
 800ad18:	e00e      	b.n	800ad38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fce3 	bl	800b6e8 <USBD_SetFeature>
          break;
 800ad22:	e009      	b.n	800ad38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fd07 	bl	800b73a <USBD_ClrFeature>
          break;
 800ad2c:	e004      	b.n	800ad38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fd5e 	bl	800b7f2 <USBD_CtlError>
          break;
 800ad36:	bf00      	nop
      }
      break;
 800ad38:	e004      	b.n	800ad44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fd58 	bl	800b7f2 <USBD_CtlError>
      break;
 800ad42:	bf00      	nop
  }

  return ret;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop

0800ad50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad66:	2b40      	cmp	r3, #64	; 0x40
 800ad68:	d005      	beq.n	800ad76 <USBD_StdItfReq+0x26>
 800ad6a:	2b40      	cmp	r3, #64	; 0x40
 800ad6c:	d852      	bhi.n	800ae14 <USBD_StdItfReq+0xc4>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <USBD_StdItfReq+0x26>
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	d14e      	bne.n	800ae14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d840      	bhi.n	800ae06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	889b      	ldrh	r3, [r3, #4]
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d836      	bhi.n	800adfc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	889b      	ldrh	r3, [r3, #4]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fed9 	bl	800ab4e <USBD_CoreFindIF>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	2bff      	cmp	r3, #255	; 0xff
 800ada4:	d01d      	beq.n	800ade2 <USBD_StdItfReq+0x92>
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d11a      	bne.n	800ade2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800adac:	7bba      	ldrb	r2, [r7, #14]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	32ae      	adds	r2, #174	; 0xae
 800adb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00f      	beq.n	800addc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800adbc:	7bba      	ldrb	r2, [r7, #14]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adc4:	7bba      	ldrb	r2, [r7, #14]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	32ae      	adds	r2, #174	; 0xae
 800adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
 800add6:	4603      	mov	r3, r0
 800add8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adda:	e004      	b.n	800ade6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800addc:	2303      	movs	r3, #3
 800adde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ade0:	e001      	b.n	800ade6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ade2:	2303      	movs	r3, #3
 800ade4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	88db      	ldrh	r3, [r3, #6]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d110      	bne.n	800ae10 <USBD_StdItfReq+0xc0>
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10d      	bne.n	800ae10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fdc7 	bl	800b988 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800adfa:	e009      	b.n	800ae10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fcf7 	bl	800b7f2 <USBD_CtlError>
          break;
 800ae04:	e004      	b.n	800ae10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fcf2 	bl	800b7f2 <USBD_CtlError>
          break;
 800ae0e:	e000      	b.n	800ae12 <USBD_StdItfReq+0xc2>
          break;
 800ae10:	bf00      	nop
      }
      break;
 800ae12:	e004      	b.n	800ae1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fceb 	bl	800b7f2 <USBD_CtlError>
      break;
 800ae1c:	bf00      	nop
  }

  return ret;
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	889b      	ldrh	r3, [r3, #4]
 800ae3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae44:	2b40      	cmp	r3, #64	; 0x40
 800ae46:	d007      	beq.n	800ae58 <USBD_StdEPReq+0x30>
 800ae48:	2b40      	cmp	r3, #64	; 0x40
 800ae4a:	f200 817f 	bhi.w	800b14c <USBD_StdEPReq+0x324>
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d02a      	beq.n	800aea8 <USBD_StdEPReq+0x80>
 800ae52:	2b20      	cmp	r3, #32
 800ae54:	f040 817a 	bne.w	800b14c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff fe83 	bl	800ab68 <USBD_CoreFindEP>
 800ae62:	4603      	mov	r3, r0
 800ae64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae66:	7b7b      	ldrb	r3, [r7, #13]
 800ae68:	2bff      	cmp	r3, #255	; 0xff
 800ae6a:	f000 8174 	beq.w	800b156 <USBD_StdEPReq+0x32e>
 800ae6e:	7b7b      	ldrb	r3, [r7, #13]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f040 8170 	bne.w	800b156 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae76:	7b7a      	ldrb	r2, [r7, #13]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae7e:	7b7a      	ldrb	r2, [r7, #13]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	32ae      	adds	r2, #174	; 0xae
 800ae84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 8163 	beq.w	800b156 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ae90:	7b7a      	ldrb	r2, [r7, #13]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	32ae      	adds	r2, #174	; 0xae
 800ae96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aea6:	e156      	b.n	800b156 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d008      	beq.n	800aec2 <USBD_StdEPReq+0x9a>
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	f300 8145 	bgt.w	800b140 <USBD_StdEPReq+0x318>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 809b 	beq.w	800aff2 <USBD_StdEPReq+0x1ca>
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d03c      	beq.n	800af3a <USBD_StdEPReq+0x112>
 800aec0:	e13e      	b.n	800b140 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d002      	beq.n	800aed4 <USBD_StdEPReq+0xac>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d016      	beq.n	800af00 <USBD_StdEPReq+0xd8>
 800aed2:	e02c      	b.n	800af2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00d      	beq.n	800aef6 <USBD_StdEPReq+0xce>
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b80      	cmp	r3, #128	; 0x80
 800aede:	d00a      	beq.n	800aef6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f001 f9b9 	bl	800c25c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeea:	2180      	movs	r1, #128	; 0x80
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 f9b5 	bl	800c25c <USBD_LL_StallEP>
 800aef2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aef4:	e020      	b.n	800af38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fc7a 	bl	800b7f2 <USBD_CtlError>
              break;
 800aefe:	e01b      	b.n	800af38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	885b      	ldrh	r3, [r3, #2]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10e      	bne.n	800af26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <USBD_StdEPReq+0xfe>
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b80      	cmp	r3, #128	; 0x80
 800af12:	d008      	beq.n	800af26 <USBD_StdEPReq+0xfe>
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	88db      	ldrh	r3, [r3, #6]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 f99b 	bl	800c25c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fd2e 	bl	800b988 <USBD_CtlSendStatus>

              break;
 800af2c:	e004      	b.n	800af38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fc5e 	bl	800b7f2 <USBD_CtlError>
              break;
 800af36:	bf00      	nop
          }
          break;
 800af38:	e107      	b.n	800b14a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b02      	cmp	r3, #2
 800af44:	d002      	beq.n	800af4c <USBD_StdEPReq+0x124>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d016      	beq.n	800af78 <USBD_StdEPReq+0x150>
 800af4a:	e04b      	b.n	800afe4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00d      	beq.n	800af6e <USBD_StdEPReq+0x146>
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b80      	cmp	r3, #128	; 0x80
 800af56:	d00a      	beq.n	800af6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 f97d 	bl	800c25c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af62:	2180      	movs	r1, #128	; 0x80
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 f979 	bl	800c25c <USBD_LL_StallEP>
 800af6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af6c:	e040      	b.n	800aff0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fc3e 	bl	800b7f2 <USBD_CtlError>
              break;
 800af76:	e03b      	b.n	800aff0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	885b      	ldrh	r3, [r3, #2]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d136      	bne.n	800afee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af80:	7bbb      	ldrb	r3, [r7, #14]
 800af82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f001 f983 	bl	800c29a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fcf7 	bl	800b988 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff fde2 	bl	800ab68 <USBD_CoreFindEP>
 800afa4:	4603      	mov	r3, r0
 800afa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afa8:	7b7b      	ldrb	r3, [r7, #13]
 800afaa:	2bff      	cmp	r3, #255	; 0xff
 800afac:	d01f      	beq.n	800afee <USBD_StdEPReq+0x1c6>
 800afae:	7b7b      	ldrb	r3, [r7, #13]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d11c      	bne.n	800afee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800afb4:	7b7a      	ldrb	r2, [r7, #13]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800afbc:	7b7a      	ldrb	r2, [r7, #13]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	32ae      	adds	r2, #174	; 0xae
 800afc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d010      	beq.n	800afee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afcc:	7b7a      	ldrb	r2, [r7, #13]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	32ae      	adds	r2, #174	; 0xae
 800afd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800afe2:	e004      	b.n	800afee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fc03 	bl	800b7f2 <USBD_CtlError>
              break;
 800afec:	e000      	b.n	800aff0 <USBD_StdEPReq+0x1c8>
              break;
 800afee:	bf00      	nop
          }
          break;
 800aff0:	e0ab      	b.n	800b14a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d002      	beq.n	800b004 <USBD_StdEPReq+0x1dc>
 800affe:	2b03      	cmp	r3, #3
 800b000:	d032      	beq.n	800b068 <USBD_StdEPReq+0x240>
 800b002:	e097      	b.n	800b134 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d007      	beq.n	800b01a <USBD_StdEPReq+0x1f2>
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	2b80      	cmp	r3, #128	; 0x80
 800b00e:	d004      	beq.n	800b01a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fbed 	bl	800b7f2 <USBD_CtlError>
                break;
 800b018:	e091      	b.n	800b13e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b01a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	da0b      	bge.n	800b03a <USBD_StdEPReq+0x212>
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	3310      	adds	r3, #16
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	4413      	add	r3, r2
 800b036:	3304      	adds	r3, #4
 800b038:	e00b      	b.n	800b052 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	4413      	add	r3, r2
 800b050:	3304      	adds	r3, #4
 800b052:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2202      	movs	r2, #2
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fc37 	bl	800b8d4 <USBD_CtlSendData>
              break;
 800b066:	e06a      	b.n	800b13e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	da11      	bge.n	800b094 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	f003 020f 	and.w	r2, r3, #15
 800b076:	6879      	ldr	r1, [r7, #4]
 800b078:	4613      	mov	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	3324      	adds	r3, #36	; 0x24
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d117      	bne.n	800b0ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fbb0 	bl	800b7f2 <USBD_CtlError>
                  break;
 800b092:	e054      	b.n	800b13e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	f003 020f 	and.w	r2, r3, #15
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fb9d 	bl	800b7f2 <USBD_CtlError>
                  break;
 800b0b8:	e041      	b.n	800b13e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da0b      	bge.n	800b0da <USBD_StdEPReq+0x2b2>
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	3310      	adds	r3, #16
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	e00b      	b.n	800b0f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d002      	beq.n	800b100 <USBD_StdEPReq+0x2d8>
 800b0fa:	7bbb      	ldrb	r3, [r7, #14]
 800b0fc:	2b80      	cmp	r3, #128	; 0x80
 800b0fe:	d103      	bne.n	800b108 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	e00e      	b.n	800b126 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f001 f8e3 	bl	800c2d8 <USBD_LL_IsStallEP>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2201      	movs	r2, #1
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	e002      	b.n	800b126 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2202      	movs	r2, #2
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fbd1 	bl	800b8d4 <USBD_CtlSendData>
              break;
 800b132:	e004      	b.n	800b13e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fb5b 	bl	800b7f2 <USBD_CtlError>
              break;
 800b13c:	bf00      	nop
          }
          break;
 800b13e:	e004      	b.n	800b14a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fb55 	bl	800b7f2 <USBD_CtlError>
          break;
 800b148:	bf00      	nop
      }
      break;
 800b14a:	e005      	b.n	800b158 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fb4f 	bl	800b7f2 <USBD_CtlError>
      break;
 800b154:	e000      	b.n	800b158 <USBD_StdEPReq+0x330>
      break;
 800b156:	bf00      	nop
  }

  return ret;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b16e:	2300      	movs	r3, #0
 800b170:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	885b      	ldrh	r3, [r3, #2]
 800b17e:	0a1b      	lsrs	r3, r3, #8
 800b180:	b29b      	uxth	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	2b06      	cmp	r3, #6
 800b186:	f200 8128 	bhi.w	800b3da <USBD_GetDescriptor+0x276>
 800b18a:	a201      	add	r2, pc, #4	; (adr r2, 800b190 <USBD_GetDescriptor+0x2c>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1ad 	.word	0x0800b1ad
 800b194:	0800b1c5 	.word	0x0800b1c5
 800b198:	0800b205 	.word	0x0800b205
 800b19c:	0800b3db 	.word	0x0800b3db
 800b1a0:	0800b3db 	.word	0x0800b3db
 800b1a4:	0800b37b 	.word	0x0800b37b
 800b1a8:	0800b3a7 	.word	0x0800b3a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	7c12      	ldrb	r2, [r2, #16]
 800b1b8:	f107 0108 	add.w	r1, r7, #8
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
 800b1c0:	60f8      	str	r0, [r7, #12]
      break;
 800b1c2:	e112      	b.n	800b3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7c1b      	ldrb	r3, [r3, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10d      	bne.n	800b1e8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d4:	f107 0208 	add.w	r2, r7, #8
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4798      	blx	r3
 800b1dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b1e6:	e100      	b.n	800b3ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	f107 0208 	add.w	r2, r7, #8
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	2202      	movs	r2, #2
 800b200:	701a      	strb	r2, [r3, #0]
      break;
 800b202:	e0f2      	b.n	800b3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	885b      	ldrh	r3, [r3, #2]
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b05      	cmp	r3, #5
 800b20c:	f200 80ac 	bhi.w	800b368 <USBD_GetDescriptor+0x204>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <USBD_GetDescriptor+0xb4>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b231 	.word	0x0800b231
 800b21c:	0800b265 	.word	0x0800b265
 800b220:	0800b299 	.word	0x0800b299
 800b224:	0800b2cd 	.word	0x0800b2cd
 800b228:	0800b301 	.word	0x0800b301
 800b22c:	0800b335 	.word	0x0800b335
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00b      	beq.n	800b254 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	7c12      	ldrb	r2, [r2, #16]
 800b248:	f107 0108 	add.w	r1, r7, #8
 800b24c:	4610      	mov	r0, r2
 800b24e:	4798      	blx	r3
 800b250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b252:	e091      	b.n	800b378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 facb 	bl	800b7f2 <USBD_CtlError>
            err++;
 800b25c:	7afb      	ldrb	r3, [r7, #11]
 800b25e:	3301      	adds	r3, #1
 800b260:	72fb      	strb	r3, [r7, #11]
          break;
 800b262:	e089      	b.n	800b378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	7c12      	ldrb	r2, [r2, #16]
 800b27c:	f107 0108 	add.w	r1, r7, #8
 800b280:	4610      	mov	r0, r2
 800b282:	4798      	blx	r3
 800b284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b286:	e077      	b.n	800b378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fab1 	bl	800b7f2 <USBD_CtlError>
            err++;
 800b290:	7afb      	ldrb	r3, [r7, #11]
 800b292:	3301      	adds	r3, #1
 800b294:	72fb      	strb	r3, [r7, #11]
          break;
 800b296:	e06f      	b.n	800b378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00b      	beq.n	800b2bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	7c12      	ldrb	r2, [r2, #16]
 800b2b0:	f107 0108 	add.w	r1, r7, #8
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
 800b2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ba:	e05d      	b.n	800b378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fa97 	bl	800b7f2 <USBD_CtlError>
            err++;
 800b2c4:	7afb      	ldrb	r3, [r7, #11]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ca:	e055      	b.n	800b378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00b      	beq.n	800b2f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	7c12      	ldrb	r2, [r2, #16]
 800b2e4:	f107 0108 	add.w	r1, r7, #8
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ee:	e043      	b.n	800b378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fa7d 	bl	800b7f2 <USBD_CtlError>
            err++;
 800b2f8:	7afb      	ldrb	r3, [r7, #11]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2fe:	e03b      	b.n	800b378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00b      	beq.n	800b324 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b312:	695b      	ldr	r3, [r3, #20]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	7c12      	ldrb	r2, [r2, #16]
 800b318:	f107 0108 	add.w	r1, r7, #8
 800b31c:	4610      	mov	r0, r2
 800b31e:	4798      	blx	r3
 800b320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b322:	e029      	b.n	800b378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fa63 	bl	800b7f2 <USBD_CtlError>
            err++;
 800b32c:	7afb      	ldrb	r3, [r7, #11]
 800b32e:	3301      	adds	r3, #1
 800b330:	72fb      	strb	r3, [r7, #11]
          break;
 800b332:	e021      	b.n	800b378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00b      	beq.n	800b358 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	7c12      	ldrb	r2, [r2, #16]
 800b34c:	f107 0108 	add.w	r1, r7, #8
 800b350:	4610      	mov	r0, r2
 800b352:	4798      	blx	r3
 800b354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b356:	e00f      	b.n	800b378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fa49 	bl	800b7f2 <USBD_CtlError>
            err++;
 800b360:	7afb      	ldrb	r3, [r7, #11]
 800b362:	3301      	adds	r3, #1
 800b364:	72fb      	strb	r3, [r7, #11]
          break;
 800b366:	e007      	b.n	800b378 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa41 	bl	800b7f2 <USBD_CtlError>
          err++;
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	3301      	adds	r3, #1
 800b374:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b376:	bf00      	nop
      }
      break;
 800b378:	e037      	b.n	800b3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	7c1b      	ldrb	r3, [r3, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38a:	f107 0208 	add.w	r2, r7, #8
 800b38e:	4610      	mov	r0, r2
 800b390:	4798      	blx	r3
 800b392:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b394:	e029      	b.n	800b3ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fa2a 	bl	800b7f2 <USBD_CtlError>
        err++;
 800b39e:	7afb      	ldrb	r3, [r7, #11]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b3a4:	e021      	b.n	800b3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7c1b      	ldrb	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10d      	bne.n	800b3ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b6:	f107 0208 	add.w	r2, r7, #8
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	4798      	blx	r3
 800b3be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	2207      	movs	r2, #7
 800b3c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3c8:	e00f      	b.n	800b3ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fa10 	bl	800b7f2 <USBD_CtlError>
        err++;
 800b3d2:	7afb      	ldrb	r3, [r7, #11]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b3d8:	e007      	b.n	800b3ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fa08 	bl	800b7f2 <USBD_CtlError>
      err++;
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b3e8:	bf00      	nop
  }

  if (err != 0U)
 800b3ea:	7afb      	ldrb	r3, [r7, #11]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d11e      	bne.n	800b42e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	88db      	ldrh	r3, [r3, #6]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d016      	beq.n	800b426 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b3f8:	893b      	ldrh	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00e      	beq.n	800b41c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	88da      	ldrh	r2, [r3, #6]
 800b402:	893b      	ldrh	r3, [r7, #8]
 800b404:	4293      	cmp	r3, r2
 800b406:	bf28      	it	cs
 800b408:	4613      	movcs	r3, r2
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b40e:	893b      	ldrh	r3, [r7, #8]
 800b410:	461a      	mov	r2, r3
 800b412:	68f9      	ldr	r1, [r7, #12]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fa5d 	bl	800b8d4 <USBD_CtlSendData>
 800b41a:	e009      	b.n	800b430 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f9e7 	bl	800b7f2 <USBD_CtlError>
 800b424:	e004      	b.n	800b430 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 faae 	bl	800b988 <USBD_CtlSendStatus>
 800b42c:	e000      	b.n	800b430 <USBD_GetDescriptor+0x2cc>
    return;
 800b42e:	bf00      	nop
  }
}
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop

0800b438 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	889b      	ldrh	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d131      	bne.n	800b4ae <USBD_SetAddress+0x76>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	88db      	ldrh	r3, [r3, #6]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d12d      	bne.n	800b4ae <USBD_SetAddress+0x76>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	885b      	ldrh	r3, [r3, #2]
 800b456:	2b7f      	cmp	r3, #127	; 0x7f
 800b458:	d829      	bhi.n	800b4ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	885b      	ldrh	r3, [r3, #2]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d104      	bne.n	800b47c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f9bc 	bl	800b7f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b47a:	e01d      	b.n	800b4b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7bfa      	ldrb	r2, [r7, #15]
 800b480:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	4619      	mov	r1, r3
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 ff51 	bl	800c330 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fa7a 	bl	800b988 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d004      	beq.n	800b4a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2202      	movs	r2, #2
 800b49e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a2:	e009      	b.n	800b4b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ac:	e004      	b.n	800b4b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f99e 	bl	800b7f2 <USBD_CtlError>
  }
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	885b      	ldrh	r3, [r3, #2]
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	4b4e      	ldr	r3, [pc, #312]	; (800b610 <USBD_SetConfig+0x150>)
 800b4d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4d8:	4b4d      	ldr	r3, [pc, #308]	; (800b610 <USBD_SetConfig+0x150>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d905      	bls.n	800b4ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f985 	bl	800b7f2 <USBD_CtlError>
    return USBD_FAIL;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e08c      	b.n	800b606 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d002      	beq.n	800b4fe <USBD_SetConfig+0x3e>
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d029      	beq.n	800b550 <USBD_SetConfig+0x90>
 800b4fc:	e075      	b.n	800b5ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b4fe:	4b44      	ldr	r3, [pc, #272]	; (800b610 <USBD_SetConfig+0x150>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d020      	beq.n	800b548 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b506:	4b42      	ldr	r3, [pc, #264]	; (800b610 <USBD_SetConfig+0x150>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b510:	4b3f      	ldr	r3, [pc, #252]	; (800b610 <USBD_SetConfig+0x150>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7fe ffe7 	bl	800a4ea <USBD_SetClassConfig>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d008      	beq.n	800b538 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f962 	bl	800b7f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2202      	movs	r2, #2
 800b532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b536:	e065      	b.n	800b604 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fa25 	bl	800b988 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2203      	movs	r2, #3
 800b542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b546:	e05d      	b.n	800b604 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fa1d 	bl	800b988 <USBD_CtlSendStatus>
      break;
 800b54e:	e059      	b.n	800b604 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b550:	4b2f      	ldr	r3, [pc, #188]	; (800b610 <USBD_SetConfig+0x150>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d112      	bne.n	800b57e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2202      	movs	r2, #2
 800b55c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b560:	4b2b      	ldr	r3, [pc, #172]	; (800b610 <USBD_SetConfig+0x150>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b56a:	4b29      	ldr	r3, [pc, #164]	; (800b610 <USBD_SetConfig+0x150>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7fe ffd6 	bl	800a522 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fa06 	bl	800b988 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b57c:	e042      	b.n	800b604 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b57e:	4b24      	ldr	r3, [pc, #144]	; (800b610 <USBD_SetConfig+0x150>)
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d02a      	beq.n	800b5e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	b2db      	uxtb	r3, r3
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7fe ffc4 	bl	800a522 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b59a:	4b1d      	ldr	r3, [pc, #116]	; (800b610 <USBD_SetConfig+0x150>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5a4:	4b1a      	ldr	r3, [pc, #104]	; (800b610 <USBD_SetConfig+0x150>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7fe ff9d 	bl	800a4ea <USBD_SetClassConfig>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00f      	beq.n	800b5da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f918 	bl	800b7f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7fe ffa9 	bl	800a522 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5d8:	e014      	b.n	800b604 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f9d4 	bl	800b988 <USBD_CtlSendStatus>
      break;
 800b5e0:	e010      	b.n	800b604 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f9d0 	bl	800b988 <USBD_CtlSendStatus>
      break;
 800b5e8:	e00c      	b.n	800b604 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f900 	bl	800b7f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5f2:	4b07      	ldr	r3, [pc, #28]	; (800b610 <USBD_SetConfig+0x150>)
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f7fe ff92 	bl	800a522 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b5fe:	2303      	movs	r3, #3
 800b600:	73fb      	strb	r3, [r7, #15]
      break;
 800b602:	bf00      	nop
  }

  return ret;
 800b604:	7bfb      	ldrb	r3, [r7, #15]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	200004c0 	.word	0x200004c0

0800b614 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	88db      	ldrh	r3, [r3, #6]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d004      	beq.n	800b630 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f8e2 	bl	800b7f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b62e:	e023      	b.n	800b678 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	dc02      	bgt.n	800b642 <USBD_GetConfig+0x2e>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dc03      	bgt.n	800b648 <USBD_GetConfig+0x34>
 800b640:	e015      	b.n	800b66e <USBD_GetConfig+0x5a>
 800b642:	2b03      	cmp	r3, #3
 800b644:	d00b      	beq.n	800b65e <USBD_GetConfig+0x4a>
 800b646:	e012      	b.n	800b66e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3308      	adds	r3, #8
 800b652:	2201      	movs	r2, #1
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f93c 	bl	800b8d4 <USBD_CtlSendData>
        break;
 800b65c:	e00c      	b.n	800b678 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	3304      	adds	r3, #4
 800b662:	2201      	movs	r2, #1
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f934 	bl	800b8d4 <USBD_CtlSendData>
        break;
 800b66c:	e004      	b.n	800b678 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f8be 	bl	800b7f2 <USBD_CtlError>
        break;
 800b676:	bf00      	nop
}
 800b678:	bf00      	nop
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b690:	b2db      	uxtb	r3, r3
 800b692:	3b01      	subs	r3, #1
 800b694:	2b02      	cmp	r3, #2
 800b696:	d81e      	bhi.n	800b6d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	88db      	ldrh	r3, [r3, #6]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d004      	beq.n	800b6aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f8a5 	bl	800b7f2 <USBD_CtlError>
        break;
 800b6a8:	e01a      	b.n	800b6e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f043 0202 	orr.w	r2, r3, #2
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	330c      	adds	r3, #12
 800b6ca:	2202      	movs	r2, #2
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f900 	bl	800b8d4 <USBD_CtlSendData>
      break;
 800b6d4:	e004      	b.n	800b6e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f88a 	bl	800b7f2 <USBD_CtlError>
      break;
 800b6de:	bf00      	nop
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	885b      	ldrh	r3, [r3, #2]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d107      	bne.n	800b70a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f940 	bl	800b988 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b708:	e013      	b.n	800b732 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	885b      	ldrh	r3, [r3, #2]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d10b      	bne.n	800b72a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	889b      	ldrh	r3, [r3, #4]
 800b716:	0a1b      	lsrs	r3, r3, #8
 800b718:	b29b      	uxth	r3, r3
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f930 	bl	800b988 <USBD_CtlSendStatus>
}
 800b728:	e003      	b.n	800b732 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f860 	bl	800b7f2 <USBD_CtlError>
}
 800b732:	bf00      	nop
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b082      	sub	sp, #8
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d80b      	bhi.n	800b76a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	885b      	ldrh	r3, [r3, #2]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d10c      	bne.n	800b774 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f910 	bl	800b988 <USBD_CtlSendStatus>
      }
      break;
 800b768:	e004      	b.n	800b774 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f840 	bl	800b7f2 <USBD_CtlError>
      break;
 800b772:	e000      	b.n	800b776 <USBD_ClrFeature+0x3c>
      break;
 800b774:	bf00      	nop
  }
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	781a      	ldrb	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	3301      	adds	r3, #1
 800b798:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	781a      	ldrb	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff fa41 	bl	800ac30 <SWAPBYTE>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff fa34 	bl	800ac30 <SWAPBYTE>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f7ff fa27 	bl	800ac30 <SWAPBYTE>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	80da      	strh	r2, [r3, #6]
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7fc:	2180      	movs	r1, #128	; 0x80
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fd2c 	bl	800c25c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b804:	2100      	movs	r1, #0
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fd28 	bl	800c25c <USBD_LL_StallEP>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d036      	beq.n	800b898 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b82e:	6938      	ldr	r0, [r7, #16]
 800b830:	f000 f836 	bl	800b8a0 <USBD_GetLen>
 800b834:	4603      	mov	r3, r0
 800b836:	3301      	adds	r3, #1
 800b838:	b29b      	uxth	r3, r3
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	4413      	add	r3, r2
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	7812      	ldrb	r2, [r2, #0]
 800b84c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	3301      	adds	r3, #1
 800b852:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	4413      	add	r3, r2
 800b85a:	2203      	movs	r2, #3
 800b85c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	3301      	adds	r3, #1
 800b862:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b864:	e013      	b.n	800b88e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	4413      	add	r3, r2
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	7812      	ldrb	r2, [r2, #0]
 800b870:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	3301      	adds	r3, #1
 800b876:	613b      	str	r3, [r7, #16]
    idx++;
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	3301      	adds	r3, #1
 800b87c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	4413      	add	r3, r2
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]
    idx++;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	3301      	adds	r3, #1
 800b88c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e7      	bne.n	800b866 <USBD_GetString+0x52>
 800b896:	e000      	b.n	800b89a <USBD_GetString+0x86>
    return;
 800b898:	bf00      	nop
  }
}
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8b0:	e005      	b.n	800b8be <USBD_GetLen+0x1e>
  {
    len++;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1f5      	bne.n	800b8b2 <USBD_GetLen+0x12>
  }

  return len;
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 fd37 	bl	800c36e <USBD_LL_Transmit>

  return USBD_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	2100      	movs	r1, #0
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 fd26 	bl	800c36e <USBD_LL_Transmit>

  return USBD_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2203      	movs	r2, #3
 800b93c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	2100      	movs	r1, #0
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 fd2a 	bl	800c3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	2100      	movs	r1, #0
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f000 fd19 	bl	800c3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2204      	movs	r2, #4
 800b994:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b998:	2300      	movs	r3, #0
 800b99a:	2200      	movs	r2, #0
 800b99c:	2100      	movs	r1, #0
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fce5 	bl	800c36e <USBD_LL_Transmit>

  return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2205      	movs	r2, #5
 800b9ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fcf3 	bl	800c3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	4912      	ldr	r1, [pc, #72]	; (800ba24 <MX_USB_DEVICE_Init+0x50>)
 800b9dc:	4812      	ldr	r0, [pc, #72]	; (800ba28 <MX_USB_DEVICE_Init+0x54>)
 800b9de:	f7fe fd07 	bl	800a3f0 <USBD_Init>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b9e8:	f7f6 fd0a 	bl	8002400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b9ec:	490f      	ldr	r1, [pc, #60]	; (800ba2c <MX_USB_DEVICE_Init+0x58>)
 800b9ee:	480e      	ldr	r0, [pc, #56]	; (800ba28 <MX_USB_DEVICE_Init+0x54>)
 800b9f0:	f7fe fd2e 	bl	800a450 <USBD_RegisterClass>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b9fa:	f7f6 fd01 	bl	8002400 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b9fe:	490c      	ldr	r1, [pc, #48]	; (800ba30 <MX_USB_DEVICE_Init+0x5c>)
 800ba00:	4809      	ldr	r0, [pc, #36]	; (800ba28 <MX_USB_DEVICE_Init+0x54>)
 800ba02:	f7fe fc1f 	bl	800a244 <USBD_CDC_RegisterInterface>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ba0c:	f7f6 fcf8 	bl	8002400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ba10:	4805      	ldr	r0, [pc, #20]	; (800ba28 <MX_USB_DEVICE_Init+0x54>)
 800ba12:	f7fe fd53 	bl	800a4bc <USBD_Start>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba1c:	f7f6 fcf0 	bl	8002400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba20:	bf00      	nop
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	20000310 	.word	0x20000310
 800ba28:	20002050 	.word	0x20002050
 800ba2c:	2000027c 	.word	0x2000027c
 800ba30:	200002fc 	.word	0x200002fc

0800ba34 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ba38:	2200      	movs	r2, #0
 800ba3a:	4905      	ldr	r1, [pc, #20]	; (800ba50 <CDC_Init_HS+0x1c>)
 800ba3c:	4805      	ldr	r0, [pc, #20]	; (800ba54 <CDC_Init_HS+0x20>)
 800ba3e:	f7fe fc1b 	bl	800a278 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ba42:	4905      	ldr	r1, [pc, #20]	; (800ba58 <CDC_Init_HS+0x24>)
 800ba44:	4803      	ldr	r0, [pc, #12]	; (800ba54 <CDC_Init_HS+0x20>)
 800ba46:	f7fe fc39 	bl	800a2bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba4a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20002b34 	.word	0x20002b34
 800ba54:	20002050 	.word	0x20002050
 800ba58:	2000232c 	.word	0x2000232c

0800ba5c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ba60:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	4603      	mov	r3, r0
 800ba74:	6039      	str	r1, [r7, #0]
 800ba76:	71fb      	strb	r3, [r7, #7]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	2b23      	cmp	r3, #35	; 0x23
 800ba80:	f200 808c 	bhi.w	800bb9c <CDC_Control_HS+0x130>
 800ba84:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <CDC_Control_HS+0x20>)
 800ba86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8a:	bf00      	nop
 800ba8c:	0800bb9d 	.word	0x0800bb9d
 800ba90:	0800bb9d 	.word	0x0800bb9d
 800ba94:	0800bb9d 	.word	0x0800bb9d
 800ba98:	0800bb9d 	.word	0x0800bb9d
 800ba9c:	0800bb9d 	.word	0x0800bb9d
 800baa0:	0800bb9d 	.word	0x0800bb9d
 800baa4:	0800bb9d 	.word	0x0800bb9d
 800baa8:	0800bb9d 	.word	0x0800bb9d
 800baac:	0800bb9d 	.word	0x0800bb9d
 800bab0:	0800bb9d 	.word	0x0800bb9d
 800bab4:	0800bb9d 	.word	0x0800bb9d
 800bab8:	0800bb9d 	.word	0x0800bb9d
 800babc:	0800bb9d 	.word	0x0800bb9d
 800bac0:	0800bb9d 	.word	0x0800bb9d
 800bac4:	0800bb9d 	.word	0x0800bb9d
 800bac8:	0800bb9d 	.word	0x0800bb9d
 800bacc:	0800bb9d 	.word	0x0800bb9d
 800bad0:	0800bb9d 	.word	0x0800bb9d
 800bad4:	0800bb9d 	.word	0x0800bb9d
 800bad8:	0800bb9d 	.word	0x0800bb9d
 800badc:	0800bb9d 	.word	0x0800bb9d
 800bae0:	0800bb9d 	.word	0x0800bb9d
 800bae4:	0800bb9d 	.word	0x0800bb9d
 800bae8:	0800bb9d 	.word	0x0800bb9d
 800baec:	0800bb9d 	.word	0x0800bb9d
 800baf0:	0800bb9d 	.word	0x0800bb9d
 800baf4:	0800bb9d 	.word	0x0800bb9d
 800baf8:	0800bb9d 	.word	0x0800bb9d
 800bafc:	0800bb9d 	.word	0x0800bb9d
 800bb00:	0800bb9d 	.word	0x0800bb9d
 800bb04:	0800bb9d 	.word	0x0800bb9d
 800bb08:	0800bb9d 	.word	0x0800bb9d
 800bb0c:	0800bb1d 	.word	0x0800bb1d
 800bb10:	0800bb57 	.word	0x0800bb57
 800bb14:	0800bb9d 	.word	0x0800bb9d
 800bb18:	0800bb9d 	.word	0x0800bb9d
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
  case CDC_SET_LINE_CODING:
  	// Added by mg
//	memcpy( lineCoding, pbuf, sizeof(lineCoding) ); // <-- add this line
  	temp[0] = pbuf[0];
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781a      	ldrb	r2, [r3, #0]
 800bb20:	4b22      	ldr	r3, [pc, #136]	; (800bbac <CDC_Control_HS+0x140>)
 800bb22:	701a      	strb	r2, [r3, #0]
  	temp[1] = pbuf[1];
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	785a      	ldrb	r2, [r3, #1]
 800bb28:	4b20      	ldr	r3, [pc, #128]	; (800bbac <CDC_Control_HS+0x140>)
 800bb2a:	705a      	strb	r2, [r3, #1]
  	temp[2] = pbuf[2];
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	789a      	ldrb	r2, [r3, #2]
 800bb30:	4b1e      	ldr	r3, [pc, #120]	; (800bbac <CDC_Control_HS+0x140>)
 800bb32:	709a      	strb	r2, [r3, #2]
  	temp[3] = pbuf[3];
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	78da      	ldrb	r2, [r3, #3]
 800bb38:	4b1c      	ldr	r3, [pc, #112]	; (800bbac <CDC_Control_HS+0x140>)
 800bb3a:	70da      	strb	r2, [r3, #3]
  	temp[4] = pbuf[4];
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	791a      	ldrb	r2, [r3, #4]
 800bb40:	4b1a      	ldr	r3, [pc, #104]	; (800bbac <CDC_Control_HS+0x140>)
 800bb42:	711a      	strb	r2, [r3, #4]
  	temp[5] = pbuf[5];
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	795a      	ldrb	r2, [r3, #5]
 800bb48:	4b18      	ldr	r3, [pc, #96]	; (800bbac <CDC_Control_HS+0x140>)
 800bb4a:	715a      	strb	r2, [r3, #5]
  	temp[6] = pbuf[6];
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	799a      	ldrb	r2, [r3, #6]
 800bb50:	4b16      	ldr	r3, [pc, #88]	; (800bbac <CDC_Control_HS+0x140>)
 800bb52:	719a      	strb	r2, [r3, #6]

    break;
 800bb54:	e023      	b.n	800bb9e <CDC_Control_HS+0x132>

  case CDC_GET_LINE_CODING:
  	// Added by mg
//	memcpy( pbuf, lineCoding, sizeof(lineCoding) ); // <-- add this line
  	pbuf[0] = temp[0];
 800bb56:	4b15      	ldr	r3, [pc, #84]	; (800bbac <CDC_Control_HS+0x140>)
 800bb58:	781a      	ldrb	r2, [r3, #0]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	701a      	strb	r2, [r3, #0]
  	pbuf[1] = temp[1];
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	3301      	adds	r3, #1
 800bb62:	4a12      	ldr	r2, [pc, #72]	; (800bbac <CDC_Control_HS+0x140>)
 800bb64:	7852      	ldrb	r2, [r2, #1]
 800bb66:	701a      	strb	r2, [r3, #0]
  	pbuf[2] = temp[2];
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	3302      	adds	r3, #2
 800bb6c:	4a0f      	ldr	r2, [pc, #60]	; (800bbac <CDC_Control_HS+0x140>)
 800bb6e:	7892      	ldrb	r2, [r2, #2]
 800bb70:	701a      	strb	r2, [r3, #0]
  	pbuf[3] = temp[3];
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	3303      	adds	r3, #3
 800bb76:	4a0d      	ldr	r2, [pc, #52]	; (800bbac <CDC_Control_HS+0x140>)
 800bb78:	78d2      	ldrb	r2, [r2, #3]
 800bb7a:	701a      	strb	r2, [r3, #0]
  	pbuf[4] = temp[4];
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	4a0a      	ldr	r2, [pc, #40]	; (800bbac <CDC_Control_HS+0x140>)
 800bb82:	7912      	ldrb	r2, [r2, #4]
 800bb84:	701a      	strb	r2, [r3, #0]
  	pbuf[5] = temp[5];
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	3305      	adds	r3, #5
 800bb8a:	4a08      	ldr	r2, [pc, #32]	; (800bbac <CDC_Control_HS+0x140>)
 800bb8c:	7952      	ldrb	r2, [r2, #5]
 800bb8e:	701a      	strb	r2, [r3, #0]
  	pbuf[6] = temp[6];
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	3306      	adds	r3, #6
 800bb94:	4a05      	ldr	r2, [pc, #20]	; (800bbac <CDC_Control_HS+0x140>)
 800bb96:	7992      	ldrb	r2, [r2, #6]
 800bb98:	701a      	strb	r2, [r3, #0]
    break;
 800bb9a:	e000      	b.n	800bb9e <CDC_Control_HS+0x132>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb9c:	bf00      	nop
  }

  return (USBD_OK);
 800bb9e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	20002b2c 	.word	0x20002b2c

0800bbb0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4808      	ldr	r0, [pc, #32]	; (800bbe0 <CDC_Receive_HS+0x30>)
 800bbbe:	f7fe fb7d 	bl	800a2bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800bbc2:	4807      	ldr	r0, [pc, #28]	; (800bbe0 <CDC_Receive_HS+0x30>)
 800bbc4:	f7fe fbde 	bl	800a384 <USBD_CDC_ReceivePacket>

  usbCircularBufferInsert(&Buf[0], *Len); // Insert RX Data to usb Buffer
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7f6 f8a2 	bl	8001d18 <usbCircularBufferInsert>

  return (USBD_OK);
 800bbd4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20002050 	.word	0x20002050

0800bbe4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800bbf4:	4b0d      	ldr	r3, [pc, #52]	; (800bc2c <CDC_Transmit_HS+0x48>)
 800bbf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e00b      	b.n	800bc22 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800bc0a:	887b      	ldrh	r3, [r7, #2]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6879      	ldr	r1, [r7, #4]
 800bc10:	4806      	ldr	r0, [pc, #24]	; (800bc2c <CDC_Transmit_HS+0x48>)
 800bc12:	f7fe fb31 	bl	800a278 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800bc16:	4805      	ldr	r0, [pc, #20]	; (800bc2c <CDC_Transmit_HS+0x48>)
 800bc18:	f7fe fb6e 	bl	800a2f8 <USBD_CDC_TransmitPacket>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20002050 	.word	0x20002050

0800bc30 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b087      	sub	sp, #28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800bc42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	371c      	adds	r7, #28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
	...

0800bc54 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	6039      	str	r1, [r7, #0]
 800bc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	2212      	movs	r2, #18
 800bc64:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800bc66:	4b03      	ldr	r3, [pc, #12]	; (800bc74 <USBD_HS_DeviceDescriptor+0x20>)
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	2000032c 	.word	0x2000032c

0800bc78 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	6039      	str	r1, [r7, #0]
 800bc82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2204      	movs	r2, #4
 800bc88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc8a:	4b03      	ldr	r3, [pc, #12]	; (800bc98 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	20000340 	.word	0x20000340

0800bc9c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bca8:	79fb      	ldrb	r3, [r7, #7]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d105      	bne.n	800bcba <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	4907      	ldr	r1, [pc, #28]	; (800bcd0 <USBD_HS_ProductStrDescriptor+0x34>)
 800bcb2:	4808      	ldr	r0, [pc, #32]	; (800bcd4 <USBD_HS_ProductStrDescriptor+0x38>)
 800bcb4:	f7ff fdae 	bl	800b814 <USBD_GetString>
 800bcb8:	e004      	b.n	800bcc4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	4904      	ldr	r1, [pc, #16]	; (800bcd0 <USBD_HS_ProductStrDescriptor+0x34>)
 800bcbe:	4805      	ldr	r0, [pc, #20]	; (800bcd4 <USBD_HS_ProductStrDescriptor+0x38>)
 800bcc0:	f7ff fda8 	bl	800b814 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcc4:	4b02      	ldr	r3, [pc, #8]	; (800bcd0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20003334 	.word	0x20003334
 800bcd4:	0800edc0 	.word	0x0800edc0

0800bcd8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	6039      	str	r1, [r7, #0]
 800bce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	4904      	ldr	r1, [pc, #16]	; (800bcf8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800bce8:	4804      	ldr	r0, [pc, #16]	; (800bcfc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800bcea:	f7ff fd93 	bl	800b814 <USBD_GetString>
  return USBD_StrDesc;
 800bcee:	4b02      	ldr	r3, [pc, #8]	; (800bcf8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20003334 	.word	0x20003334
 800bcfc:	0800edd8 	.word	0x0800edd8

0800bd00 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	6039      	str	r1, [r7, #0]
 800bd0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	221a      	movs	r2, #26
 800bd10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd12:	f000 f843 	bl	800bd9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bd16:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20000344 	.word	0x20000344

0800bd24 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d105      	bne.n	800bd42 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4907      	ldr	r1, [pc, #28]	; (800bd58 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bd3a:	4808      	ldr	r0, [pc, #32]	; (800bd5c <USBD_HS_ConfigStrDescriptor+0x38>)
 800bd3c:	f7ff fd6a 	bl	800b814 <USBD_GetString>
 800bd40:	e004      	b.n	800bd4c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4904      	ldr	r1, [pc, #16]	; (800bd58 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bd46:	4805      	ldr	r0, [pc, #20]	; (800bd5c <USBD_HS_ConfigStrDescriptor+0x38>)
 800bd48:	f7ff fd64 	bl	800b814 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd4c:	4b02      	ldr	r3, [pc, #8]	; (800bd58 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20003334 	.word	0x20003334
 800bd5c:	0800edec 	.word	0x0800edec

0800bd60 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	6039      	str	r1, [r7, #0]
 800bd6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd6c:	79fb      	ldrb	r3, [r7, #7]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d105      	bne.n	800bd7e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4907      	ldr	r1, [pc, #28]	; (800bd94 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bd76:	4808      	ldr	r0, [pc, #32]	; (800bd98 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bd78:	f7ff fd4c 	bl	800b814 <USBD_GetString>
 800bd7c:	e004      	b.n	800bd88 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4904      	ldr	r1, [pc, #16]	; (800bd94 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bd82:	4805      	ldr	r0, [pc, #20]	; (800bd98 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bd84:	f7ff fd46 	bl	800b814 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20003334 	.word	0x20003334
 800bd98:	0800edf8 	.word	0x0800edf8

0800bd9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bda2:	4b0f      	ldr	r3, [pc, #60]	; (800bde0 <Get_SerialNum+0x44>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bda8:	4b0e      	ldr	r3, [pc, #56]	; (800bde4 <Get_SerialNum+0x48>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdae:	4b0e      	ldr	r3, [pc, #56]	; (800bde8 <Get_SerialNum+0x4c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4413      	add	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdc2:	2208      	movs	r2, #8
 800bdc4:	4909      	ldr	r1, [pc, #36]	; (800bdec <Get_SerialNum+0x50>)
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f000 f814 	bl	800bdf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdcc:	2204      	movs	r2, #4
 800bdce:	4908      	ldr	r1, [pc, #32]	; (800bdf0 <Get_SerialNum+0x54>)
 800bdd0:	68b8      	ldr	r0, [r7, #8]
 800bdd2:	f000 f80f 	bl	800bdf4 <IntToUnicode>
  }
}
 800bdd6:	bf00      	nop
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	1fff7a10 	.word	0x1fff7a10
 800bde4:	1fff7a14 	.word	0x1fff7a14
 800bde8:	1fff7a18 	.word	0x1fff7a18
 800bdec:	20000346 	.word	0x20000346
 800bdf0:	20000356 	.word	0x20000356

0800bdf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b087      	sub	sp, #28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	4613      	mov	r3, r2
 800be00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be06:	2300      	movs	r3, #0
 800be08:	75fb      	strb	r3, [r7, #23]
 800be0a:	e027      	b.n	800be5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	0f1b      	lsrs	r3, r3, #28
 800be10:	2b09      	cmp	r3, #9
 800be12:	d80b      	bhi.n	800be2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	0f1b      	lsrs	r3, r3, #28
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	4619      	mov	r1, r3
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	440b      	add	r3, r1
 800be24:	3230      	adds	r2, #48	; 0x30
 800be26:	b2d2      	uxtb	r2, r2
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	e00a      	b.n	800be42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	0f1b      	lsrs	r3, r3, #28
 800be30:	b2da      	uxtb	r2, r3
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	4619      	mov	r1, r3
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	440b      	add	r3, r1
 800be3c:	3237      	adds	r2, #55	; 0x37
 800be3e:	b2d2      	uxtb	r2, r2
 800be40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	011b      	lsls	r3, r3, #4
 800be46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	3301      	adds	r3, #1
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	4413      	add	r3, r2
 800be52:	2200      	movs	r2, #0
 800be54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be56:	7dfb      	ldrb	r3, [r7, #23]
 800be58:	3301      	adds	r3, #1
 800be5a:	75fb      	strb	r3, [r7, #23]
 800be5c:	7dfa      	ldrb	r2, [r7, #23]
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	429a      	cmp	r2, r3
 800be62:	d3d3      	bcc.n	800be0c <IntToUnicode+0x18>
  }
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	371c      	adds	r7, #28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
	...

0800be74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08a      	sub	sp, #40	; 0x28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be7c:	f107 0314 	add.w	r3, r7, #20
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	605a      	str	r2, [r3, #4]
 800be86:	609a      	str	r2, [r3, #8]
 800be88:	60da      	str	r2, [r3, #12]
 800be8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a1d      	ldr	r2, [pc, #116]	; (800bf08 <HAL_PCD_MspInit+0x94>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d134      	bne.n	800bf00 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be96:	2300      	movs	r3, #0
 800be98:	613b      	str	r3, [r7, #16]
 800be9a:	4b1c      	ldr	r3, [pc, #112]	; (800bf0c <HAL_PCD_MspInit+0x98>)
 800be9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9e:	4a1b      	ldr	r2, [pc, #108]	; (800bf0c <HAL_PCD_MspInit+0x98>)
 800bea0:	f043 0302 	orr.w	r3, r3, #2
 800bea4:	6313      	str	r3, [r2, #48]	; 0x30
 800bea6:	4b19      	ldr	r3, [pc, #100]	; (800bf0c <HAL_PCD_MspInit+0x98>)
 800bea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	613b      	str	r3, [r7, #16]
 800beb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800beb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800beb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb8:	2302      	movs	r3, #2
 800beba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bebc:	2300      	movs	r3, #0
 800bebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bec0:	2303      	movs	r3, #3
 800bec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bec4:	230c      	movs	r3, #12
 800bec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bec8:	f107 0314 	add.w	r3, r7, #20
 800becc:	4619      	mov	r1, r3
 800bece:	4810      	ldr	r0, [pc, #64]	; (800bf10 <HAL_PCD_MspInit+0x9c>)
 800bed0:	f7f7 fe1a 	bl	8003b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bed4:	2300      	movs	r3, #0
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <HAL_PCD_MspInit+0x98>)
 800beda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bedc:	4a0b      	ldr	r2, [pc, #44]	; (800bf0c <HAL_PCD_MspInit+0x98>)
 800bede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bee2:	6313      	str	r3, [r2, #48]	; 0x30
 800bee4:	4b09      	ldr	r3, [pc, #36]	; (800bf0c <HAL_PCD_MspInit+0x98>)
 800bee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800bef0:	2200      	movs	r2, #0
 800bef2:	2100      	movs	r1, #0
 800bef4:	204d      	movs	r0, #77	; 0x4d
 800bef6:	f7f7 fd60 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800befa:	204d      	movs	r0, #77	; 0x4d
 800befc:	f7f7 fd79 	bl	80039f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bf00:	bf00      	nop
 800bf02:	3728      	adds	r7, #40	; 0x28
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	40040000 	.word	0x40040000
 800bf0c:	40023800 	.word	0x40023800
 800bf10:	40020400 	.word	0x40020400

0800bf14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7fe fb13 	bl	800a556 <USBD_LL_SetupStage>
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	460b      	mov	r3, r1
 800bf42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf4a:	78fa      	ldrb	r2, [r7, #3]
 800bf4c:	6879      	ldr	r1, [r7, #4]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	78fb      	ldrb	r3, [r7, #3]
 800bf60:	4619      	mov	r1, r3
 800bf62:	f7fe fb4d 	bl	800a600 <USBD_LL_DataOutStage>
}
 800bf66:	bf00      	nop
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b082      	sub	sp, #8
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	460b      	mov	r3, r1
 800bf78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf80:	78fa      	ldrb	r2, [r7, #3]
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	4613      	mov	r3, r2
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	440b      	add	r3, r1
 800bf8e:	334c      	adds	r3, #76	; 0x4c
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	78fb      	ldrb	r3, [r7, #3]
 800bf94:	4619      	mov	r1, r3
 800bf96:	f7fe fbe6 	bl	800a766 <USBD_LL_DataInStage>
}
 800bf9a:	bf00      	nop
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fe fd1a 	bl	800a9ea <USBD_LL_SOF>
}
 800bfb6:	bf00      	nop
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d102      	bne.n	800bfd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	73fb      	strb	r3, [r7, #15]
 800bfd6:	e008      	b.n	800bfea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d102      	bne.n	800bfe6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	73fb      	strb	r3, [r7, #15]
 800bfe4:	e001      	b.n	800bfea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bfe6:	f7f6 fa0b 	bl	8002400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bff0:	7bfa      	ldrb	r2, [r7, #15]
 800bff2:	4611      	mov	r1, r2
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe fcba 	bl	800a96e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c000:	4618      	mov	r0, r3
 800c002:	f7fe fc62 	bl	800a8ca <USBD_LL_Reset>
}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
	...

0800c010 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fcb5 	bl	800a98e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6812      	ldr	r2, [r2, #0]
 800c032:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c036:	f043 0301 	orr.w	r3, r3, #1
 800c03a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a1b      	ldr	r3, [r3, #32]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c044:	4b04      	ldr	r3, [pc, #16]	; (800c058 <HAL_PCD_SuspendCallback+0x48>)
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	4a03      	ldr	r2, [pc, #12]	; (800c058 <HAL_PCD_SuspendCallback+0x48>)
 800c04a:	f043 0306 	orr.w	r3, r3, #6
 800c04e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	e000ed00 	.word	0xe000ed00

0800c05c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe fca5 	bl	800a9ba <USBD_LL_Resume>
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c08a:	78fa      	ldrb	r2, [r7, #3]
 800c08c:	4611      	mov	r1, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fcfd 	bl	800aa8e <USBD_LL_IsoOUTIncomplete>
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fcb9 	bl	800aa2a <USBD_LL_IsoINIncomplete>
}
 800c0b8:	bf00      	nop
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fe fd0f 	bl	800aaf2 <USBD_LL_DevConnected>
}
 800c0d4:	bf00      	nop
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fe fd0c 	bl	800ab08 <USBD_LL_DevDisconnected>
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d140      	bne.n	800c18a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c108:	4a22      	ldr	r2, [pc, #136]	; (800c194 <USBD_LL_Init+0x9c>)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a20      	ldr	r2, [pc, #128]	; (800c194 <USBD_LL_Init+0x9c>)
 800c114:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c118:	4b1e      	ldr	r3, [pc, #120]	; (800c194 <USBD_LL_Init+0x9c>)
 800c11a:	4a1f      	ldr	r2, [pc, #124]	; (800c198 <USBD_LL_Init+0xa0>)
 800c11c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800c11e:	4b1d      	ldr	r3, [pc, #116]	; (800c194 <USBD_LL_Init+0x9c>)
 800c120:	2206      	movs	r2, #6
 800c122:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800c124:	4b1b      	ldr	r3, [pc, #108]	; (800c194 <USBD_LL_Init+0x9c>)
 800c126:	2202      	movs	r2, #2
 800c128:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c12a:	4b1a      	ldr	r3, [pc, #104]	; (800c194 <USBD_LL_Init+0x9c>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c130:	4b18      	ldr	r3, [pc, #96]	; (800c194 <USBD_LL_Init+0x9c>)
 800c132:	2202      	movs	r2, #2
 800c134:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c136:	4b17      	ldr	r3, [pc, #92]	; (800c194 <USBD_LL_Init+0x9c>)
 800c138:	2200      	movs	r2, #0
 800c13a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c13c:	4b15      	ldr	r3, [pc, #84]	; (800c194 <USBD_LL_Init+0x9c>)
 800c13e:	2200      	movs	r2, #0
 800c140:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c142:	4b14      	ldr	r3, [pc, #80]	; (800c194 <USBD_LL_Init+0x9c>)
 800c144:	2200      	movs	r2, #0
 800c146:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c148:	4b12      	ldr	r3, [pc, #72]	; (800c194 <USBD_LL_Init+0x9c>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c14e:	4b11      	ldr	r3, [pc, #68]	; (800c194 <USBD_LL_Init+0x9c>)
 800c150:	2200      	movs	r2, #0
 800c152:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c154:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <USBD_LL_Init+0x9c>)
 800c156:	2200      	movs	r2, #0
 800c158:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c15a:	480e      	ldr	r0, [pc, #56]	; (800c194 <USBD_LL_Init+0x9c>)
 800c15c:	f7f9 fa5b 	bl	8005616 <HAL_PCD_Init>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c166:	f7f6 f94b 	bl	8002400 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c16a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c16e:	4809      	ldr	r0, [pc, #36]	; (800c194 <USBD_LL_Init+0x9c>)
 800c170:	f7fa fcb1 	bl	8006ad6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c174:	2280      	movs	r2, #128	; 0x80
 800c176:	2100      	movs	r1, #0
 800c178:	4806      	ldr	r0, [pc, #24]	; (800c194 <USBD_LL_Init+0x9c>)
 800c17a:	f7fa fc65 	bl	8006a48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c17e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800c182:	2101      	movs	r1, #1
 800c184:	4803      	ldr	r0, [pc, #12]	; (800c194 <USBD_LL_Init+0x9c>)
 800c186:	f7fa fc5f 	bl	8006a48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20003534 	.word	0x20003534
 800c198:	40040000 	.word	0x40040000

0800c19c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7f9 fb4c 	bl	8005850 <HAL_PCD_Start>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 f942 	bl	800c448 <USBD_Get_USB_Status>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4611      	mov	r1, r2
 800c1de:	461a      	mov	r2, r3
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	70fb      	strb	r3, [r7, #3]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	70bb      	strb	r3, [r7, #2]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1fa:	78bb      	ldrb	r3, [r7, #2]
 800c1fc:	883a      	ldrh	r2, [r7, #0]
 800c1fe:	78f9      	ldrb	r1, [r7, #3]
 800c200:	f7fa f81d 	bl	800623e <HAL_PCD_EP_Open>
 800c204:	4603      	mov	r3, r0
 800c206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f91c 	bl	800c448 <USBD_Get_USB_Status>
 800c210:	4603      	mov	r3, r0
 800c212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c214:	7bbb      	ldrb	r3, [r7, #14]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	460b      	mov	r3, r1
 800c228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c22a:	2300      	movs	r3, #0
 800c22c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c22e:	2300      	movs	r3, #0
 800c230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c238:	78fa      	ldrb	r2, [r7, #3]
 800c23a:	4611      	mov	r1, r2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fa f866 	bl	800630e <HAL_PCD_EP_Close>
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 f8fd 	bl	800c448 <USBD_Get_USB_Status>
 800c24e:	4603      	mov	r3, r0
 800c250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c252:	7bbb      	ldrb	r3, [r7, #14]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c268:	2300      	movs	r3, #0
 800c26a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c276:	78fa      	ldrb	r2, [r7, #3]
 800c278:	4611      	mov	r1, r2
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fa f93e 	bl	80064fc <HAL_PCD_EP_SetStall>
 800c280:	4603      	mov	r3, r0
 800c282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	4618      	mov	r0, r3
 800c288:	f000 f8de 	bl	800c448 <USBD_Get_USB_Status>
 800c28c:	4603      	mov	r3, r0
 800c28e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c290:	7bbb      	ldrb	r3, [r7, #14]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2b4:	78fa      	ldrb	r2, [r7, #3]
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fa f983 	bl	80065c4 <HAL_PCD_EP_ClrStall>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 f8bf 	bl	800c448 <USBD_Get_USB_Status>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	da0b      	bge.n	800c30c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2fa:	68f9      	ldr	r1, [r7, #12]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	4413      	add	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	440b      	add	r3, r1
 800c306:	333e      	adds	r3, #62	; 0x3e
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	e00b      	b.n	800c324 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c312:	68f9      	ldr	r1, [r7, #12]
 800c314:	4613      	mov	r3, r2
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	4413      	add	r3, r2
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	440b      	add	r3, r1
 800c31e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c322:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c324:	4618      	mov	r0, r3
 800c326:	3714      	adds	r7, #20
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c34a:	78fa      	ldrb	r2, [r7, #3]
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f9 ff50 	bl	80061f4 <HAL_PCD_SetAddress>
 800c354:	4603      	mov	r3, r0
 800c356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 f874 	bl	800c448 <USBD_Get_USB_Status>
 800c360:	4603      	mov	r3, r0
 800c362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c364:	7bbb      	ldrb	r3, [r7, #14]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b086      	sub	sp, #24
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]
 800c37a:	460b      	mov	r3, r1
 800c37c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c37e:	2300      	movs	r3, #0
 800c380:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c38c:	7af9      	ldrb	r1, [r7, #11]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	f7fa f869 	bl	8006468 <HAL_PCD_EP_Transmit>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 f853 	bl	800c448 <USBD_Get_USB_Status>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	607a      	str	r2, [r7, #4]
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3ce:	7af9      	ldrb	r1, [r7, #11]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	f7f9 ffe5 	bl	80063a2 <HAL_PCD_EP_Receive>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f832 	bl	800c448 <USBD_Get_USB_Status>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c404:	78fa      	ldrb	r2, [r7, #3]
 800c406:	4611      	mov	r1, r2
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fa f815 	bl	8006438 <HAL_PCD_EP_GetRxCount>
 800c40e:	4603      	mov	r3, r0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c420:	4b03      	ldr	r3, [pc, #12]	; (800c430 <USBD_static_malloc+0x18>)
}
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	200004c4 	.word	0x200004c4

0800c434 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]

}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c456:	79fb      	ldrb	r3, [r7, #7]
 800c458:	2b03      	cmp	r3, #3
 800c45a:	d817      	bhi.n	800c48c <USBD_Get_USB_Status+0x44>
 800c45c:	a201      	add	r2, pc, #4	; (adr r2, 800c464 <USBD_Get_USB_Status+0x1c>)
 800c45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c462:	bf00      	nop
 800c464:	0800c475 	.word	0x0800c475
 800c468:	0800c47b 	.word	0x0800c47b
 800c46c:	0800c481 	.word	0x0800c481
 800c470:	0800c487 	.word	0x0800c487
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]
    break;
 800c478:	e00b      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c47a:	2303      	movs	r3, #3
 800c47c:	73fb      	strb	r3, [r7, #15]
    break;
 800c47e:	e008      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c480:	2301      	movs	r3, #1
 800c482:	73fb      	strb	r3, [r7, #15]
    break;
 800c484:	e005      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c486:	2303      	movs	r3, #3
 800c488:	73fb      	strb	r3, [r7, #15]
    break;
 800c48a:	e002      	b.n	800c492 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c48c:	2303      	movs	r3, #3
 800c48e:	73fb      	strb	r3, [r7, #15]
    break;
 800c490:	bf00      	nop
  }
  return usb_status;
 800c492:	7bfb      	ldrb	r3, [r7, #15]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <__assert_func>:
 800c4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4a2:	4614      	mov	r4, r2
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b09      	ldr	r3, [pc, #36]	; (800c4cc <__assert_func+0x2c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	68d8      	ldr	r0, [r3, #12]
 800c4ae:	b14c      	cbz	r4, 800c4c4 <__assert_func+0x24>
 800c4b0:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <__assert_func+0x30>)
 800c4b2:	9100      	str	r1, [sp, #0]
 800c4b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4b8:	4906      	ldr	r1, [pc, #24]	; (800c4d4 <__assert_func+0x34>)
 800c4ba:	462b      	mov	r3, r5
 800c4bc:	f000 f838 	bl	800c530 <fiprintf>
 800c4c0:	f000 fc48 	bl	800cd54 <abort>
 800c4c4:	4b04      	ldr	r3, [pc, #16]	; (800c4d8 <__assert_func+0x38>)
 800c4c6:	461c      	mov	r4, r3
 800c4c8:	e7f3      	b.n	800c4b2 <__assert_func+0x12>
 800c4ca:	bf00      	nop
 800c4cc:	20000360 	.word	0x20000360
 800c4d0:	0800ee2c 	.word	0x0800ee2c
 800c4d4:	0800ee39 	.word	0x0800ee39
 800c4d8:	0800ee67 	.word	0x0800ee67

0800c4dc <gcvt>:
 800c4dc:	b530      	push	{r4, r5, lr}
 800c4de:	2200      	movs	r2, #0
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	ec51 0b10 	vmov	r0, r1, d0
 800c4ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c4f0:	f7f4 faf4 	bl	8000adc <__aeabi_dcmplt>
 800c4f4:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c4f8:	4622      	mov	r2, r4
 800c4fa:	b118      	cbz	r0, 800c504 <gcvt+0x28>
 800c4fc:	232d      	movs	r3, #45	; 0x2d
 800c4fe:	f802 3b01 	strb.w	r3, [r2], #1
 800c502:	3d01      	subs	r5, #1
 800c504:	2300      	movs	r3, #0
 800c506:	4806      	ldr	r0, [pc, #24]	; (800c520 <gcvt+0x44>)
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	4629      	mov	r1, r5
 800c50c:	2367      	movs	r3, #103	; 0x67
 800c50e:	6800      	ldr	r0, [r0, #0]
 800c510:	f000 fc9e 	bl	800ce50 <_gcvt>
 800c514:	2800      	cmp	r0, #0
 800c516:	bf14      	ite	ne
 800c518:	4620      	movne	r0, r4
 800c51a:	2000      	moveq	r0, #0
 800c51c:	b005      	add	sp, #20
 800c51e:	bd30      	pop	{r4, r5, pc}
 800c520:	20000360 	.word	0x20000360

0800c524 <__errno>:
 800c524:	4b01      	ldr	r3, [pc, #4]	; (800c52c <__errno+0x8>)
 800c526:	6818      	ldr	r0, [r3, #0]
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	20000360 	.word	0x20000360

0800c530 <fiprintf>:
 800c530:	b40e      	push	{r1, r2, r3}
 800c532:	b503      	push	{r0, r1, lr}
 800c534:	4601      	mov	r1, r0
 800c536:	ab03      	add	r3, sp, #12
 800c538:	4805      	ldr	r0, [pc, #20]	; (800c550 <fiprintf+0x20>)
 800c53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53e:	6800      	ldr	r0, [r0, #0]
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	f000 f86b 	bl	800c61c <_vfiprintf_r>
 800c546:	b002      	add	sp, #8
 800c548:	f85d eb04 	ldr.w	lr, [sp], #4
 800c54c:	b003      	add	sp, #12
 800c54e:	4770      	bx	lr
 800c550:	20000360 	.word	0x20000360

0800c554 <__libc_init_array>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	4d0d      	ldr	r5, [pc, #52]	; (800c58c <__libc_init_array+0x38>)
 800c558:	4c0d      	ldr	r4, [pc, #52]	; (800c590 <__libc_init_array+0x3c>)
 800c55a:	1b64      	subs	r4, r4, r5
 800c55c:	10a4      	asrs	r4, r4, #2
 800c55e:	2600      	movs	r6, #0
 800c560:	42a6      	cmp	r6, r4
 800c562:	d109      	bne.n	800c578 <__libc_init_array+0x24>
 800c564:	4d0b      	ldr	r5, [pc, #44]	; (800c594 <__libc_init_array+0x40>)
 800c566:	4c0c      	ldr	r4, [pc, #48]	; (800c598 <__libc_init_array+0x44>)
 800c568:	f002 fbb4 	bl	800ecd4 <_init>
 800c56c:	1b64      	subs	r4, r4, r5
 800c56e:	10a4      	asrs	r4, r4, #2
 800c570:	2600      	movs	r6, #0
 800c572:	42a6      	cmp	r6, r4
 800c574:	d105      	bne.n	800c582 <__libc_init_array+0x2e>
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	f855 3b04 	ldr.w	r3, [r5], #4
 800c57c:	4798      	blx	r3
 800c57e:	3601      	adds	r6, #1
 800c580:	e7ee      	b.n	800c560 <__libc_init_array+0xc>
 800c582:	f855 3b04 	ldr.w	r3, [r5], #4
 800c586:	4798      	blx	r3
 800c588:	3601      	adds	r6, #1
 800c58a:	e7f2      	b.n	800c572 <__libc_init_array+0x1e>
 800c58c:	0800f0f8 	.word	0x0800f0f8
 800c590:	0800f0f8 	.word	0x0800f0f8
 800c594:	0800f0f8 	.word	0x0800f0f8
 800c598:	0800f0fc 	.word	0x0800f0fc

0800c59c <memcpy>:
 800c59c:	440a      	add	r2, r1
 800c59e:	4291      	cmp	r1, r2
 800c5a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5a4:	d100      	bne.n	800c5a8 <memcpy+0xc>
 800c5a6:	4770      	bx	lr
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5b2:	4291      	cmp	r1, r2
 800c5b4:	d1f9      	bne.n	800c5aa <memcpy+0xe>
 800c5b6:	bd10      	pop	{r4, pc}

0800c5b8 <memset>:
 800c5b8:	4402      	add	r2, r0
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d100      	bne.n	800c5c2 <memset+0xa>
 800c5c0:	4770      	bx	lr
 800c5c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5c6:	e7f9      	b.n	800c5bc <memset+0x4>

0800c5c8 <__sfputc_r>:
 800c5c8:	6893      	ldr	r3, [r2, #8]
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	b410      	push	{r4}
 800c5d0:	6093      	str	r3, [r2, #8]
 800c5d2:	da08      	bge.n	800c5e6 <__sfputc_r+0x1e>
 800c5d4:	6994      	ldr	r4, [r2, #24]
 800c5d6:	42a3      	cmp	r3, r4
 800c5d8:	db01      	blt.n	800c5de <__sfputc_r+0x16>
 800c5da:	290a      	cmp	r1, #10
 800c5dc:	d103      	bne.n	800c5e6 <__sfputc_r+0x1e>
 800c5de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e2:	f000 baf7 	b.w	800cbd4 <__swbuf_r>
 800c5e6:	6813      	ldr	r3, [r2, #0]
 800c5e8:	1c58      	adds	r0, r3, #1
 800c5ea:	6010      	str	r0, [r2, #0]
 800c5ec:	7019      	strb	r1, [r3, #0]
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <__sfputs_r>:
 800c5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	460f      	mov	r7, r1
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	18d5      	adds	r5, r2, r3
 800c600:	42ac      	cmp	r4, r5
 800c602:	d101      	bne.n	800c608 <__sfputs_r+0x12>
 800c604:	2000      	movs	r0, #0
 800c606:	e007      	b.n	800c618 <__sfputs_r+0x22>
 800c608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c60c:	463a      	mov	r2, r7
 800c60e:	4630      	mov	r0, r6
 800c610:	f7ff ffda 	bl	800c5c8 <__sfputc_r>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d1f3      	bne.n	800c600 <__sfputs_r+0xa>
 800c618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c61c <_vfiprintf_r>:
 800c61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c620:	460d      	mov	r5, r1
 800c622:	b09d      	sub	sp, #116	; 0x74
 800c624:	4614      	mov	r4, r2
 800c626:	4698      	mov	r8, r3
 800c628:	4606      	mov	r6, r0
 800c62a:	b118      	cbz	r0, 800c634 <_vfiprintf_r+0x18>
 800c62c:	6983      	ldr	r3, [r0, #24]
 800c62e:	b90b      	cbnz	r3, 800c634 <_vfiprintf_r+0x18>
 800c630:	f000 fde8 	bl	800d204 <__sinit>
 800c634:	4b89      	ldr	r3, [pc, #548]	; (800c85c <_vfiprintf_r+0x240>)
 800c636:	429d      	cmp	r5, r3
 800c638:	d11b      	bne.n	800c672 <_vfiprintf_r+0x56>
 800c63a:	6875      	ldr	r5, [r6, #4]
 800c63c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c63e:	07d9      	lsls	r1, r3, #31
 800c640:	d405      	bmi.n	800c64e <_vfiprintf_r+0x32>
 800c642:	89ab      	ldrh	r3, [r5, #12]
 800c644:	059a      	lsls	r2, r3, #22
 800c646:	d402      	bmi.n	800c64e <_vfiprintf_r+0x32>
 800c648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c64a:	f000 fe79 	bl	800d340 <__retarget_lock_acquire_recursive>
 800c64e:	89ab      	ldrh	r3, [r5, #12]
 800c650:	071b      	lsls	r3, r3, #28
 800c652:	d501      	bpl.n	800c658 <_vfiprintf_r+0x3c>
 800c654:	692b      	ldr	r3, [r5, #16]
 800c656:	b9eb      	cbnz	r3, 800c694 <_vfiprintf_r+0x78>
 800c658:	4629      	mov	r1, r5
 800c65a:	4630      	mov	r0, r6
 800c65c:	f000 fb0c 	bl	800cc78 <__swsetup_r>
 800c660:	b1c0      	cbz	r0, 800c694 <_vfiprintf_r+0x78>
 800c662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c664:	07dc      	lsls	r4, r3, #31
 800c666:	d50e      	bpl.n	800c686 <_vfiprintf_r+0x6a>
 800c668:	f04f 30ff 	mov.w	r0, #4294967295
 800c66c:	b01d      	add	sp, #116	; 0x74
 800c66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c672:	4b7b      	ldr	r3, [pc, #492]	; (800c860 <_vfiprintf_r+0x244>)
 800c674:	429d      	cmp	r5, r3
 800c676:	d101      	bne.n	800c67c <_vfiprintf_r+0x60>
 800c678:	68b5      	ldr	r5, [r6, #8]
 800c67a:	e7df      	b.n	800c63c <_vfiprintf_r+0x20>
 800c67c:	4b79      	ldr	r3, [pc, #484]	; (800c864 <_vfiprintf_r+0x248>)
 800c67e:	429d      	cmp	r5, r3
 800c680:	bf08      	it	eq
 800c682:	68f5      	ldreq	r5, [r6, #12]
 800c684:	e7da      	b.n	800c63c <_vfiprintf_r+0x20>
 800c686:	89ab      	ldrh	r3, [r5, #12]
 800c688:	0598      	lsls	r0, r3, #22
 800c68a:	d4ed      	bmi.n	800c668 <_vfiprintf_r+0x4c>
 800c68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c68e:	f000 fe58 	bl	800d342 <__retarget_lock_release_recursive>
 800c692:	e7e9      	b.n	800c668 <_vfiprintf_r+0x4c>
 800c694:	2300      	movs	r3, #0
 800c696:	9309      	str	r3, [sp, #36]	; 0x24
 800c698:	2320      	movs	r3, #32
 800c69a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c69e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a2:	2330      	movs	r3, #48	; 0x30
 800c6a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c868 <_vfiprintf_r+0x24c>
 800c6a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ac:	f04f 0901 	mov.w	r9, #1
 800c6b0:	4623      	mov	r3, r4
 800c6b2:	469a      	mov	sl, r3
 800c6b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6b8:	b10a      	cbz	r2, 800c6be <_vfiprintf_r+0xa2>
 800c6ba:	2a25      	cmp	r2, #37	; 0x25
 800c6bc:	d1f9      	bne.n	800c6b2 <_vfiprintf_r+0x96>
 800c6be:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c2:	d00b      	beq.n	800c6dc <_vfiprintf_r+0xc0>
 800c6c4:	465b      	mov	r3, fp
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7ff ff93 	bl	800c5f6 <__sfputs_r>
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	f000 80aa 	beq.w	800c82a <_vfiprintf_r+0x20e>
 800c6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6d8:	445a      	add	r2, fp
 800c6da:	9209      	str	r2, [sp, #36]	; 0x24
 800c6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 80a2 	beq.w	800c82a <_vfiprintf_r+0x20e>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f0:	f10a 0a01 	add.w	sl, sl, #1
 800c6f4:	9304      	str	r3, [sp, #16]
 800c6f6:	9307      	str	r3, [sp, #28]
 800c6f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c6fe:	4654      	mov	r4, sl
 800c700:	2205      	movs	r2, #5
 800c702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c706:	4858      	ldr	r0, [pc, #352]	; (800c868 <_vfiprintf_r+0x24c>)
 800c708:	f7f3 fd6a 	bl	80001e0 <memchr>
 800c70c:	9a04      	ldr	r2, [sp, #16]
 800c70e:	b9d8      	cbnz	r0, 800c748 <_vfiprintf_r+0x12c>
 800c710:	06d1      	lsls	r1, r2, #27
 800c712:	bf44      	itt	mi
 800c714:	2320      	movmi	r3, #32
 800c716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c71a:	0713      	lsls	r3, r2, #28
 800c71c:	bf44      	itt	mi
 800c71e:	232b      	movmi	r3, #43	; 0x2b
 800c720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c724:	f89a 3000 	ldrb.w	r3, [sl]
 800c728:	2b2a      	cmp	r3, #42	; 0x2a
 800c72a:	d015      	beq.n	800c758 <_vfiprintf_r+0x13c>
 800c72c:	9a07      	ldr	r2, [sp, #28]
 800c72e:	4654      	mov	r4, sl
 800c730:	2000      	movs	r0, #0
 800c732:	f04f 0c0a 	mov.w	ip, #10
 800c736:	4621      	mov	r1, r4
 800c738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c73c:	3b30      	subs	r3, #48	; 0x30
 800c73e:	2b09      	cmp	r3, #9
 800c740:	d94e      	bls.n	800c7e0 <_vfiprintf_r+0x1c4>
 800c742:	b1b0      	cbz	r0, 800c772 <_vfiprintf_r+0x156>
 800c744:	9207      	str	r2, [sp, #28]
 800c746:	e014      	b.n	800c772 <_vfiprintf_r+0x156>
 800c748:	eba0 0308 	sub.w	r3, r0, r8
 800c74c:	fa09 f303 	lsl.w	r3, r9, r3
 800c750:	4313      	orrs	r3, r2
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	46a2      	mov	sl, r4
 800c756:	e7d2      	b.n	800c6fe <_vfiprintf_r+0xe2>
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	1d19      	adds	r1, r3, #4
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	9103      	str	r1, [sp, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfbb      	ittet	lt
 800c764:	425b      	neglt	r3, r3
 800c766:	f042 0202 	orrlt.w	r2, r2, #2
 800c76a:	9307      	strge	r3, [sp, #28]
 800c76c:	9307      	strlt	r3, [sp, #28]
 800c76e:	bfb8      	it	lt
 800c770:	9204      	strlt	r2, [sp, #16]
 800c772:	7823      	ldrb	r3, [r4, #0]
 800c774:	2b2e      	cmp	r3, #46	; 0x2e
 800c776:	d10c      	bne.n	800c792 <_vfiprintf_r+0x176>
 800c778:	7863      	ldrb	r3, [r4, #1]
 800c77a:	2b2a      	cmp	r3, #42	; 0x2a
 800c77c:	d135      	bne.n	800c7ea <_vfiprintf_r+0x1ce>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	1d1a      	adds	r2, r3, #4
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	9203      	str	r2, [sp, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bfb8      	it	lt
 800c78a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c78e:	3402      	adds	r4, #2
 800c790:	9305      	str	r3, [sp, #20]
 800c792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c878 <_vfiprintf_r+0x25c>
 800c796:	7821      	ldrb	r1, [r4, #0]
 800c798:	2203      	movs	r2, #3
 800c79a:	4650      	mov	r0, sl
 800c79c:	f7f3 fd20 	bl	80001e0 <memchr>
 800c7a0:	b140      	cbz	r0, 800c7b4 <_vfiprintf_r+0x198>
 800c7a2:	2340      	movs	r3, #64	; 0x40
 800c7a4:	eba0 000a 	sub.w	r0, r0, sl
 800c7a8:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ac:	9b04      	ldr	r3, [sp, #16]
 800c7ae:	4303      	orrs	r3, r0
 800c7b0:	3401      	adds	r4, #1
 800c7b2:	9304      	str	r3, [sp, #16]
 800c7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b8:	482c      	ldr	r0, [pc, #176]	; (800c86c <_vfiprintf_r+0x250>)
 800c7ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7be:	2206      	movs	r2, #6
 800c7c0:	f7f3 fd0e 	bl	80001e0 <memchr>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d03f      	beq.n	800c848 <_vfiprintf_r+0x22c>
 800c7c8:	4b29      	ldr	r3, [pc, #164]	; (800c870 <_vfiprintf_r+0x254>)
 800c7ca:	bb1b      	cbnz	r3, 800c814 <_vfiprintf_r+0x1f8>
 800c7cc:	9b03      	ldr	r3, [sp, #12]
 800c7ce:	3307      	adds	r3, #7
 800c7d0:	f023 0307 	bic.w	r3, r3, #7
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	9303      	str	r3, [sp, #12]
 800c7d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7da:	443b      	add	r3, r7
 800c7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7de:	e767      	b.n	800c6b0 <_vfiprintf_r+0x94>
 800c7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	e7a5      	b.n	800c736 <_vfiprintf_r+0x11a>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	3401      	adds	r4, #1
 800c7ee:	9305      	str	r3, [sp, #20]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f04f 0c0a 	mov.w	ip, #10
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7fc:	3a30      	subs	r2, #48	; 0x30
 800c7fe:	2a09      	cmp	r2, #9
 800c800:	d903      	bls.n	800c80a <_vfiprintf_r+0x1ee>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0c5      	beq.n	800c792 <_vfiprintf_r+0x176>
 800c806:	9105      	str	r1, [sp, #20]
 800c808:	e7c3      	b.n	800c792 <_vfiprintf_r+0x176>
 800c80a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c80e:	4604      	mov	r4, r0
 800c810:	2301      	movs	r3, #1
 800c812:	e7f0      	b.n	800c7f6 <_vfiprintf_r+0x1da>
 800c814:	ab03      	add	r3, sp, #12
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	462a      	mov	r2, r5
 800c81a:	4b16      	ldr	r3, [pc, #88]	; (800c874 <_vfiprintf_r+0x258>)
 800c81c:	a904      	add	r1, sp, #16
 800c81e:	4630      	mov	r0, r6
 800c820:	f3af 8000 	nop.w
 800c824:	4607      	mov	r7, r0
 800c826:	1c78      	adds	r0, r7, #1
 800c828:	d1d6      	bne.n	800c7d8 <_vfiprintf_r+0x1bc>
 800c82a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c82c:	07d9      	lsls	r1, r3, #31
 800c82e:	d405      	bmi.n	800c83c <_vfiprintf_r+0x220>
 800c830:	89ab      	ldrh	r3, [r5, #12]
 800c832:	059a      	lsls	r2, r3, #22
 800c834:	d402      	bmi.n	800c83c <_vfiprintf_r+0x220>
 800c836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c838:	f000 fd83 	bl	800d342 <__retarget_lock_release_recursive>
 800c83c:	89ab      	ldrh	r3, [r5, #12]
 800c83e:	065b      	lsls	r3, r3, #25
 800c840:	f53f af12 	bmi.w	800c668 <_vfiprintf_r+0x4c>
 800c844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c846:	e711      	b.n	800c66c <_vfiprintf_r+0x50>
 800c848:	ab03      	add	r3, sp, #12
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	462a      	mov	r2, r5
 800c84e:	4b09      	ldr	r3, [pc, #36]	; (800c874 <_vfiprintf_r+0x258>)
 800c850:	a904      	add	r1, sp, #16
 800c852:	4630      	mov	r0, r6
 800c854:	f000 f880 	bl	800c958 <_printf_i>
 800c858:	e7e4      	b.n	800c824 <_vfiprintf_r+0x208>
 800c85a:	bf00      	nop
 800c85c:	0800eec0 	.word	0x0800eec0
 800c860:	0800eee0 	.word	0x0800eee0
 800c864:	0800eea0 	.word	0x0800eea0
 800c868:	0800ee6c 	.word	0x0800ee6c
 800c86c:	0800ee76 	.word	0x0800ee76
 800c870:	00000000 	.word	0x00000000
 800c874:	0800c5f7 	.word	0x0800c5f7
 800c878:	0800ee72 	.word	0x0800ee72

0800c87c <_printf_common>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	4616      	mov	r6, r2
 800c882:	4699      	mov	r9, r3
 800c884:	688a      	ldr	r2, [r1, #8]
 800c886:	690b      	ldr	r3, [r1, #16]
 800c888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c88c:	4293      	cmp	r3, r2
 800c88e:	bfb8      	it	lt
 800c890:	4613      	movlt	r3, r2
 800c892:	6033      	str	r3, [r6, #0]
 800c894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c898:	4607      	mov	r7, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	b10a      	cbz	r2, 800c8a2 <_printf_common+0x26>
 800c89e:	3301      	adds	r3, #1
 800c8a0:	6033      	str	r3, [r6, #0]
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	0699      	lsls	r1, r3, #26
 800c8a6:	bf42      	ittt	mi
 800c8a8:	6833      	ldrmi	r3, [r6, #0]
 800c8aa:	3302      	addmi	r3, #2
 800c8ac:	6033      	strmi	r3, [r6, #0]
 800c8ae:	6825      	ldr	r5, [r4, #0]
 800c8b0:	f015 0506 	ands.w	r5, r5, #6
 800c8b4:	d106      	bne.n	800c8c4 <_printf_common+0x48>
 800c8b6:	f104 0a19 	add.w	sl, r4, #25
 800c8ba:	68e3      	ldr	r3, [r4, #12]
 800c8bc:	6832      	ldr	r2, [r6, #0]
 800c8be:	1a9b      	subs	r3, r3, r2
 800c8c0:	42ab      	cmp	r3, r5
 800c8c2:	dc26      	bgt.n	800c912 <_printf_common+0x96>
 800c8c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8c8:	1e13      	subs	r3, r2, #0
 800c8ca:	6822      	ldr	r2, [r4, #0]
 800c8cc:	bf18      	it	ne
 800c8ce:	2301      	movne	r3, #1
 800c8d0:	0692      	lsls	r2, r2, #26
 800c8d2:	d42b      	bmi.n	800c92c <_printf_common+0xb0>
 800c8d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8d8:	4649      	mov	r1, r9
 800c8da:	4638      	mov	r0, r7
 800c8dc:	47c0      	blx	r8
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d01e      	beq.n	800c920 <_printf_common+0xa4>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	68e5      	ldr	r5, [r4, #12]
 800c8e6:	6832      	ldr	r2, [r6, #0]
 800c8e8:	f003 0306 	and.w	r3, r3, #6
 800c8ec:	2b04      	cmp	r3, #4
 800c8ee:	bf08      	it	eq
 800c8f0:	1aad      	subeq	r5, r5, r2
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	6922      	ldr	r2, [r4, #16]
 800c8f6:	bf0c      	ite	eq
 800c8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8fc:	2500      	movne	r5, #0
 800c8fe:	4293      	cmp	r3, r2
 800c900:	bfc4      	itt	gt
 800c902:	1a9b      	subgt	r3, r3, r2
 800c904:	18ed      	addgt	r5, r5, r3
 800c906:	2600      	movs	r6, #0
 800c908:	341a      	adds	r4, #26
 800c90a:	42b5      	cmp	r5, r6
 800c90c:	d11a      	bne.n	800c944 <_printf_common+0xc8>
 800c90e:	2000      	movs	r0, #0
 800c910:	e008      	b.n	800c924 <_printf_common+0xa8>
 800c912:	2301      	movs	r3, #1
 800c914:	4652      	mov	r2, sl
 800c916:	4649      	mov	r1, r9
 800c918:	4638      	mov	r0, r7
 800c91a:	47c0      	blx	r8
 800c91c:	3001      	adds	r0, #1
 800c91e:	d103      	bne.n	800c928 <_printf_common+0xac>
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c928:	3501      	adds	r5, #1
 800c92a:	e7c6      	b.n	800c8ba <_printf_common+0x3e>
 800c92c:	18e1      	adds	r1, r4, r3
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	2030      	movs	r0, #48	; 0x30
 800c932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c936:	4422      	add	r2, r4
 800c938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c93c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c940:	3302      	adds	r3, #2
 800c942:	e7c7      	b.n	800c8d4 <_printf_common+0x58>
 800c944:	2301      	movs	r3, #1
 800c946:	4622      	mov	r2, r4
 800c948:	4649      	mov	r1, r9
 800c94a:	4638      	mov	r0, r7
 800c94c:	47c0      	blx	r8
 800c94e:	3001      	adds	r0, #1
 800c950:	d0e6      	beq.n	800c920 <_printf_common+0xa4>
 800c952:	3601      	adds	r6, #1
 800c954:	e7d9      	b.n	800c90a <_printf_common+0x8e>
	...

0800c958 <_printf_i>:
 800c958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c95c:	7e0f      	ldrb	r7, [r1, #24]
 800c95e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c960:	2f78      	cmp	r7, #120	; 0x78
 800c962:	4691      	mov	r9, r2
 800c964:	4680      	mov	r8, r0
 800c966:	460c      	mov	r4, r1
 800c968:	469a      	mov	sl, r3
 800c96a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c96e:	d807      	bhi.n	800c980 <_printf_i+0x28>
 800c970:	2f62      	cmp	r7, #98	; 0x62
 800c972:	d80a      	bhi.n	800c98a <_printf_i+0x32>
 800c974:	2f00      	cmp	r7, #0
 800c976:	f000 80d8 	beq.w	800cb2a <_printf_i+0x1d2>
 800c97a:	2f58      	cmp	r7, #88	; 0x58
 800c97c:	f000 80a3 	beq.w	800cac6 <_printf_i+0x16e>
 800c980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c988:	e03a      	b.n	800ca00 <_printf_i+0xa8>
 800c98a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c98e:	2b15      	cmp	r3, #21
 800c990:	d8f6      	bhi.n	800c980 <_printf_i+0x28>
 800c992:	a101      	add	r1, pc, #4	; (adr r1, 800c998 <_printf_i+0x40>)
 800c994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c998:	0800c9f1 	.word	0x0800c9f1
 800c99c:	0800ca05 	.word	0x0800ca05
 800c9a0:	0800c981 	.word	0x0800c981
 800c9a4:	0800c981 	.word	0x0800c981
 800c9a8:	0800c981 	.word	0x0800c981
 800c9ac:	0800c981 	.word	0x0800c981
 800c9b0:	0800ca05 	.word	0x0800ca05
 800c9b4:	0800c981 	.word	0x0800c981
 800c9b8:	0800c981 	.word	0x0800c981
 800c9bc:	0800c981 	.word	0x0800c981
 800c9c0:	0800c981 	.word	0x0800c981
 800c9c4:	0800cb11 	.word	0x0800cb11
 800c9c8:	0800ca35 	.word	0x0800ca35
 800c9cc:	0800caf3 	.word	0x0800caf3
 800c9d0:	0800c981 	.word	0x0800c981
 800c9d4:	0800c981 	.word	0x0800c981
 800c9d8:	0800cb33 	.word	0x0800cb33
 800c9dc:	0800c981 	.word	0x0800c981
 800c9e0:	0800ca35 	.word	0x0800ca35
 800c9e4:	0800c981 	.word	0x0800c981
 800c9e8:	0800c981 	.word	0x0800c981
 800c9ec:	0800cafb 	.word	0x0800cafb
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	1d1a      	adds	r2, r3, #4
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	602a      	str	r2, [r5, #0]
 800c9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca00:	2301      	movs	r3, #1
 800ca02:	e0a3      	b.n	800cb4c <_printf_i+0x1f4>
 800ca04:	6820      	ldr	r0, [r4, #0]
 800ca06:	6829      	ldr	r1, [r5, #0]
 800ca08:	0606      	lsls	r6, r0, #24
 800ca0a:	f101 0304 	add.w	r3, r1, #4
 800ca0e:	d50a      	bpl.n	800ca26 <_printf_i+0xce>
 800ca10:	680e      	ldr	r6, [r1, #0]
 800ca12:	602b      	str	r3, [r5, #0]
 800ca14:	2e00      	cmp	r6, #0
 800ca16:	da03      	bge.n	800ca20 <_printf_i+0xc8>
 800ca18:	232d      	movs	r3, #45	; 0x2d
 800ca1a:	4276      	negs	r6, r6
 800ca1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca20:	485e      	ldr	r0, [pc, #376]	; (800cb9c <_printf_i+0x244>)
 800ca22:	230a      	movs	r3, #10
 800ca24:	e019      	b.n	800ca5a <_printf_i+0x102>
 800ca26:	680e      	ldr	r6, [r1, #0]
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca2e:	bf18      	it	ne
 800ca30:	b236      	sxthne	r6, r6
 800ca32:	e7ef      	b.n	800ca14 <_printf_i+0xbc>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	6820      	ldr	r0, [r4, #0]
 800ca38:	1d19      	adds	r1, r3, #4
 800ca3a:	6029      	str	r1, [r5, #0]
 800ca3c:	0601      	lsls	r1, r0, #24
 800ca3e:	d501      	bpl.n	800ca44 <_printf_i+0xec>
 800ca40:	681e      	ldr	r6, [r3, #0]
 800ca42:	e002      	b.n	800ca4a <_printf_i+0xf2>
 800ca44:	0646      	lsls	r6, r0, #25
 800ca46:	d5fb      	bpl.n	800ca40 <_printf_i+0xe8>
 800ca48:	881e      	ldrh	r6, [r3, #0]
 800ca4a:	4854      	ldr	r0, [pc, #336]	; (800cb9c <_printf_i+0x244>)
 800ca4c:	2f6f      	cmp	r7, #111	; 0x6f
 800ca4e:	bf0c      	ite	eq
 800ca50:	2308      	moveq	r3, #8
 800ca52:	230a      	movne	r3, #10
 800ca54:	2100      	movs	r1, #0
 800ca56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca5a:	6865      	ldr	r5, [r4, #4]
 800ca5c:	60a5      	str	r5, [r4, #8]
 800ca5e:	2d00      	cmp	r5, #0
 800ca60:	bfa2      	ittt	ge
 800ca62:	6821      	ldrge	r1, [r4, #0]
 800ca64:	f021 0104 	bicge.w	r1, r1, #4
 800ca68:	6021      	strge	r1, [r4, #0]
 800ca6a:	b90e      	cbnz	r6, 800ca70 <_printf_i+0x118>
 800ca6c:	2d00      	cmp	r5, #0
 800ca6e:	d04d      	beq.n	800cb0c <_printf_i+0x1b4>
 800ca70:	4615      	mov	r5, r2
 800ca72:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca76:	fb03 6711 	mls	r7, r3, r1, r6
 800ca7a:	5dc7      	ldrb	r7, [r0, r7]
 800ca7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca80:	4637      	mov	r7, r6
 800ca82:	42bb      	cmp	r3, r7
 800ca84:	460e      	mov	r6, r1
 800ca86:	d9f4      	bls.n	800ca72 <_printf_i+0x11a>
 800ca88:	2b08      	cmp	r3, #8
 800ca8a:	d10b      	bne.n	800caa4 <_printf_i+0x14c>
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	07de      	lsls	r6, r3, #31
 800ca90:	d508      	bpl.n	800caa4 <_printf_i+0x14c>
 800ca92:	6923      	ldr	r3, [r4, #16]
 800ca94:	6861      	ldr	r1, [r4, #4]
 800ca96:	4299      	cmp	r1, r3
 800ca98:	bfde      	ittt	le
 800ca9a:	2330      	movle	r3, #48	; 0x30
 800ca9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800caa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800caa4:	1b52      	subs	r2, r2, r5
 800caa6:	6122      	str	r2, [r4, #16]
 800caa8:	f8cd a000 	str.w	sl, [sp]
 800caac:	464b      	mov	r3, r9
 800caae:	aa03      	add	r2, sp, #12
 800cab0:	4621      	mov	r1, r4
 800cab2:	4640      	mov	r0, r8
 800cab4:	f7ff fee2 	bl	800c87c <_printf_common>
 800cab8:	3001      	adds	r0, #1
 800caba:	d14c      	bne.n	800cb56 <_printf_i+0x1fe>
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	b004      	add	sp, #16
 800cac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac6:	4835      	ldr	r0, [pc, #212]	; (800cb9c <_printf_i+0x244>)
 800cac8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cacc:	6829      	ldr	r1, [r5, #0]
 800cace:	6823      	ldr	r3, [r4, #0]
 800cad0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cad4:	6029      	str	r1, [r5, #0]
 800cad6:	061d      	lsls	r5, r3, #24
 800cad8:	d514      	bpl.n	800cb04 <_printf_i+0x1ac>
 800cada:	07df      	lsls	r7, r3, #31
 800cadc:	bf44      	itt	mi
 800cade:	f043 0320 	orrmi.w	r3, r3, #32
 800cae2:	6023      	strmi	r3, [r4, #0]
 800cae4:	b91e      	cbnz	r6, 800caee <_printf_i+0x196>
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	f023 0320 	bic.w	r3, r3, #32
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	2310      	movs	r3, #16
 800caf0:	e7b0      	b.n	800ca54 <_printf_i+0xfc>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	f043 0320 	orr.w	r3, r3, #32
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	2378      	movs	r3, #120	; 0x78
 800cafc:	4828      	ldr	r0, [pc, #160]	; (800cba0 <_printf_i+0x248>)
 800cafe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb02:	e7e3      	b.n	800cacc <_printf_i+0x174>
 800cb04:	0659      	lsls	r1, r3, #25
 800cb06:	bf48      	it	mi
 800cb08:	b2b6      	uxthmi	r6, r6
 800cb0a:	e7e6      	b.n	800cada <_printf_i+0x182>
 800cb0c:	4615      	mov	r5, r2
 800cb0e:	e7bb      	b.n	800ca88 <_printf_i+0x130>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	6826      	ldr	r6, [r4, #0]
 800cb14:	6961      	ldr	r1, [r4, #20]
 800cb16:	1d18      	adds	r0, r3, #4
 800cb18:	6028      	str	r0, [r5, #0]
 800cb1a:	0635      	lsls	r5, r6, #24
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	d501      	bpl.n	800cb24 <_printf_i+0x1cc>
 800cb20:	6019      	str	r1, [r3, #0]
 800cb22:	e002      	b.n	800cb2a <_printf_i+0x1d2>
 800cb24:	0670      	lsls	r0, r6, #25
 800cb26:	d5fb      	bpl.n	800cb20 <_printf_i+0x1c8>
 800cb28:	8019      	strh	r1, [r3, #0]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	6123      	str	r3, [r4, #16]
 800cb2e:	4615      	mov	r5, r2
 800cb30:	e7ba      	b.n	800caa8 <_printf_i+0x150>
 800cb32:	682b      	ldr	r3, [r5, #0]
 800cb34:	1d1a      	adds	r2, r3, #4
 800cb36:	602a      	str	r2, [r5, #0]
 800cb38:	681d      	ldr	r5, [r3, #0]
 800cb3a:	6862      	ldr	r2, [r4, #4]
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f7f3 fb4e 	bl	80001e0 <memchr>
 800cb44:	b108      	cbz	r0, 800cb4a <_printf_i+0x1f2>
 800cb46:	1b40      	subs	r0, r0, r5
 800cb48:	6060      	str	r0, [r4, #4]
 800cb4a:	6863      	ldr	r3, [r4, #4]
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb54:	e7a8      	b.n	800caa8 <_printf_i+0x150>
 800cb56:	6923      	ldr	r3, [r4, #16]
 800cb58:	462a      	mov	r2, r5
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	4640      	mov	r0, r8
 800cb5e:	47d0      	blx	sl
 800cb60:	3001      	adds	r0, #1
 800cb62:	d0ab      	beq.n	800cabc <_printf_i+0x164>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	079b      	lsls	r3, r3, #30
 800cb68:	d413      	bmi.n	800cb92 <_printf_i+0x23a>
 800cb6a:	68e0      	ldr	r0, [r4, #12]
 800cb6c:	9b03      	ldr	r3, [sp, #12]
 800cb6e:	4298      	cmp	r0, r3
 800cb70:	bfb8      	it	lt
 800cb72:	4618      	movlt	r0, r3
 800cb74:	e7a4      	b.n	800cac0 <_printf_i+0x168>
 800cb76:	2301      	movs	r3, #1
 800cb78:	4632      	mov	r2, r6
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	47d0      	blx	sl
 800cb80:	3001      	adds	r0, #1
 800cb82:	d09b      	beq.n	800cabc <_printf_i+0x164>
 800cb84:	3501      	adds	r5, #1
 800cb86:	68e3      	ldr	r3, [r4, #12]
 800cb88:	9903      	ldr	r1, [sp, #12]
 800cb8a:	1a5b      	subs	r3, r3, r1
 800cb8c:	42ab      	cmp	r3, r5
 800cb8e:	dcf2      	bgt.n	800cb76 <_printf_i+0x21e>
 800cb90:	e7eb      	b.n	800cb6a <_printf_i+0x212>
 800cb92:	2500      	movs	r5, #0
 800cb94:	f104 0619 	add.w	r6, r4, #25
 800cb98:	e7f5      	b.n	800cb86 <_printf_i+0x22e>
 800cb9a:	bf00      	nop
 800cb9c:	0800ee7d 	.word	0x0800ee7d
 800cba0:	0800ee8e 	.word	0x0800ee8e

0800cba4 <iprintf>:
 800cba4:	b40f      	push	{r0, r1, r2, r3}
 800cba6:	4b0a      	ldr	r3, [pc, #40]	; (800cbd0 <iprintf+0x2c>)
 800cba8:	b513      	push	{r0, r1, r4, lr}
 800cbaa:	681c      	ldr	r4, [r3, #0]
 800cbac:	b124      	cbz	r4, 800cbb8 <iprintf+0x14>
 800cbae:	69a3      	ldr	r3, [r4, #24]
 800cbb0:	b913      	cbnz	r3, 800cbb8 <iprintf+0x14>
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 fb26 	bl	800d204 <__sinit>
 800cbb8:	ab05      	add	r3, sp, #20
 800cbba:	9a04      	ldr	r2, [sp, #16]
 800cbbc:	68a1      	ldr	r1, [r4, #8]
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f7ff fd2b 	bl	800c61c <_vfiprintf_r>
 800cbc6:	b002      	add	sp, #8
 800cbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbcc:	b004      	add	sp, #16
 800cbce:	4770      	bx	lr
 800cbd0:	20000360 	.word	0x20000360

0800cbd4 <__swbuf_r>:
 800cbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd6:	460e      	mov	r6, r1
 800cbd8:	4614      	mov	r4, r2
 800cbda:	4605      	mov	r5, r0
 800cbdc:	b118      	cbz	r0, 800cbe6 <__swbuf_r+0x12>
 800cbde:	6983      	ldr	r3, [r0, #24]
 800cbe0:	b90b      	cbnz	r3, 800cbe6 <__swbuf_r+0x12>
 800cbe2:	f000 fb0f 	bl	800d204 <__sinit>
 800cbe6:	4b21      	ldr	r3, [pc, #132]	; (800cc6c <__swbuf_r+0x98>)
 800cbe8:	429c      	cmp	r4, r3
 800cbea:	d12b      	bne.n	800cc44 <__swbuf_r+0x70>
 800cbec:	686c      	ldr	r4, [r5, #4]
 800cbee:	69a3      	ldr	r3, [r4, #24]
 800cbf0:	60a3      	str	r3, [r4, #8]
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	071a      	lsls	r2, r3, #28
 800cbf6:	d52f      	bpl.n	800cc58 <__swbuf_r+0x84>
 800cbf8:	6923      	ldr	r3, [r4, #16]
 800cbfa:	b36b      	cbz	r3, 800cc58 <__swbuf_r+0x84>
 800cbfc:	6923      	ldr	r3, [r4, #16]
 800cbfe:	6820      	ldr	r0, [r4, #0]
 800cc00:	1ac0      	subs	r0, r0, r3
 800cc02:	6963      	ldr	r3, [r4, #20]
 800cc04:	b2f6      	uxtb	r6, r6
 800cc06:	4283      	cmp	r3, r0
 800cc08:	4637      	mov	r7, r6
 800cc0a:	dc04      	bgt.n	800cc16 <__swbuf_r+0x42>
 800cc0c:	4621      	mov	r1, r4
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f000 fa64 	bl	800d0dc <_fflush_r>
 800cc14:	bb30      	cbnz	r0, 800cc64 <__swbuf_r+0x90>
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	60a3      	str	r3, [r4, #8]
 800cc1c:	6823      	ldr	r3, [r4, #0]
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	6022      	str	r2, [r4, #0]
 800cc22:	701e      	strb	r6, [r3, #0]
 800cc24:	6963      	ldr	r3, [r4, #20]
 800cc26:	3001      	adds	r0, #1
 800cc28:	4283      	cmp	r3, r0
 800cc2a:	d004      	beq.n	800cc36 <__swbuf_r+0x62>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	07db      	lsls	r3, r3, #31
 800cc30:	d506      	bpl.n	800cc40 <__swbuf_r+0x6c>
 800cc32:	2e0a      	cmp	r6, #10
 800cc34:	d104      	bne.n	800cc40 <__swbuf_r+0x6c>
 800cc36:	4621      	mov	r1, r4
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f000 fa4f 	bl	800d0dc <_fflush_r>
 800cc3e:	b988      	cbnz	r0, 800cc64 <__swbuf_r+0x90>
 800cc40:	4638      	mov	r0, r7
 800cc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc44:	4b0a      	ldr	r3, [pc, #40]	; (800cc70 <__swbuf_r+0x9c>)
 800cc46:	429c      	cmp	r4, r3
 800cc48:	d101      	bne.n	800cc4e <__swbuf_r+0x7a>
 800cc4a:	68ac      	ldr	r4, [r5, #8]
 800cc4c:	e7cf      	b.n	800cbee <__swbuf_r+0x1a>
 800cc4e:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <__swbuf_r+0xa0>)
 800cc50:	429c      	cmp	r4, r3
 800cc52:	bf08      	it	eq
 800cc54:	68ec      	ldreq	r4, [r5, #12]
 800cc56:	e7ca      	b.n	800cbee <__swbuf_r+0x1a>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f000 f80c 	bl	800cc78 <__swsetup_r>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d0cb      	beq.n	800cbfc <__swbuf_r+0x28>
 800cc64:	f04f 37ff 	mov.w	r7, #4294967295
 800cc68:	e7ea      	b.n	800cc40 <__swbuf_r+0x6c>
 800cc6a:	bf00      	nop
 800cc6c:	0800eec0 	.word	0x0800eec0
 800cc70:	0800eee0 	.word	0x0800eee0
 800cc74:	0800eea0 	.word	0x0800eea0

0800cc78 <__swsetup_r>:
 800cc78:	4b32      	ldr	r3, [pc, #200]	; (800cd44 <__swsetup_r+0xcc>)
 800cc7a:	b570      	push	{r4, r5, r6, lr}
 800cc7c:	681d      	ldr	r5, [r3, #0]
 800cc7e:	4606      	mov	r6, r0
 800cc80:	460c      	mov	r4, r1
 800cc82:	b125      	cbz	r5, 800cc8e <__swsetup_r+0x16>
 800cc84:	69ab      	ldr	r3, [r5, #24]
 800cc86:	b913      	cbnz	r3, 800cc8e <__swsetup_r+0x16>
 800cc88:	4628      	mov	r0, r5
 800cc8a:	f000 fabb 	bl	800d204 <__sinit>
 800cc8e:	4b2e      	ldr	r3, [pc, #184]	; (800cd48 <__swsetup_r+0xd0>)
 800cc90:	429c      	cmp	r4, r3
 800cc92:	d10f      	bne.n	800ccb4 <__swsetup_r+0x3c>
 800cc94:	686c      	ldr	r4, [r5, #4]
 800cc96:	89a3      	ldrh	r3, [r4, #12]
 800cc98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc9c:	0719      	lsls	r1, r3, #28
 800cc9e:	d42c      	bmi.n	800ccfa <__swsetup_r+0x82>
 800cca0:	06dd      	lsls	r5, r3, #27
 800cca2:	d411      	bmi.n	800ccc8 <__swsetup_r+0x50>
 800cca4:	2309      	movs	r3, #9
 800cca6:	6033      	str	r3, [r6, #0]
 800cca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccac:	81a3      	strh	r3, [r4, #12]
 800ccae:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb2:	e03e      	b.n	800cd32 <__swsetup_r+0xba>
 800ccb4:	4b25      	ldr	r3, [pc, #148]	; (800cd4c <__swsetup_r+0xd4>)
 800ccb6:	429c      	cmp	r4, r3
 800ccb8:	d101      	bne.n	800ccbe <__swsetup_r+0x46>
 800ccba:	68ac      	ldr	r4, [r5, #8]
 800ccbc:	e7eb      	b.n	800cc96 <__swsetup_r+0x1e>
 800ccbe:	4b24      	ldr	r3, [pc, #144]	; (800cd50 <__swsetup_r+0xd8>)
 800ccc0:	429c      	cmp	r4, r3
 800ccc2:	bf08      	it	eq
 800ccc4:	68ec      	ldreq	r4, [r5, #12]
 800ccc6:	e7e6      	b.n	800cc96 <__swsetup_r+0x1e>
 800ccc8:	0758      	lsls	r0, r3, #29
 800ccca:	d512      	bpl.n	800ccf2 <__swsetup_r+0x7a>
 800cccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccce:	b141      	cbz	r1, 800cce2 <__swsetup_r+0x6a>
 800ccd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd4:	4299      	cmp	r1, r3
 800ccd6:	d002      	beq.n	800ccde <__swsetup_r+0x66>
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f000 ff51 	bl	800db80 <_free_r>
 800ccde:	2300      	movs	r3, #0
 800cce0:	6363      	str	r3, [r4, #52]	; 0x34
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	2300      	movs	r3, #0
 800ccec:	6063      	str	r3, [r4, #4]
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f043 0308 	orr.w	r3, r3, #8
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	b94b      	cbnz	r3, 800cd12 <__swsetup_r+0x9a>
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd08:	d003      	beq.n	800cd12 <__swsetup_r+0x9a>
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f000 fb3f 	bl	800d390 <__smakebuf_r>
 800cd12:	89a0      	ldrh	r0, [r4, #12]
 800cd14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd18:	f010 0301 	ands.w	r3, r0, #1
 800cd1c:	d00a      	beq.n	800cd34 <__swsetup_r+0xbc>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60a3      	str	r3, [r4, #8]
 800cd22:	6963      	ldr	r3, [r4, #20]
 800cd24:	425b      	negs	r3, r3
 800cd26:	61a3      	str	r3, [r4, #24]
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	b943      	cbnz	r3, 800cd3e <__swsetup_r+0xc6>
 800cd2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd30:	d1ba      	bne.n	800cca8 <__swsetup_r+0x30>
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	0781      	lsls	r1, r0, #30
 800cd36:	bf58      	it	pl
 800cd38:	6963      	ldrpl	r3, [r4, #20]
 800cd3a:	60a3      	str	r3, [r4, #8]
 800cd3c:	e7f4      	b.n	800cd28 <__swsetup_r+0xb0>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	e7f7      	b.n	800cd32 <__swsetup_r+0xba>
 800cd42:	bf00      	nop
 800cd44:	20000360 	.word	0x20000360
 800cd48:	0800eec0 	.word	0x0800eec0
 800cd4c:	0800eee0 	.word	0x0800eee0
 800cd50:	0800eea0 	.word	0x0800eea0

0800cd54 <abort>:
 800cd54:	b508      	push	{r3, lr}
 800cd56:	2006      	movs	r0, #6
 800cd58:	f001 f82a 	bl	800ddb0 <raise>
 800cd5c:	2001      	movs	r0, #1
 800cd5e:	f7f5 ffa5 	bl	8002cac <_exit>

0800cd62 <print_e>:
 800cd62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd64:	b087      	sub	sp, #28
 800cd66:	ec43 2b10 	vmov	d0, r2, r3
 800cd6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cd6c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800cd70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cd72:	ab04      	add	r3, sp, #16
 800cd74:	9301      	str	r3, [sp, #4]
 800cd76:	ab03      	add	r3, sp, #12
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	1c62      	adds	r2, r4, #1
 800cd7c:	ab05      	add	r3, sp, #20
 800cd7e:	460f      	mov	r7, r1
 800cd80:	2102      	movs	r1, #2
 800cd82:	f001 f92d 	bl	800dfe0 <_dtoa_r>
 800cd86:	9a05      	ldr	r2, [sp, #20]
 800cd88:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d105      	bne.n	800cd9c <print_e+0x3a>
 800cd90:	4601      	mov	r1, r0
 800cd92:	4638      	mov	r0, r7
 800cd94:	f001 f86b 	bl	800de6e <strcpy>
 800cd98:	b007      	add	sp, #28
 800cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd9c:	463b      	mov	r3, r7
 800cd9e:	7801      	ldrb	r1, [r0, #0]
 800cda0:	f803 1b01 	strb.w	r1, [r3], #1
 800cda4:	2c00      	cmp	r4, #0
 800cda6:	bfc8      	it	gt
 800cda8:	2501      	movgt	r5, #1
 800cdaa:	212e      	movs	r1, #46	; 0x2e
 800cdac:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800cdb0:	b10f      	cbz	r7, 800cdb6 <print_e+0x54>
 800cdb2:	2c00      	cmp	r4, #0
 800cdb4:	dc37      	bgt.n	800ce26 <print_e+0xc4>
 800cdb6:	2e67      	cmp	r6, #103	; 0x67
 800cdb8:	d046      	beq.n	800ce48 <print_e+0xe6>
 800cdba:	2e47      	cmp	r6, #71	; 0x47
 800cdbc:	d046      	beq.n	800ce4c <print_e+0xea>
 800cdbe:	212e      	movs	r1, #46	; 0x2e
 800cdc0:	2030      	movs	r0, #48	; 0x30
 800cdc2:	2c00      	cmp	r4, #0
 800cdc4:	dc38      	bgt.n	800ce38 <print_e+0xd6>
 800cdc6:	1e51      	subs	r1, r2, #1
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	bfb8      	it	lt
 800cdcc:	f1c2 0201 	rsblt	r2, r2, #1
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	9105      	str	r1, [sp, #20]
 800cdd4:	bfac      	ite	ge
 800cdd6:	222b      	movge	r2, #43	; 0x2b
 800cdd8:	9205      	strlt	r2, [sp, #20]
 800cdda:	f800 6b02 	strb.w	r6, [r0], #2
 800cdde:	bfa8      	it	ge
 800cde0:	705a      	strbge	r2, [r3, #1]
 800cde2:	9a05      	ldr	r2, [sp, #20]
 800cde4:	bfbc      	itt	lt
 800cde6:	212d      	movlt	r1, #45	; 0x2d
 800cde8:	7059      	strblt	r1, [r3, #1]
 800cdea:	2a63      	cmp	r2, #99	; 0x63
 800cdec:	dd0b      	ble.n	800ce06 <print_e+0xa4>
 800cdee:	2164      	movs	r1, #100	; 0x64
 800cdf0:	fb92 f1f1 	sdiv	r1, r2, r1
 800cdf4:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800cdf8:	1cd8      	adds	r0, r3, #3
 800cdfa:	709c      	strb	r4, [r3, #2]
 800cdfc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800ce00:	fb03 2201 	mla	r2, r3, r1, r2
 800ce04:	9205      	str	r2, [sp, #20]
 800ce06:	9b05      	ldr	r3, [sp, #20]
 800ce08:	220a      	movs	r2, #10
 800ce0a:	fb93 f2f2 	sdiv	r2, r3, r2
 800ce0e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800ce12:	7001      	strb	r1, [r0, #0]
 800ce14:	f06f 0109 	mvn.w	r1, #9
 800ce18:	fb01 3302 	mla	r3, r1, r2, r3
 800ce1c:	3330      	adds	r3, #48	; 0x30
 800ce1e:	7043      	strb	r3, [r0, #1]
 800ce20:	2300      	movs	r3, #0
 800ce22:	7083      	strb	r3, [r0, #2]
 800ce24:	e7b8      	b.n	800cd98 <print_e+0x36>
 800ce26:	b10d      	cbz	r5, 800ce2c <print_e+0xca>
 800ce28:	f803 1b01 	strb.w	r1, [r3], #1
 800ce2c:	7805      	ldrb	r5, [r0, #0]
 800ce2e:	f803 5b01 	strb.w	r5, [r3], #1
 800ce32:	3c01      	subs	r4, #1
 800ce34:	2500      	movs	r5, #0
 800ce36:	e7b9      	b.n	800cdac <print_e+0x4a>
 800ce38:	b10d      	cbz	r5, 800ce3e <print_e+0xdc>
 800ce3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce3e:	f803 0b01 	strb.w	r0, [r3], #1
 800ce42:	3c01      	subs	r4, #1
 800ce44:	2500      	movs	r5, #0
 800ce46:	e7bc      	b.n	800cdc2 <print_e+0x60>
 800ce48:	2665      	movs	r6, #101	; 0x65
 800ce4a:	e7bc      	b.n	800cdc6 <print_e+0x64>
 800ce4c:	2645      	movs	r6, #69	; 0x45
 800ce4e:	e7ba      	b.n	800cdc6 <print_e+0x64>

0800ce50 <_gcvt>:
 800ce50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	ec55 4b10 	vmov	r4, r5, d0
 800ce58:	b088      	sub	sp, #32
 800ce5a:	4681      	mov	r9, r0
 800ce5c:	4688      	mov	r8, r1
 800ce5e:	4616      	mov	r6, r2
 800ce60:	469a      	mov	sl, r3
 800ce62:	ee10 0a10 	vmov	r0, s0
 800ce66:	2200      	movs	r2, #0
 800ce68:	2300      	movs	r3, #0
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ce6e:	f7f3 fe35 	bl	8000adc <__aeabi_dcmplt>
 800ce72:	b110      	cbz	r0, 800ce7a <_gcvt+0x2a>
 800ce74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ce78:	461d      	mov	r5, r3
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce86:	b138      	cbz	r0, 800ce98 <_gcvt+0x48>
 800ce88:	2330      	movs	r3, #48	; 0x30
 800ce8a:	7033      	strb	r3, [r6, #0]
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	7073      	strb	r3, [r6, #1]
 800ce90:	4630      	mov	r0, r6
 800ce92:	b008      	add	sp, #32
 800ce94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce98:	a34b      	add	r3, pc, #300	; (adr r3, 800cfc8 <_gcvt+0x178>)
 800ce9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4629      	mov	r1, r5
 800cea2:	f7f3 fe25 	bl	8000af0 <__aeabi_dcmple>
 800cea6:	b158      	cbz	r0, 800cec0 <_gcvt+0x70>
 800cea8:	f108 31ff 	add.w	r1, r8, #4294967295
 800ceac:	9100      	str	r1, [sp, #0]
 800ceae:	e9cd a701 	strd	sl, r7, [sp, #4]
 800ceb2:	4622      	mov	r2, r4
 800ceb4:	462b      	mov	r3, r5
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	4648      	mov	r0, r9
 800ceba:	f7ff ff52 	bl	800cd62 <print_e>
 800cebe:	e7e7      	b.n	800ce90 <_gcvt+0x40>
 800cec0:	4640      	mov	r0, r8
 800cec2:	f000 fe29 	bl	800db18 <_mprec_log10>
 800cec6:	4622      	mov	r2, r4
 800cec8:	ec51 0b10 	vmov	r0, r1, d0
 800cecc:	462b      	mov	r3, r5
 800cece:	f7f3 fe0f 	bl	8000af0 <__aeabi_dcmple>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d1e8      	bne.n	800cea8 <_gcvt+0x58>
 800ced6:	ab07      	add	r3, sp, #28
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	ab06      	add	r3, sp, #24
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	4642      	mov	r2, r8
 800cee0:	ab05      	add	r3, sp, #20
 800cee2:	ec45 4b10 	vmov	d0, r4, r5
 800cee6:	2102      	movs	r1, #2
 800cee8:	4648      	mov	r0, r9
 800ceea:	f001 f879 	bl	800dfe0 <_dtoa_r>
 800ceee:	9a05      	ldr	r2, [sp, #20]
 800cef0:	f242 730f 	movw	r3, #9999	; 0x270f
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d00e      	beq.n	800cf16 <_gcvt+0xc6>
 800cef8:	4633      	mov	r3, r6
 800cefa:	44b0      	add	r8, r6
 800cefc:	4605      	mov	r5, r0
 800cefe:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cf02:	9c05      	ldr	r4, [sp, #20]
 800cf04:	eba8 0203 	sub.w	r2, r8, r3
 800cf08:	b109      	cbz	r1, 800cf0e <_gcvt+0xbe>
 800cf0a:	2c00      	cmp	r4, #0
 800cf0c:	dc08      	bgt.n	800cf20 <_gcvt+0xd0>
 800cf0e:	2100      	movs	r1, #0
 800cf10:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800cf14:	e00d      	b.n	800cf32 <_gcvt+0xe2>
 800cf16:	4601      	mov	r1, r0
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f000 ffa8 	bl	800de6e <strcpy>
 800cf1e:	e7b7      	b.n	800ce90 <_gcvt+0x40>
 800cf20:	3c01      	subs	r4, #1
 800cf22:	f803 1b01 	strb.w	r1, [r3], #1
 800cf26:	9405      	str	r4, [sp, #20]
 800cf28:	e7e8      	b.n	800cefc <_gcvt+0xac>
 800cf2a:	f803 cb01 	strb.w	ip, [r3], #1
 800cf2e:	3a01      	subs	r2, #1
 800cf30:	2101      	movs	r1, #1
 800cf32:	2c00      	cmp	r4, #0
 800cf34:	4620      	mov	r0, r4
 800cf36:	dc2a      	bgt.n	800cf8e <_gcvt+0x13e>
 800cf38:	b101      	cbz	r1, 800cf3c <_gcvt+0xec>
 800cf3a:	9405      	str	r4, [sp, #20]
 800cf3c:	b90f      	cbnz	r7, 800cf42 <_gcvt+0xf2>
 800cf3e:	7829      	ldrb	r1, [r5, #0]
 800cf40:	b311      	cbz	r1, 800cf88 <_gcvt+0x138>
 800cf42:	42b3      	cmp	r3, r6
 800cf44:	bf04      	itt	eq
 800cf46:	2130      	moveq	r1, #48	; 0x30
 800cf48:	f803 1b01 	strbeq.w	r1, [r3], #1
 800cf4c:	212e      	movs	r1, #46	; 0x2e
 800cf4e:	7019      	strb	r1, [r3, #0]
 800cf50:	9905      	ldr	r1, [sp, #20]
 800cf52:	4618      	mov	r0, r3
 800cf54:	2400      	movs	r4, #0
 800cf56:	eba1 0c03 	sub.w	ip, r1, r3
 800cf5a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800cf5e:	eb1c 0f00 	cmn.w	ip, r0
 800cf62:	d41c      	bmi.n	800cf9e <_gcvt+0x14e>
 800cf64:	2900      	cmp	r1, #0
 800cf66:	f1c1 0000 	rsb	r0, r1, #0
 800cf6a:	bfc8      	it	gt
 800cf6c:	2000      	movgt	r0, #0
 800cf6e:	f100 0c01 	add.w	ip, r0, #1
 800cf72:	4463      	add	r3, ip
 800cf74:	4401      	add	r1, r0
 800cf76:	b104      	cbz	r4, 800cf7a <_gcvt+0x12a>
 800cf78:	9105      	str	r1, [sp, #20]
 800cf7a:	1e69      	subs	r1, r5, #1
 800cf7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf80:	b108      	cbz	r0, 800cf86 <_gcvt+0x136>
 800cf82:	2a00      	cmp	r2, #0
 800cf84:	dc0f      	bgt.n	800cfa6 <_gcvt+0x156>
 800cf86:	b9df      	cbnz	r7, 800cfc0 <_gcvt+0x170>
 800cf88:	2200      	movs	r2, #0
 800cf8a:	701a      	strb	r2, [r3, #0]
 800cf8c:	e780      	b.n	800ce90 <_gcvt+0x40>
 800cf8e:	2a00      	cmp	r2, #0
 800cf90:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf94:	dcc9      	bgt.n	800cf2a <_gcvt+0xda>
 800cf96:	2900      	cmp	r1, #0
 800cf98:	d0d0      	beq.n	800cf3c <_gcvt+0xec>
 800cf9a:	9005      	str	r0, [sp, #20]
 800cf9c:	e7ce      	b.n	800cf3c <_gcvt+0xec>
 800cf9e:	f800 ef01 	strb.w	lr, [r0, #1]!
 800cfa2:	2401      	movs	r4, #1
 800cfa4:	e7db      	b.n	800cf5e <_gcvt+0x10e>
 800cfa6:	f803 0b01 	strb.w	r0, [r3], #1
 800cfaa:	3a01      	subs	r2, #1
 800cfac:	e7e6      	b.n	800cf7c <_gcvt+0x12c>
 800cfae:	f801 5b01 	strb.w	r5, [r1], #1
 800cfb2:	1a60      	subs	r0, r4, r1
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	dcfa      	bgt.n	800cfae <_gcvt+0x15e>
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	bfa8      	it	ge
 800cfbc:	189b      	addge	r3, r3, r2
 800cfbe:	e7e3      	b.n	800cf88 <_gcvt+0x138>
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	189c      	adds	r4, r3, r2
 800cfc4:	2530      	movs	r5, #48	; 0x30
 800cfc6:	e7f4      	b.n	800cfb2 <_gcvt+0x162>
 800cfc8:	eb1c432d 	.word	0xeb1c432d
 800cfcc:	3f1a36e2 	.word	0x3f1a36e2

0800cfd0 <__sflush_r>:
 800cfd0:	898a      	ldrh	r2, [r1, #12]
 800cfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	0710      	lsls	r0, r2, #28
 800cfda:	460c      	mov	r4, r1
 800cfdc:	d458      	bmi.n	800d090 <__sflush_r+0xc0>
 800cfde:	684b      	ldr	r3, [r1, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	dc05      	bgt.n	800cff0 <__sflush_r+0x20>
 800cfe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	dc02      	bgt.n	800cff0 <__sflush_r+0x20>
 800cfea:	2000      	movs	r0, #0
 800cfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cff2:	2e00      	cmp	r6, #0
 800cff4:	d0f9      	beq.n	800cfea <__sflush_r+0x1a>
 800cff6:	2300      	movs	r3, #0
 800cff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cffc:	682f      	ldr	r7, [r5, #0]
 800cffe:	602b      	str	r3, [r5, #0]
 800d000:	d032      	beq.n	800d068 <__sflush_r+0x98>
 800d002:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d004:	89a3      	ldrh	r3, [r4, #12]
 800d006:	075a      	lsls	r2, r3, #29
 800d008:	d505      	bpl.n	800d016 <__sflush_r+0x46>
 800d00a:	6863      	ldr	r3, [r4, #4]
 800d00c:	1ac0      	subs	r0, r0, r3
 800d00e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d010:	b10b      	cbz	r3, 800d016 <__sflush_r+0x46>
 800d012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d014:	1ac0      	subs	r0, r0, r3
 800d016:	2300      	movs	r3, #0
 800d018:	4602      	mov	r2, r0
 800d01a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d01c:	6a21      	ldr	r1, [r4, #32]
 800d01e:	4628      	mov	r0, r5
 800d020:	47b0      	blx	r6
 800d022:	1c43      	adds	r3, r0, #1
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	d106      	bne.n	800d036 <__sflush_r+0x66>
 800d028:	6829      	ldr	r1, [r5, #0]
 800d02a:	291d      	cmp	r1, #29
 800d02c:	d82c      	bhi.n	800d088 <__sflush_r+0xb8>
 800d02e:	4a2a      	ldr	r2, [pc, #168]	; (800d0d8 <__sflush_r+0x108>)
 800d030:	40ca      	lsrs	r2, r1
 800d032:	07d6      	lsls	r6, r2, #31
 800d034:	d528      	bpl.n	800d088 <__sflush_r+0xb8>
 800d036:	2200      	movs	r2, #0
 800d038:	6062      	str	r2, [r4, #4]
 800d03a:	04d9      	lsls	r1, r3, #19
 800d03c:	6922      	ldr	r2, [r4, #16]
 800d03e:	6022      	str	r2, [r4, #0]
 800d040:	d504      	bpl.n	800d04c <__sflush_r+0x7c>
 800d042:	1c42      	adds	r2, r0, #1
 800d044:	d101      	bne.n	800d04a <__sflush_r+0x7a>
 800d046:	682b      	ldr	r3, [r5, #0]
 800d048:	b903      	cbnz	r3, 800d04c <__sflush_r+0x7c>
 800d04a:	6560      	str	r0, [r4, #84]	; 0x54
 800d04c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d04e:	602f      	str	r7, [r5, #0]
 800d050:	2900      	cmp	r1, #0
 800d052:	d0ca      	beq.n	800cfea <__sflush_r+0x1a>
 800d054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d058:	4299      	cmp	r1, r3
 800d05a:	d002      	beq.n	800d062 <__sflush_r+0x92>
 800d05c:	4628      	mov	r0, r5
 800d05e:	f000 fd8f 	bl	800db80 <_free_r>
 800d062:	2000      	movs	r0, #0
 800d064:	6360      	str	r0, [r4, #52]	; 0x34
 800d066:	e7c1      	b.n	800cfec <__sflush_r+0x1c>
 800d068:	6a21      	ldr	r1, [r4, #32]
 800d06a:	2301      	movs	r3, #1
 800d06c:	4628      	mov	r0, r5
 800d06e:	47b0      	blx	r6
 800d070:	1c41      	adds	r1, r0, #1
 800d072:	d1c7      	bne.n	800d004 <__sflush_r+0x34>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d0c4      	beq.n	800d004 <__sflush_r+0x34>
 800d07a:	2b1d      	cmp	r3, #29
 800d07c:	d001      	beq.n	800d082 <__sflush_r+0xb2>
 800d07e:	2b16      	cmp	r3, #22
 800d080:	d101      	bne.n	800d086 <__sflush_r+0xb6>
 800d082:	602f      	str	r7, [r5, #0]
 800d084:	e7b1      	b.n	800cfea <__sflush_r+0x1a>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d08c:	81a3      	strh	r3, [r4, #12]
 800d08e:	e7ad      	b.n	800cfec <__sflush_r+0x1c>
 800d090:	690f      	ldr	r7, [r1, #16]
 800d092:	2f00      	cmp	r7, #0
 800d094:	d0a9      	beq.n	800cfea <__sflush_r+0x1a>
 800d096:	0793      	lsls	r3, r2, #30
 800d098:	680e      	ldr	r6, [r1, #0]
 800d09a:	bf08      	it	eq
 800d09c:	694b      	ldreq	r3, [r1, #20]
 800d09e:	600f      	str	r7, [r1, #0]
 800d0a0:	bf18      	it	ne
 800d0a2:	2300      	movne	r3, #0
 800d0a4:	eba6 0807 	sub.w	r8, r6, r7
 800d0a8:	608b      	str	r3, [r1, #8]
 800d0aa:	f1b8 0f00 	cmp.w	r8, #0
 800d0ae:	dd9c      	ble.n	800cfea <__sflush_r+0x1a>
 800d0b0:	6a21      	ldr	r1, [r4, #32]
 800d0b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0b4:	4643      	mov	r3, r8
 800d0b6:	463a      	mov	r2, r7
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b0      	blx	r6
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	dc06      	bgt.n	800d0ce <__sflush_r+0xfe>
 800d0c0:	89a3      	ldrh	r3, [r4, #12]
 800d0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c6:	81a3      	strh	r3, [r4, #12]
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	e78e      	b.n	800cfec <__sflush_r+0x1c>
 800d0ce:	4407      	add	r7, r0
 800d0d0:	eba8 0800 	sub.w	r8, r8, r0
 800d0d4:	e7e9      	b.n	800d0aa <__sflush_r+0xda>
 800d0d6:	bf00      	nop
 800d0d8:	20400001 	.word	0x20400001

0800d0dc <_fflush_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	690b      	ldr	r3, [r1, #16]
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	b913      	cbnz	r3, 800d0ec <_fflush_r+0x10>
 800d0e6:	2500      	movs	r5, #0
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	bd38      	pop	{r3, r4, r5, pc}
 800d0ec:	b118      	cbz	r0, 800d0f6 <_fflush_r+0x1a>
 800d0ee:	6983      	ldr	r3, [r0, #24]
 800d0f0:	b90b      	cbnz	r3, 800d0f6 <_fflush_r+0x1a>
 800d0f2:	f000 f887 	bl	800d204 <__sinit>
 800d0f6:	4b14      	ldr	r3, [pc, #80]	; (800d148 <_fflush_r+0x6c>)
 800d0f8:	429c      	cmp	r4, r3
 800d0fa:	d11b      	bne.n	800d134 <_fflush_r+0x58>
 800d0fc:	686c      	ldr	r4, [r5, #4]
 800d0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d0ef      	beq.n	800d0e6 <_fflush_r+0xa>
 800d106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d108:	07d0      	lsls	r0, r2, #31
 800d10a:	d404      	bmi.n	800d116 <_fflush_r+0x3a>
 800d10c:	0599      	lsls	r1, r3, #22
 800d10e:	d402      	bmi.n	800d116 <_fflush_r+0x3a>
 800d110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d112:	f000 f915 	bl	800d340 <__retarget_lock_acquire_recursive>
 800d116:	4628      	mov	r0, r5
 800d118:	4621      	mov	r1, r4
 800d11a:	f7ff ff59 	bl	800cfd0 <__sflush_r>
 800d11e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d120:	07da      	lsls	r2, r3, #31
 800d122:	4605      	mov	r5, r0
 800d124:	d4e0      	bmi.n	800d0e8 <_fflush_r+0xc>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	059b      	lsls	r3, r3, #22
 800d12a:	d4dd      	bmi.n	800d0e8 <_fflush_r+0xc>
 800d12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d12e:	f000 f908 	bl	800d342 <__retarget_lock_release_recursive>
 800d132:	e7d9      	b.n	800d0e8 <_fflush_r+0xc>
 800d134:	4b05      	ldr	r3, [pc, #20]	; (800d14c <_fflush_r+0x70>)
 800d136:	429c      	cmp	r4, r3
 800d138:	d101      	bne.n	800d13e <_fflush_r+0x62>
 800d13a:	68ac      	ldr	r4, [r5, #8]
 800d13c:	e7df      	b.n	800d0fe <_fflush_r+0x22>
 800d13e:	4b04      	ldr	r3, [pc, #16]	; (800d150 <_fflush_r+0x74>)
 800d140:	429c      	cmp	r4, r3
 800d142:	bf08      	it	eq
 800d144:	68ec      	ldreq	r4, [r5, #12]
 800d146:	e7da      	b.n	800d0fe <_fflush_r+0x22>
 800d148:	0800eec0 	.word	0x0800eec0
 800d14c:	0800eee0 	.word	0x0800eee0
 800d150:	0800eea0 	.word	0x0800eea0

0800d154 <std>:
 800d154:	2300      	movs	r3, #0
 800d156:	b510      	push	{r4, lr}
 800d158:	4604      	mov	r4, r0
 800d15a:	e9c0 3300 	strd	r3, r3, [r0]
 800d15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d162:	6083      	str	r3, [r0, #8]
 800d164:	8181      	strh	r1, [r0, #12]
 800d166:	6643      	str	r3, [r0, #100]	; 0x64
 800d168:	81c2      	strh	r2, [r0, #14]
 800d16a:	6183      	str	r3, [r0, #24]
 800d16c:	4619      	mov	r1, r3
 800d16e:	2208      	movs	r2, #8
 800d170:	305c      	adds	r0, #92	; 0x5c
 800d172:	f7ff fa21 	bl	800c5b8 <memset>
 800d176:	4b05      	ldr	r3, [pc, #20]	; (800d18c <std+0x38>)
 800d178:	6263      	str	r3, [r4, #36]	; 0x24
 800d17a:	4b05      	ldr	r3, [pc, #20]	; (800d190 <std+0x3c>)
 800d17c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d17e:	4b05      	ldr	r3, [pc, #20]	; (800d194 <std+0x40>)
 800d180:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d182:	4b05      	ldr	r3, [pc, #20]	; (800d198 <std+0x44>)
 800d184:	6224      	str	r4, [r4, #32]
 800d186:	6323      	str	r3, [r4, #48]	; 0x30
 800d188:	bd10      	pop	{r4, pc}
 800d18a:	bf00      	nop
 800d18c:	0800dde9 	.word	0x0800dde9
 800d190:	0800de0b 	.word	0x0800de0b
 800d194:	0800de43 	.word	0x0800de43
 800d198:	0800de67 	.word	0x0800de67

0800d19c <_cleanup_r>:
 800d19c:	4901      	ldr	r1, [pc, #4]	; (800d1a4 <_cleanup_r+0x8>)
 800d19e:	f000 b8af 	b.w	800d300 <_fwalk_reent>
 800d1a2:	bf00      	nop
 800d1a4:	0800d0dd 	.word	0x0800d0dd

0800d1a8 <__sfmoreglue>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	2268      	movs	r2, #104	; 0x68
 800d1ac:	1e4d      	subs	r5, r1, #1
 800d1ae:	4355      	muls	r5, r2
 800d1b0:	460e      	mov	r6, r1
 800d1b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d1b6:	f000 fd4f 	bl	800dc58 <_malloc_r>
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	b140      	cbz	r0, 800d1d0 <__sfmoreglue+0x28>
 800d1be:	2100      	movs	r1, #0
 800d1c0:	e9c0 1600 	strd	r1, r6, [r0]
 800d1c4:	300c      	adds	r0, #12
 800d1c6:	60a0      	str	r0, [r4, #8]
 800d1c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1cc:	f7ff f9f4 	bl	800c5b8 <memset>
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	bd70      	pop	{r4, r5, r6, pc}

0800d1d4 <__sfp_lock_acquire>:
 800d1d4:	4801      	ldr	r0, [pc, #4]	; (800d1dc <__sfp_lock_acquire+0x8>)
 800d1d6:	f000 b8b3 	b.w	800d340 <__retarget_lock_acquire_recursive>
 800d1da:	bf00      	nop
 800d1dc:	200006e5 	.word	0x200006e5

0800d1e0 <__sfp_lock_release>:
 800d1e0:	4801      	ldr	r0, [pc, #4]	; (800d1e8 <__sfp_lock_release+0x8>)
 800d1e2:	f000 b8ae 	b.w	800d342 <__retarget_lock_release_recursive>
 800d1e6:	bf00      	nop
 800d1e8:	200006e5 	.word	0x200006e5

0800d1ec <__sinit_lock_acquire>:
 800d1ec:	4801      	ldr	r0, [pc, #4]	; (800d1f4 <__sinit_lock_acquire+0x8>)
 800d1ee:	f000 b8a7 	b.w	800d340 <__retarget_lock_acquire_recursive>
 800d1f2:	bf00      	nop
 800d1f4:	200006e6 	.word	0x200006e6

0800d1f8 <__sinit_lock_release>:
 800d1f8:	4801      	ldr	r0, [pc, #4]	; (800d200 <__sinit_lock_release+0x8>)
 800d1fa:	f000 b8a2 	b.w	800d342 <__retarget_lock_release_recursive>
 800d1fe:	bf00      	nop
 800d200:	200006e6 	.word	0x200006e6

0800d204 <__sinit>:
 800d204:	b510      	push	{r4, lr}
 800d206:	4604      	mov	r4, r0
 800d208:	f7ff fff0 	bl	800d1ec <__sinit_lock_acquire>
 800d20c:	69a3      	ldr	r3, [r4, #24]
 800d20e:	b11b      	cbz	r3, 800d218 <__sinit+0x14>
 800d210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d214:	f7ff bff0 	b.w	800d1f8 <__sinit_lock_release>
 800d218:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d21c:	6523      	str	r3, [r4, #80]	; 0x50
 800d21e:	4b13      	ldr	r3, [pc, #76]	; (800d26c <__sinit+0x68>)
 800d220:	4a13      	ldr	r2, [pc, #76]	; (800d270 <__sinit+0x6c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	62a2      	str	r2, [r4, #40]	; 0x28
 800d226:	42a3      	cmp	r3, r4
 800d228:	bf04      	itt	eq
 800d22a:	2301      	moveq	r3, #1
 800d22c:	61a3      	streq	r3, [r4, #24]
 800d22e:	4620      	mov	r0, r4
 800d230:	f000 f820 	bl	800d274 <__sfp>
 800d234:	6060      	str	r0, [r4, #4]
 800d236:	4620      	mov	r0, r4
 800d238:	f000 f81c 	bl	800d274 <__sfp>
 800d23c:	60a0      	str	r0, [r4, #8]
 800d23e:	4620      	mov	r0, r4
 800d240:	f000 f818 	bl	800d274 <__sfp>
 800d244:	2200      	movs	r2, #0
 800d246:	60e0      	str	r0, [r4, #12]
 800d248:	2104      	movs	r1, #4
 800d24a:	6860      	ldr	r0, [r4, #4]
 800d24c:	f7ff ff82 	bl	800d154 <std>
 800d250:	68a0      	ldr	r0, [r4, #8]
 800d252:	2201      	movs	r2, #1
 800d254:	2109      	movs	r1, #9
 800d256:	f7ff ff7d 	bl	800d154 <std>
 800d25a:	68e0      	ldr	r0, [r4, #12]
 800d25c:	2202      	movs	r2, #2
 800d25e:	2112      	movs	r1, #18
 800d260:	f7ff ff78 	bl	800d154 <std>
 800d264:	2301      	movs	r3, #1
 800d266:	61a3      	str	r3, [r4, #24]
 800d268:	e7d2      	b.n	800d210 <__sinit+0xc>
 800d26a:	bf00      	nop
 800d26c:	0800ee68 	.word	0x0800ee68
 800d270:	0800d19d 	.word	0x0800d19d

0800d274 <__sfp>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	4607      	mov	r7, r0
 800d278:	f7ff ffac 	bl	800d1d4 <__sfp_lock_acquire>
 800d27c:	4b1e      	ldr	r3, [pc, #120]	; (800d2f8 <__sfp+0x84>)
 800d27e:	681e      	ldr	r6, [r3, #0]
 800d280:	69b3      	ldr	r3, [r6, #24]
 800d282:	b913      	cbnz	r3, 800d28a <__sfp+0x16>
 800d284:	4630      	mov	r0, r6
 800d286:	f7ff ffbd 	bl	800d204 <__sinit>
 800d28a:	3648      	adds	r6, #72	; 0x48
 800d28c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d290:	3b01      	subs	r3, #1
 800d292:	d503      	bpl.n	800d29c <__sfp+0x28>
 800d294:	6833      	ldr	r3, [r6, #0]
 800d296:	b30b      	cbz	r3, 800d2dc <__sfp+0x68>
 800d298:	6836      	ldr	r6, [r6, #0]
 800d29a:	e7f7      	b.n	800d28c <__sfp+0x18>
 800d29c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2a0:	b9d5      	cbnz	r5, 800d2d8 <__sfp+0x64>
 800d2a2:	4b16      	ldr	r3, [pc, #88]	; (800d2fc <__sfp+0x88>)
 800d2a4:	60e3      	str	r3, [r4, #12]
 800d2a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2aa:	6665      	str	r5, [r4, #100]	; 0x64
 800d2ac:	f000 f847 	bl	800d33e <__retarget_lock_init_recursive>
 800d2b0:	f7ff ff96 	bl	800d1e0 <__sfp_lock_release>
 800d2b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2bc:	6025      	str	r5, [r4, #0]
 800d2be:	61a5      	str	r5, [r4, #24]
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2c8:	f7ff f976 	bl	800c5b8 <memset>
 800d2cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d8:	3468      	adds	r4, #104	; 0x68
 800d2da:	e7d9      	b.n	800d290 <__sfp+0x1c>
 800d2dc:	2104      	movs	r1, #4
 800d2de:	4638      	mov	r0, r7
 800d2e0:	f7ff ff62 	bl	800d1a8 <__sfmoreglue>
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	6030      	str	r0, [r6, #0]
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d1d5      	bne.n	800d298 <__sfp+0x24>
 800d2ec:	f7ff ff78 	bl	800d1e0 <__sfp_lock_release>
 800d2f0:	230c      	movs	r3, #12
 800d2f2:	603b      	str	r3, [r7, #0]
 800d2f4:	e7ee      	b.n	800d2d4 <__sfp+0x60>
 800d2f6:	bf00      	nop
 800d2f8:	0800ee68 	.word	0x0800ee68
 800d2fc:	ffff0001 	.word	0xffff0001

0800d300 <_fwalk_reent>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	4606      	mov	r6, r0
 800d306:	4688      	mov	r8, r1
 800d308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d30c:	2700      	movs	r7, #0
 800d30e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d312:	f1b9 0901 	subs.w	r9, r9, #1
 800d316:	d505      	bpl.n	800d324 <_fwalk_reent+0x24>
 800d318:	6824      	ldr	r4, [r4, #0]
 800d31a:	2c00      	cmp	r4, #0
 800d31c:	d1f7      	bne.n	800d30e <_fwalk_reent+0xe>
 800d31e:	4638      	mov	r0, r7
 800d320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d324:	89ab      	ldrh	r3, [r5, #12]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d907      	bls.n	800d33a <_fwalk_reent+0x3a>
 800d32a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d32e:	3301      	adds	r3, #1
 800d330:	d003      	beq.n	800d33a <_fwalk_reent+0x3a>
 800d332:	4629      	mov	r1, r5
 800d334:	4630      	mov	r0, r6
 800d336:	47c0      	blx	r8
 800d338:	4307      	orrs	r7, r0
 800d33a:	3568      	adds	r5, #104	; 0x68
 800d33c:	e7e9      	b.n	800d312 <_fwalk_reent+0x12>

0800d33e <__retarget_lock_init_recursive>:
 800d33e:	4770      	bx	lr

0800d340 <__retarget_lock_acquire_recursive>:
 800d340:	4770      	bx	lr

0800d342 <__retarget_lock_release_recursive>:
 800d342:	4770      	bx	lr

0800d344 <__swhatbuf_r>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	460e      	mov	r6, r1
 800d348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d34c:	2900      	cmp	r1, #0
 800d34e:	b096      	sub	sp, #88	; 0x58
 800d350:	4614      	mov	r4, r2
 800d352:	461d      	mov	r5, r3
 800d354:	da08      	bge.n	800d368 <__swhatbuf_r+0x24>
 800d356:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	602a      	str	r2, [r5, #0]
 800d35e:	061a      	lsls	r2, r3, #24
 800d360:	d410      	bmi.n	800d384 <__swhatbuf_r+0x40>
 800d362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d366:	e00e      	b.n	800d386 <__swhatbuf_r+0x42>
 800d368:	466a      	mov	r2, sp
 800d36a:	f001 fc27 	bl	800ebbc <_fstat_r>
 800d36e:	2800      	cmp	r0, #0
 800d370:	dbf1      	blt.n	800d356 <__swhatbuf_r+0x12>
 800d372:	9a01      	ldr	r2, [sp, #4]
 800d374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d37c:	425a      	negs	r2, r3
 800d37e:	415a      	adcs	r2, r3
 800d380:	602a      	str	r2, [r5, #0]
 800d382:	e7ee      	b.n	800d362 <__swhatbuf_r+0x1e>
 800d384:	2340      	movs	r3, #64	; 0x40
 800d386:	2000      	movs	r0, #0
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	b016      	add	sp, #88	; 0x58
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d390 <__smakebuf_r>:
 800d390:	898b      	ldrh	r3, [r1, #12]
 800d392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d394:	079d      	lsls	r5, r3, #30
 800d396:	4606      	mov	r6, r0
 800d398:	460c      	mov	r4, r1
 800d39a:	d507      	bpl.n	800d3ac <__smakebuf_r+0x1c>
 800d39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	6123      	str	r3, [r4, #16]
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	6163      	str	r3, [r4, #20]
 800d3a8:	b002      	add	sp, #8
 800d3aa:	bd70      	pop	{r4, r5, r6, pc}
 800d3ac:	ab01      	add	r3, sp, #4
 800d3ae:	466a      	mov	r2, sp
 800d3b0:	f7ff ffc8 	bl	800d344 <__swhatbuf_r>
 800d3b4:	9900      	ldr	r1, [sp, #0]
 800d3b6:	4605      	mov	r5, r0
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f000 fc4d 	bl	800dc58 <_malloc_r>
 800d3be:	b948      	cbnz	r0, 800d3d4 <__smakebuf_r+0x44>
 800d3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c4:	059a      	lsls	r2, r3, #22
 800d3c6:	d4ef      	bmi.n	800d3a8 <__smakebuf_r+0x18>
 800d3c8:	f023 0303 	bic.w	r3, r3, #3
 800d3cc:	f043 0302 	orr.w	r3, r3, #2
 800d3d0:	81a3      	strh	r3, [r4, #12]
 800d3d2:	e7e3      	b.n	800d39c <__smakebuf_r+0xc>
 800d3d4:	4b0d      	ldr	r3, [pc, #52]	; (800d40c <__smakebuf_r+0x7c>)
 800d3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	6020      	str	r0, [r4, #0]
 800d3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e0:	81a3      	strh	r3, [r4, #12]
 800d3e2:	9b00      	ldr	r3, [sp, #0]
 800d3e4:	6163      	str	r3, [r4, #20]
 800d3e6:	9b01      	ldr	r3, [sp, #4]
 800d3e8:	6120      	str	r0, [r4, #16]
 800d3ea:	b15b      	cbz	r3, 800d404 <__smakebuf_r+0x74>
 800d3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f001 fbf5 	bl	800ebe0 <_isatty_r>
 800d3f6:	b128      	cbz	r0, 800d404 <__smakebuf_r+0x74>
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	f023 0303 	bic.w	r3, r3, #3
 800d3fe:	f043 0301 	orr.w	r3, r3, #1
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	89a0      	ldrh	r0, [r4, #12]
 800d406:	4305      	orrs	r5, r0
 800d408:	81a5      	strh	r5, [r4, #12]
 800d40a:	e7cd      	b.n	800d3a8 <__smakebuf_r+0x18>
 800d40c:	0800d19d 	.word	0x0800d19d

0800d410 <_Balloc>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d414:	4604      	mov	r4, r0
 800d416:	460d      	mov	r5, r1
 800d418:	b976      	cbnz	r6, 800d438 <_Balloc+0x28>
 800d41a:	2010      	movs	r0, #16
 800d41c:	f001 fc02 	bl	800ec24 <malloc>
 800d420:	4602      	mov	r2, r0
 800d422:	6260      	str	r0, [r4, #36]	; 0x24
 800d424:	b920      	cbnz	r0, 800d430 <_Balloc+0x20>
 800d426:	4b18      	ldr	r3, [pc, #96]	; (800d488 <_Balloc+0x78>)
 800d428:	4818      	ldr	r0, [pc, #96]	; (800d48c <_Balloc+0x7c>)
 800d42a:	2166      	movs	r1, #102	; 0x66
 800d42c:	f7ff f838 	bl	800c4a0 <__assert_func>
 800d430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d434:	6006      	str	r6, [r0, #0]
 800d436:	60c6      	str	r6, [r0, #12]
 800d438:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d43a:	68f3      	ldr	r3, [r6, #12]
 800d43c:	b183      	cbz	r3, 800d460 <_Balloc+0x50>
 800d43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d446:	b9b8      	cbnz	r0, 800d478 <_Balloc+0x68>
 800d448:	2101      	movs	r1, #1
 800d44a:	fa01 f605 	lsl.w	r6, r1, r5
 800d44e:	1d72      	adds	r2, r6, #5
 800d450:	0092      	lsls	r2, r2, #2
 800d452:	4620      	mov	r0, r4
 800d454:	f000 fb7e 	bl	800db54 <_calloc_r>
 800d458:	b160      	cbz	r0, 800d474 <_Balloc+0x64>
 800d45a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d45e:	e00e      	b.n	800d47e <_Balloc+0x6e>
 800d460:	2221      	movs	r2, #33	; 0x21
 800d462:	2104      	movs	r1, #4
 800d464:	4620      	mov	r0, r4
 800d466:	f000 fb75 	bl	800db54 <_calloc_r>
 800d46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d46c:	60f0      	str	r0, [r6, #12]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1e4      	bne.n	800d43e <_Balloc+0x2e>
 800d474:	2000      	movs	r0, #0
 800d476:	bd70      	pop	{r4, r5, r6, pc}
 800d478:	6802      	ldr	r2, [r0, #0]
 800d47a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d47e:	2300      	movs	r3, #0
 800d480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d484:	e7f7      	b.n	800d476 <_Balloc+0x66>
 800d486:	bf00      	nop
 800d488:	0800ef00 	.word	0x0800ef00
 800d48c:	0800ef17 	.word	0x0800ef17

0800d490 <_Bfree>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d494:	4605      	mov	r5, r0
 800d496:	460c      	mov	r4, r1
 800d498:	b976      	cbnz	r6, 800d4b8 <_Bfree+0x28>
 800d49a:	2010      	movs	r0, #16
 800d49c:	f001 fbc2 	bl	800ec24 <malloc>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	6268      	str	r0, [r5, #36]	; 0x24
 800d4a4:	b920      	cbnz	r0, 800d4b0 <_Bfree+0x20>
 800d4a6:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <_Bfree+0x3c>)
 800d4a8:	4809      	ldr	r0, [pc, #36]	; (800d4d0 <_Bfree+0x40>)
 800d4aa:	218a      	movs	r1, #138	; 0x8a
 800d4ac:	f7fe fff8 	bl	800c4a0 <__assert_func>
 800d4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4b4:	6006      	str	r6, [r0, #0]
 800d4b6:	60c6      	str	r6, [r0, #12]
 800d4b8:	b13c      	cbz	r4, 800d4ca <_Bfree+0x3a>
 800d4ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4bc:	6862      	ldr	r2, [r4, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4c4:	6021      	str	r1, [r4, #0]
 800d4c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	0800ef00 	.word	0x0800ef00
 800d4d0:	0800ef17 	.word	0x0800ef17

0800d4d4 <__multadd>:
 800d4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d8:	690d      	ldr	r5, [r1, #16]
 800d4da:	4607      	mov	r7, r0
 800d4dc:	460c      	mov	r4, r1
 800d4de:	461e      	mov	r6, r3
 800d4e0:	f101 0c14 	add.w	ip, r1, #20
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	f8dc 3000 	ldr.w	r3, [ip]
 800d4ea:	b299      	uxth	r1, r3
 800d4ec:	fb02 6101 	mla	r1, r2, r1, r6
 800d4f0:	0c1e      	lsrs	r6, r3, #16
 800d4f2:	0c0b      	lsrs	r3, r1, #16
 800d4f4:	fb02 3306 	mla	r3, r2, r6, r3
 800d4f8:	b289      	uxth	r1, r1
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d500:	4285      	cmp	r5, r0
 800d502:	f84c 1b04 	str.w	r1, [ip], #4
 800d506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d50a:	dcec      	bgt.n	800d4e6 <__multadd+0x12>
 800d50c:	b30e      	cbz	r6, 800d552 <__multadd+0x7e>
 800d50e:	68a3      	ldr	r3, [r4, #8]
 800d510:	42ab      	cmp	r3, r5
 800d512:	dc19      	bgt.n	800d548 <__multadd+0x74>
 800d514:	6861      	ldr	r1, [r4, #4]
 800d516:	4638      	mov	r0, r7
 800d518:	3101      	adds	r1, #1
 800d51a:	f7ff ff79 	bl	800d410 <_Balloc>
 800d51e:	4680      	mov	r8, r0
 800d520:	b928      	cbnz	r0, 800d52e <__multadd+0x5a>
 800d522:	4602      	mov	r2, r0
 800d524:	4b0c      	ldr	r3, [pc, #48]	; (800d558 <__multadd+0x84>)
 800d526:	480d      	ldr	r0, [pc, #52]	; (800d55c <__multadd+0x88>)
 800d528:	21b5      	movs	r1, #181	; 0xb5
 800d52a:	f7fe ffb9 	bl	800c4a0 <__assert_func>
 800d52e:	6922      	ldr	r2, [r4, #16]
 800d530:	3202      	adds	r2, #2
 800d532:	f104 010c 	add.w	r1, r4, #12
 800d536:	0092      	lsls	r2, r2, #2
 800d538:	300c      	adds	r0, #12
 800d53a:	f7ff f82f 	bl	800c59c <memcpy>
 800d53e:	4621      	mov	r1, r4
 800d540:	4638      	mov	r0, r7
 800d542:	f7ff ffa5 	bl	800d490 <_Bfree>
 800d546:	4644      	mov	r4, r8
 800d548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d54c:	3501      	adds	r5, #1
 800d54e:	615e      	str	r6, [r3, #20]
 800d550:	6125      	str	r5, [r4, #16]
 800d552:	4620      	mov	r0, r4
 800d554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d558:	0800ef73 	.word	0x0800ef73
 800d55c:	0800ef17 	.word	0x0800ef17

0800d560 <__hi0bits>:
 800d560:	0c03      	lsrs	r3, r0, #16
 800d562:	041b      	lsls	r3, r3, #16
 800d564:	b9d3      	cbnz	r3, 800d59c <__hi0bits+0x3c>
 800d566:	0400      	lsls	r0, r0, #16
 800d568:	2310      	movs	r3, #16
 800d56a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d56e:	bf04      	itt	eq
 800d570:	0200      	lsleq	r0, r0, #8
 800d572:	3308      	addeq	r3, #8
 800d574:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d578:	bf04      	itt	eq
 800d57a:	0100      	lsleq	r0, r0, #4
 800d57c:	3304      	addeq	r3, #4
 800d57e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d582:	bf04      	itt	eq
 800d584:	0080      	lsleq	r0, r0, #2
 800d586:	3302      	addeq	r3, #2
 800d588:	2800      	cmp	r0, #0
 800d58a:	db05      	blt.n	800d598 <__hi0bits+0x38>
 800d58c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d590:	f103 0301 	add.w	r3, r3, #1
 800d594:	bf08      	it	eq
 800d596:	2320      	moveq	r3, #32
 800d598:	4618      	mov	r0, r3
 800d59a:	4770      	bx	lr
 800d59c:	2300      	movs	r3, #0
 800d59e:	e7e4      	b.n	800d56a <__hi0bits+0xa>

0800d5a0 <__lo0bits>:
 800d5a0:	6803      	ldr	r3, [r0, #0]
 800d5a2:	f013 0207 	ands.w	r2, r3, #7
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	d00b      	beq.n	800d5c2 <__lo0bits+0x22>
 800d5aa:	07da      	lsls	r2, r3, #31
 800d5ac:	d423      	bmi.n	800d5f6 <__lo0bits+0x56>
 800d5ae:	0798      	lsls	r0, r3, #30
 800d5b0:	bf49      	itett	mi
 800d5b2:	085b      	lsrmi	r3, r3, #1
 800d5b4:	089b      	lsrpl	r3, r3, #2
 800d5b6:	2001      	movmi	r0, #1
 800d5b8:	600b      	strmi	r3, [r1, #0]
 800d5ba:	bf5c      	itt	pl
 800d5bc:	600b      	strpl	r3, [r1, #0]
 800d5be:	2002      	movpl	r0, #2
 800d5c0:	4770      	bx	lr
 800d5c2:	b298      	uxth	r0, r3
 800d5c4:	b9a8      	cbnz	r0, 800d5f2 <__lo0bits+0x52>
 800d5c6:	0c1b      	lsrs	r3, r3, #16
 800d5c8:	2010      	movs	r0, #16
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	b90a      	cbnz	r2, 800d5d2 <__lo0bits+0x32>
 800d5ce:	3008      	adds	r0, #8
 800d5d0:	0a1b      	lsrs	r3, r3, #8
 800d5d2:	071a      	lsls	r2, r3, #28
 800d5d4:	bf04      	itt	eq
 800d5d6:	091b      	lsreq	r3, r3, #4
 800d5d8:	3004      	addeq	r0, #4
 800d5da:	079a      	lsls	r2, r3, #30
 800d5dc:	bf04      	itt	eq
 800d5de:	089b      	lsreq	r3, r3, #2
 800d5e0:	3002      	addeq	r0, #2
 800d5e2:	07da      	lsls	r2, r3, #31
 800d5e4:	d403      	bmi.n	800d5ee <__lo0bits+0x4e>
 800d5e6:	085b      	lsrs	r3, r3, #1
 800d5e8:	f100 0001 	add.w	r0, r0, #1
 800d5ec:	d005      	beq.n	800d5fa <__lo0bits+0x5a>
 800d5ee:	600b      	str	r3, [r1, #0]
 800d5f0:	4770      	bx	lr
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	e7e9      	b.n	800d5ca <__lo0bits+0x2a>
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	4770      	bx	lr
 800d5fa:	2020      	movs	r0, #32
 800d5fc:	4770      	bx	lr
	...

0800d600 <__i2b>:
 800d600:	b510      	push	{r4, lr}
 800d602:	460c      	mov	r4, r1
 800d604:	2101      	movs	r1, #1
 800d606:	f7ff ff03 	bl	800d410 <_Balloc>
 800d60a:	4602      	mov	r2, r0
 800d60c:	b928      	cbnz	r0, 800d61a <__i2b+0x1a>
 800d60e:	4b05      	ldr	r3, [pc, #20]	; (800d624 <__i2b+0x24>)
 800d610:	4805      	ldr	r0, [pc, #20]	; (800d628 <__i2b+0x28>)
 800d612:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d616:	f7fe ff43 	bl	800c4a0 <__assert_func>
 800d61a:	2301      	movs	r3, #1
 800d61c:	6144      	str	r4, [r0, #20]
 800d61e:	6103      	str	r3, [r0, #16]
 800d620:	bd10      	pop	{r4, pc}
 800d622:	bf00      	nop
 800d624:	0800ef73 	.word	0x0800ef73
 800d628:	0800ef17 	.word	0x0800ef17

0800d62c <__multiply>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	4691      	mov	r9, r2
 800d632:	690a      	ldr	r2, [r1, #16]
 800d634:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d638:	429a      	cmp	r2, r3
 800d63a:	bfb8      	it	lt
 800d63c:	460b      	movlt	r3, r1
 800d63e:	460c      	mov	r4, r1
 800d640:	bfbc      	itt	lt
 800d642:	464c      	movlt	r4, r9
 800d644:	4699      	movlt	r9, r3
 800d646:	6927      	ldr	r7, [r4, #16]
 800d648:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d64c:	68a3      	ldr	r3, [r4, #8]
 800d64e:	6861      	ldr	r1, [r4, #4]
 800d650:	eb07 060a 	add.w	r6, r7, sl
 800d654:	42b3      	cmp	r3, r6
 800d656:	b085      	sub	sp, #20
 800d658:	bfb8      	it	lt
 800d65a:	3101      	addlt	r1, #1
 800d65c:	f7ff fed8 	bl	800d410 <_Balloc>
 800d660:	b930      	cbnz	r0, 800d670 <__multiply+0x44>
 800d662:	4602      	mov	r2, r0
 800d664:	4b44      	ldr	r3, [pc, #272]	; (800d778 <__multiply+0x14c>)
 800d666:	4845      	ldr	r0, [pc, #276]	; (800d77c <__multiply+0x150>)
 800d668:	f240 115d 	movw	r1, #349	; 0x15d
 800d66c:	f7fe ff18 	bl	800c4a0 <__assert_func>
 800d670:	f100 0514 	add.w	r5, r0, #20
 800d674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d678:	462b      	mov	r3, r5
 800d67a:	2200      	movs	r2, #0
 800d67c:	4543      	cmp	r3, r8
 800d67e:	d321      	bcc.n	800d6c4 <__multiply+0x98>
 800d680:	f104 0314 	add.w	r3, r4, #20
 800d684:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d688:	f109 0314 	add.w	r3, r9, #20
 800d68c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d690:	9202      	str	r2, [sp, #8]
 800d692:	1b3a      	subs	r2, r7, r4
 800d694:	3a15      	subs	r2, #21
 800d696:	f022 0203 	bic.w	r2, r2, #3
 800d69a:	3204      	adds	r2, #4
 800d69c:	f104 0115 	add.w	r1, r4, #21
 800d6a0:	428f      	cmp	r7, r1
 800d6a2:	bf38      	it	cc
 800d6a4:	2204      	movcc	r2, #4
 800d6a6:	9201      	str	r2, [sp, #4]
 800d6a8:	9a02      	ldr	r2, [sp, #8]
 800d6aa:	9303      	str	r3, [sp, #12]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d80c      	bhi.n	800d6ca <__multiply+0x9e>
 800d6b0:	2e00      	cmp	r6, #0
 800d6b2:	dd03      	ble.n	800d6bc <__multiply+0x90>
 800d6b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d05a      	beq.n	800d772 <__multiply+0x146>
 800d6bc:	6106      	str	r6, [r0, #16]
 800d6be:	b005      	add	sp, #20
 800d6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c4:	f843 2b04 	str.w	r2, [r3], #4
 800d6c8:	e7d8      	b.n	800d67c <__multiply+0x50>
 800d6ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6ce:	f1ba 0f00 	cmp.w	sl, #0
 800d6d2:	d024      	beq.n	800d71e <__multiply+0xf2>
 800d6d4:	f104 0e14 	add.w	lr, r4, #20
 800d6d8:	46a9      	mov	r9, r5
 800d6da:	f04f 0c00 	mov.w	ip, #0
 800d6de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6e2:	f8d9 1000 	ldr.w	r1, [r9]
 800d6e6:	fa1f fb82 	uxth.w	fp, r2
 800d6ea:	b289      	uxth	r1, r1
 800d6ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6f4:	f8d9 2000 	ldr.w	r2, [r9]
 800d6f8:	4461      	add	r1, ip
 800d6fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800d702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d706:	b289      	uxth	r1, r1
 800d708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d70c:	4577      	cmp	r7, lr
 800d70e:	f849 1b04 	str.w	r1, [r9], #4
 800d712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d716:	d8e2      	bhi.n	800d6de <__multiply+0xb2>
 800d718:	9a01      	ldr	r2, [sp, #4]
 800d71a:	f845 c002 	str.w	ip, [r5, r2]
 800d71e:	9a03      	ldr	r2, [sp, #12]
 800d720:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d724:	3304      	adds	r3, #4
 800d726:	f1b9 0f00 	cmp.w	r9, #0
 800d72a:	d020      	beq.n	800d76e <__multiply+0x142>
 800d72c:	6829      	ldr	r1, [r5, #0]
 800d72e:	f104 0c14 	add.w	ip, r4, #20
 800d732:	46ae      	mov	lr, r5
 800d734:	f04f 0a00 	mov.w	sl, #0
 800d738:	f8bc b000 	ldrh.w	fp, [ip]
 800d73c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d740:	fb09 220b 	mla	r2, r9, fp, r2
 800d744:	4492      	add	sl, r2
 800d746:	b289      	uxth	r1, r1
 800d748:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d74c:	f84e 1b04 	str.w	r1, [lr], #4
 800d750:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d754:	f8be 1000 	ldrh.w	r1, [lr]
 800d758:	0c12      	lsrs	r2, r2, #16
 800d75a:	fb09 1102 	mla	r1, r9, r2, r1
 800d75e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d762:	4567      	cmp	r7, ip
 800d764:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d768:	d8e6      	bhi.n	800d738 <__multiply+0x10c>
 800d76a:	9a01      	ldr	r2, [sp, #4]
 800d76c:	50a9      	str	r1, [r5, r2]
 800d76e:	3504      	adds	r5, #4
 800d770:	e79a      	b.n	800d6a8 <__multiply+0x7c>
 800d772:	3e01      	subs	r6, #1
 800d774:	e79c      	b.n	800d6b0 <__multiply+0x84>
 800d776:	bf00      	nop
 800d778:	0800ef73 	.word	0x0800ef73
 800d77c:	0800ef17 	.word	0x0800ef17

0800d780 <__pow5mult>:
 800d780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d784:	4615      	mov	r5, r2
 800d786:	f012 0203 	ands.w	r2, r2, #3
 800d78a:	4606      	mov	r6, r0
 800d78c:	460f      	mov	r7, r1
 800d78e:	d007      	beq.n	800d7a0 <__pow5mult+0x20>
 800d790:	4c25      	ldr	r4, [pc, #148]	; (800d828 <__pow5mult+0xa8>)
 800d792:	3a01      	subs	r2, #1
 800d794:	2300      	movs	r3, #0
 800d796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d79a:	f7ff fe9b 	bl	800d4d4 <__multadd>
 800d79e:	4607      	mov	r7, r0
 800d7a0:	10ad      	asrs	r5, r5, #2
 800d7a2:	d03d      	beq.n	800d820 <__pow5mult+0xa0>
 800d7a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7a6:	b97c      	cbnz	r4, 800d7c8 <__pow5mult+0x48>
 800d7a8:	2010      	movs	r0, #16
 800d7aa:	f001 fa3b 	bl	800ec24 <malloc>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	6270      	str	r0, [r6, #36]	; 0x24
 800d7b2:	b928      	cbnz	r0, 800d7c0 <__pow5mult+0x40>
 800d7b4:	4b1d      	ldr	r3, [pc, #116]	; (800d82c <__pow5mult+0xac>)
 800d7b6:	481e      	ldr	r0, [pc, #120]	; (800d830 <__pow5mult+0xb0>)
 800d7b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d7bc:	f7fe fe70 	bl	800c4a0 <__assert_func>
 800d7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7c4:	6004      	str	r4, [r0, #0]
 800d7c6:	60c4      	str	r4, [r0, #12]
 800d7c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7d0:	b94c      	cbnz	r4, 800d7e6 <__pow5mult+0x66>
 800d7d2:	f240 2171 	movw	r1, #625	; 0x271
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7ff ff12 	bl	800d600 <__i2b>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	f04f 0900 	mov.w	r9, #0
 800d7ea:	07eb      	lsls	r3, r5, #31
 800d7ec:	d50a      	bpl.n	800d804 <__pow5mult+0x84>
 800d7ee:	4639      	mov	r1, r7
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7ff ff1a 	bl	800d62c <__multiply>
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	4680      	mov	r8, r0
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f7ff fe47 	bl	800d490 <_Bfree>
 800d802:	4647      	mov	r7, r8
 800d804:	106d      	asrs	r5, r5, #1
 800d806:	d00b      	beq.n	800d820 <__pow5mult+0xa0>
 800d808:	6820      	ldr	r0, [r4, #0]
 800d80a:	b938      	cbnz	r0, 800d81c <__pow5mult+0x9c>
 800d80c:	4622      	mov	r2, r4
 800d80e:	4621      	mov	r1, r4
 800d810:	4630      	mov	r0, r6
 800d812:	f7ff ff0b 	bl	800d62c <__multiply>
 800d816:	6020      	str	r0, [r4, #0]
 800d818:	f8c0 9000 	str.w	r9, [r0]
 800d81c:	4604      	mov	r4, r0
 800d81e:	e7e4      	b.n	800d7ea <__pow5mult+0x6a>
 800d820:	4638      	mov	r0, r7
 800d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d826:	bf00      	nop
 800d828:	0800f078 	.word	0x0800f078
 800d82c:	0800ef00 	.word	0x0800ef00
 800d830:	0800ef17 	.word	0x0800ef17

0800d834 <__lshift>:
 800d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d838:	460c      	mov	r4, r1
 800d83a:	6849      	ldr	r1, [r1, #4]
 800d83c:	6923      	ldr	r3, [r4, #16]
 800d83e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d842:	68a3      	ldr	r3, [r4, #8]
 800d844:	4607      	mov	r7, r0
 800d846:	4691      	mov	r9, r2
 800d848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d84c:	f108 0601 	add.w	r6, r8, #1
 800d850:	42b3      	cmp	r3, r6
 800d852:	db0b      	blt.n	800d86c <__lshift+0x38>
 800d854:	4638      	mov	r0, r7
 800d856:	f7ff fddb 	bl	800d410 <_Balloc>
 800d85a:	4605      	mov	r5, r0
 800d85c:	b948      	cbnz	r0, 800d872 <__lshift+0x3e>
 800d85e:	4602      	mov	r2, r0
 800d860:	4b2a      	ldr	r3, [pc, #168]	; (800d90c <__lshift+0xd8>)
 800d862:	482b      	ldr	r0, [pc, #172]	; (800d910 <__lshift+0xdc>)
 800d864:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d868:	f7fe fe1a 	bl	800c4a0 <__assert_func>
 800d86c:	3101      	adds	r1, #1
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	e7ee      	b.n	800d850 <__lshift+0x1c>
 800d872:	2300      	movs	r3, #0
 800d874:	f100 0114 	add.w	r1, r0, #20
 800d878:	f100 0210 	add.w	r2, r0, #16
 800d87c:	4618      	mov	r0, r3
 800d87e:	4553      	cmp	r3, sl
 800d880:	db37      	blt.n	800d8f2 <__lshift+0xbe>
 800d882:	6920      	ldr	r0, [r4, #16]
 800d884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d888:	f104 0314 	add.w	r3, r4, #20
 800d88c:	f019 091f 	ands.w	r9, r9, #31
 800d890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d894:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d898:	d02f      	beq.n	800d8fa <__lshift+0xc6>
 800d89a:	f1c9 0e20 	rsb	lr, r9, #32
 800d89e:	468a      	mov	sl, r1
 800d8a0:	f04f 0c00 	mov.w	ip, #0
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	fa02 f209 	lsl.w	r2, r2, r9
 800d8aa:	ea42 020c 	orr.w	r2, r2, ip
 800d8ae:	f84a 2b04 	str.w	r2, [sl], #4
 800d8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b6:	4298      	cmp	r0, r3
 800d8b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d8bc:	d8f2      	bhi.n	800d8a4 <__lshift+0x70>
 800d8be:	1b03      	subs	r3, r0, r4
 800d8c0:	3b15      	subs	r3, #21
 800d8c2:	f023 0303 	bic.w	r3, r3, #3
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	f104 0215 	add.w	r2, r4, #21
 800d8cc:	4290      	cmp	r0, r2
 800d8ce:	bf38      	it	cc
 800d8d0:	2304      	movcc	r3, #4
 800d8d2:	f841 c003 	str.w	ip, [r1, r3]
 800d8d6:	f1bc 0f00 	cmp.w	ip, #0
 800d8da:	d001      	beq.n	800d8e0 <__lshift+0xac>
 800d8dc:	f108 0602 	add.w	r6, r8, #2
 800d8e0:	3e01      	subs	r6, #1
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	612e      	str	r6, [r5, #16]
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	f7ff fdd2 	bl	800d490 <_Bfree>
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	e7c1      	b.n	800d87e <__lshift+0x4a>
 800d8fa:	3904      	subs	r1, #4
 800d8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d900:	f841 2f04 	str.w	r2, [r1, #4]!
 800d904:	4298      	cmp	r0, r3
 800d906:	d8f9      	bhi.n	800d8fc <__lshift+0xc8>
 800d908:	e7ea      	b.n	800d8e0 <__lshift+0xac>
 800d90a:	bf00      	nop
 800d90c:	0800ef73 	.word	0x0800ef73
 800d910:	0800ef17 	.word	0x0800ef17

0800d914 <__mcmp>:
 800d914:	b530      	push	{r4, r5, lr}
 800d916:	6902      	ldr	r2, [r0, #16]
 800d918:	690c      	ldr	r4, [r1, #16]
 800d91a:	1b12      	subs	r2, r2, r4
 800d91c:	d10e      	bne.n	800d93c <__mcmp+0x28>
 800d91e:	f100 0314 	add.w	r3, r0, #20
 800d922:	3114      	adds	r1, #20
 800d924:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d928:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d92c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d930:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d934:	42a5      	cmp	r5, r4
 800d936:	d003      	beq.n	800d940 <__mcmp+0x2c>
 800d938:	d305      	bcc.n	800d946 <__mcmp+0x32>
 800d93a:	2201      	movs	r2, #1
 800d93c:	4610      	mov	r0, r2
 800d93e:	bd30      	pop	{r4, r5, pc}
 800d940:	4283      	cmp	r3, r0
 800d942:	d3f3      	bcc.n	800d92c <__mcmp+0x18>
 800d944:	e7fa      	b.n	800d93c <__mcmp+0x28>
 800d946:	f04f 32ff 	mov.w	r2, #4294967295
 800d94a:	e7f7      	b.n	800d93c <__mcmp+0x28>

0800d94c <__mdiff>:
 800d94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	460c      	mov	r4, r1
 800d952:	4606      	mov	r6, r0
 800d954:	4611      	mov	r1, r2
 800d956:	4620      	mov	r0, r4
 800d958:	4690      	mov	r8, r2
 800d95a:	f7ff ffdb 	bl	800d914 <__mcmp>
 800d95e:	1e05      	subs	r5, r0, #0
 800d960:	d110      	bne.n	800d984 <__mdiff+0x38>
 800d962:	4629      	mov	r1, r5
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff fd53 	bl	800d410 <_Balloc>
 800d96a:	b930      	cbnz	r0, 800d97a <__mdiff+0x2e>
 800d96c:	4b3a      	ldr	r3, [pc, #232]	; (800da58 <__mdiff+0x10c>)
 800d96e:	4602      	mov	r2, r0
 800d970:	f240 2132 	movw	r1, #562	; 0x232
 800d974:	4839      	ldr	r0, [pc, #228]	; (800da5c <__mdiff+0x110>)
 800d976:	f7fe fd93 	bl	800c4a0 <__assert_func>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d984:	bfa4      	itt	ge
 800d986:	4643      	movge	r3, r8
 800d988:	46a0      	movge	r8, r4
 800d98a:	4630      	mov	r0, r6
 800d98c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d990:	bfa6      	itte	ge
 800d992:	461c      	movge	r4, r3
 800d994:	2500      	movge	r5, #0
 800d996:	2501      	movlt	r5, #1
 800d998:	f7ff fd3a 	bl	800d410 <_Balloc>
 800d99c:	b920      	cbnz	r0, 800d9a8 <__mdiff+0x5c>
 800d99e:	4b2e      	ldr	r3, [pc, #184]	; (800da58 <__mdiff+0x10c>)
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9a6:	e7e5      	b.n	800d974 <__mdiff+0x28>
 800d9a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d9ac:	6926      	ldr	r6, [r4, #16]
 800d9ae:	60c5      	str	r5, [r0, #12]
 800d9b0:	f104 0914 	add.w	r9, r4, #20
 800d9b4:	f108 0514 	add.w	r5, r8, #20
 800d9b8:	f100 0e14 	add.w	lr, r0, #20
 800d9bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9c4:	f108 0210 	add.w	r2, r8, #16
 800d9c8:	46f2      	mov	sl, lr
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9d4:	fa1f f883 	uxth.w	r8, r3
 800d9d8:	fa11 f18b 	uxtah	r1, r1, fp
 800d9dc:	0c1b      	lsrs	r3, r3, #16
 800d9de:	eba1 0808 	sub.w	r8, r1, r8
 800d9e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9ea:	fa1f f888 	uxth.w	r8, r8
 800d9ee:	1419      	asrs	r1, r3, #16
 800d9f0:	454e      	cmp	r6, r9
 800d9f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9f6:	f84a 3b04 	str.w	r3, [sl], #4
 800d9fa:	d8e7      	bhi.n	800d9cc <__mdiff+0x80>
 800d9fc:	1b33      	subs	r3, r6, r4
 800d9fe:	3b15      	subs	r3, #21
 800da00:	f023 0303 	bic.w	r3, r3, #3
 800da04:	3304      	adds	r3, #4
 800da06:	3415      	adds	r4, #21
 800da08:	42a6      	cmp	r6, r4
 800da0a:	bf38      	it	cc
 800da0c:	2304      	movcc	r3, #4
 800da0e:	441d      	add	r5, r3
 800da10:	4473      	add	r3, lr
 800da12:	469e      	mov	lr, r3
 800da14:	462e      	mov	r6, r5
 800da16:	4566      	cmp	r6, ip
 800da18:	d30e      	bcc.n	800da38 <__mdiff+0xec>
 800da1a:	f10c 0203 	add.w	r2, ip, #3
 800da1e:	1b52      	subs	r2, r2, r5
 800da20:	f022 0203 	bic.w	r2, r2, #3
 800da24:	3d03      	subs	r5, #3
 800da26:	45ac      	cmp	ip, r5
 800da28:	bf38      	it	cc
 800da2a:	2200      	movcc	r2, #0
 800da2c:	441a      	add	r2, r3
 800da2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da32:	b17b      	cbz	r3, 800da54 <__mdiff+0x108>
 800da34:	6107      	str	r7, [r0, #16]
 800da36:	e7a3      	b.n	800d980 <__mdiff+0x34>
 800da38:	f856 8b04 	ldr.w	r8, [r6], #4
 800da3c:	fa11 f288 	uxtah	r2, r1, r8
 800da40:	1414      	asrs	r4, r2, #16
 800da42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da46:	b292      	uxth	r2, r2
 800da48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da4c:	f84e 2b04 	str.w	r2, [lr], #4
 800da50:	1421      	asrs	r1, r4, #16
 800da52:	e7e0      	b.n	800da16 <__mdiff+0xca>
 800da54:	3f01      	subs	r7, #1
 800da56:	e7ea      	b.n	800da2e <__mdiff+0xe2>
 800da58:	0800ef73 	.word	0x0800ef73
 800da5c:	0800ef17 	.word	0x0800ef17

0800da60 <__d2b>:
 800da60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da64:	4689      	mov	r9, r1
 800da66:	2101      	movs	r1, #1
 800da68:	ec57 6b10 	vmov	r6, r7, d0
 800da6c:	4690      	mov	r8, r2
 800da6e:	f7ff fccf 	bl	800d410 <_Balloc>
 800da72:	4604      	mov	r4, r0
 800da74:	b930      	cbnz	r0, 800da84 <__d2b+0x24>
 800da76:	4602      	mov	r2, r0
 800da78:	4b25      	ldr	r3, [pc, #148]	; (800db10 <__d2b+0xb0>)
 800da7a:	4826      	ldr	r0, [pc, #152]	; (800db14 <__d2b+0xb4>)
 800da7c:	f240 310a 	movw	r1, #778	; 0x30a
 800da80:	f7fe fd0e 	bl	800c4a0 <__assert_func>
 800da84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da8c:	bb35      	cbnz	r5, 800dadc <__d2b+0x7c>
 800da8e:	2e00      	cmp	r6, #0
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	d028      	beq.n	800dae6 <__d2b+0x86>
 800da94:	4668      	mov	r0, sp
 800da96:	9600      	str	r6, [sp, #0]
 800da98:	f7ff fd82 	bl	800d5a0 <__lo0bits>
 800da9c:	9900      	ldr	r1, [sp, #0]
 800da9e:	b300      	cbz	r0, 800dae2 <__d2b+0x82>
 800daa0:	9a01      	ldr	r2, [sp, #4]
 800daa2:	f1c0 0320 	rsb	r3, r0, #32
 800daa6:	fa02 f303 	lsl.w	r3, r2, r3
 800daaa:	430b      	orrs	r3, r1
 800daac:	40c2      	lsrs	r2, r0
 800daae:	6163      	str	r3, [r4, #20]
 800dab0:	9201      	str	r2, [sp, #4]
 800dab2:	9b01      	ldr	r3, [sp, #4]
 800dab4:	61a3      	str	r3, [r4, #24]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	bf14      	ite	ne
 800daba:	2202      	movne	r2, #2
 800dabc:	2201      	moveq	r2, #1
 800dabe:	6122      	str	r2, [r4, #16]
 800dac0:	b1d5      	cbz	r5, 800daf8 <__d2b+0x98>
 800dac2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dac6:	4405      	add	r5, r0
 800dac8:	f8c9 5000 	str.w	r5, [r9]
 800dacc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dad0:	f8c8 0000 	str.w	r0, [r8]
 800dad4:	4620      	mov	r0, r4
 800dad6:	b003      	add	sp, #12
 800dad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dadc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dae0:	e7d5      	b.n	800da8e <__d2b+0x2e>
 800dae2:	6161      	str	r1, [r4, #20]
 800dae4:	e7e5      	b.n	800dab2 <__d2b+0x52>
 800dae6:	a801      	add	r0, sp, #4
 800dae8:	f7ff fd5a 	bl	800d5a0 <__lo0bits>
 800daec:	9b01      	ldr	r3, [sp, #4]
 800daee:	6163      	str	r3, [r4, #20]
 800daf0:	2201      	movs	r2, #1
 800daf2:	6122      	str	r2, [r4, #16]
 800daf4:	3020      	adds	r0, #32
 800daf6:	e7e3      	b.n	800dac0 <__d2b+0x60>
 800daf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dafc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db00:	f8c9 0000 	str.w	r0, [r9]
 800db04:	6918      	ldr	r0, [r3, #16]
 800db06:	f7ff fd2b 	bl	800d560 <__hi0bits>
 800db0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db0e:	e7df      	b.n	800dad0 <__d2b+0x70>
 800db10:	0800ef73 	.word	0x0800ef73
 800db14:	0800ef17 	.word	0x0800ef17

0800db18 <_mprec_log10>:
 800db18:	2817      	cmp	r0, #23
 800db1a:	b5d0      	push	{r4, r6, r7, lr}
 800db1c:	4604      	mov	r4, r0
 800db1e:	dc07      	bgt.n	800db30 <_mprec_log10+0x18>
 800db20:	4809      	ldr	r0, [pc, #36]	; (800db48 <_mprec_log10+0x30>)
 800db22:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800db26:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db2a:	ec41 0b10 	vmov	d0, r0, r1
 800db2e:	bdd0      	pop	{r4, r6, r7, pc}
 800db30:	4906      	ldr	r1, [pc, #24]	; (800db4c <_mprec_log10+0x34>)
 800db32:	4f07      	ldr	r7, [pc, #28]	; (800db50 <_mprec_log10+0x38>)
 800db34:	2000      	movs	r0, #0
 800db36:	2600      	movs	r6, #0
 800db38:	4632      	mov	r2, r6
 800db3a:	463b      	mov	r3, r7
 800db3c:	f7f2 fd5c 	bl	80005f8 <__aeabi_dmul>
 800db40:	3c01      	subs	r4, #1
 800db42:	d1f9      	bne.n	800db38 <_mprec_log10+0x20>
 800db44:	e7f1      	b.n	800db2a <_mprec_log10+0x12>
 800db46:	bf00      	nop
 800db48:	0800efb0 	.word	0x0800efb0
 800db4c:	3ff00000 	.word	0x3ff00000
 800db50:	40240000 	.word	0x40240000

0800db54 <_calloc_r>:
 800db54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db56:	fba1 2402 	umull	r2, r4, r1, r2
 800db5a:	b94c      	cbnz	r4, 800db70 <_calloc_r+0x1c>
 800db5c:	4611      	mov	r1, r2
 800db5e:	9201      	str	r2, [sp, #4]
 800db60:	f000 f87a 	bl	800dc58 <_malloc_r>
 800db64:	9a01      	ldr	r2, [sp, #4]
 800db66:	4605      	mov	r5, r0
 800db68:	b930      	cbnz	r0, 800db78 <_calloc_r+0x24>
 800db6a:	4628      	mov	r0, r5
 800db6c:	b003      	add	sp, #12
 800db6e:	bd30      	pop	{r4, r5, pc}
 800db70:	220c      	movs	r2, #12
 800db72:	6002      	str	r2, [r0, #0]
 800db74:	2500      	movs	r5, #0
 800db76:	e7f8      	b.n	800db6a <_calloc_r+0x16>
 800db78:	4621      	mov	r1, r4
 800db7a:	f7fe fd1d 	bl	800c5b8 <memset>
 800db7e:	e7f4      	b.n	800db6a <_calloc_r+0x16>

0800db80 <_free_r>:
 800db80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db82:	2900      	cmp	r1, #0
 800db84:	d044      	beq.n	800dc10 <_free_r+0x90>
 800db86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db8a:	9001      	str	r0, [sp, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f1a1 0404 	sub.w	r4, r1, #4
 800db92:	bfb8      	it	lt
 800db94:	18e4      	addlt	r4, r4, r3
 800db96:	f001 f84d 	bl	800ec34 <__malloc_lock>
 800db9a:	4a1e      	ldr	r2, [pc, #120]	; (800dc14 <_free_r+0x94>)
 800db9c:	9801      	ldr	r0, [sp, #4]
 800db9e:	6813      	ldr	r3, [r2, #0]
 800dba0:	b933      	cbnz	r3, 800dbb0 <_free_r+0x30>
 800dba2:	6063      	str	r3, [r4, #4]
 800dba4:	6014      	str	r4, [r2, #0]
 800dba6:	b003      	add	sp, #12
 800dba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbac:	f001 b848 	b.w	800ec40 <__malloc_unlock>
 800dbb0:	42a3      	cmp	r3, r4
 800dbb2:	d908      	bls.n	800dbc6 <_free_r+0x46>
 800dbb4:	6825      	ldr	r5, [r4, #0]
 800dbb6:	1961      	adds	r1, r4, r5
 800dbb8:	428b      	cmp	r3, r1
 800dbba:	bf01      	itttt	eq
 800dbbc:	6819      	ldreq	r1, [r3, #0]
 800dbbe:	685b      	ldreq	r3, [r3, #4]
 800dbc0:	1949      	addeq	r1, r1, r5
 800dbc2:	6021      	streq	r1, [r4, #0]
 800dbc4:	e7ed      	b.n	800dba2 <_free_r+0x22>
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	b10b      	cbz	r3, 800dbd0 <_free_r+0x50>
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	d9fa      	bls.n	800dbc6 <_free_r+0x46>
 800dbd0:	6811      	ldr	r1, [r2, #0]
 800dbd2:	1855      	adds	r5, r2, r1
 800dbd4:	42a5      	cmp	r5, r4
 800dbd6:	d10b      	bne.n	800dbf0 <_free_r+0x70>
 800dbd8:	6824      	ldr	r4, [r4, #0]
 800dbda:	4421      	add	r1, r4
 800dbdc:	1854      	adds	r4, r2, r1
 800dbde:	42a3      	cmp	r3, r4
 800dbe0:	6011      	str	r1, [r2, #0]
 800dbe2:	d1e0      	bne.n	800dba6 <_free_r+0x26>
 800dbe4:	681c      	ldr	r4, [r3, #0]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	6053      	str	r3, [r2, #4]
 800dbea:	4421      	add	r1, r4
 800dbec:	6011      	str	r1, [r2, #0]
 800dbee:	e7da      	b.n	800dba6 <_free_r+0x26>
 800dbf0:	d902      	bls.n	800dbf8 <_free_r+0x78>
 800dbf2:	230c      	movs	r3, #12
 800dbf4:	6003      	str	r3, [r0, #0]
 800dbf6:	e7d6      	b.n	800dba6 <_free_r+0x26>
 800dbf8:	6825      	ldr	r5, [r4, #0]
 800dbfa:	1961      	adds	r1, r4, r5
 800dbfc:	428b      	cmp	r3, r1
 800dbfe:	bf04      	itt	eq
 800dc00:	6819      	ldreq	r1, [r3, #0]
 800dc02:	685b      	ldreq	r3, [r3, #4]
 800dc04:	6063      	str	r3, [r4, #4]
 800dc06:	bf04      	itt	eq
 800dc08:	1949      	addeq	r1, r1, r5
 800dc0a:	6021      	streq	r1, [r4, #0]
 800dc0c:	6054      	str	r4, [r2, #4]
 800dc0e:	e7ca      	b.n	800dba6 <_free_r+0x26>
 800dc10:	b003      	add	sp, #12
 800dc12:	bd30      	pop	{r4, r5, pc}
 800dc14:	200006e8 	.word	0x200006e8

0800dc18 <sbrk_aligned>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	4e0e      	ldr	r6, [pc, #56]	; (800dc54 <sbrk_aligned+0x3c>)
 800dc1c:	460c      	mov	r4, r1
 800dc1e:	6831      	ldr	r1, [r6, #0]
 800dc20:	4605      	mov	r5, r0
 800dc22:	b911      	cbnz	r1, 800dc2a <sbrk_aligned+0x12>
 800dc24:	f000 f88c 	bl	800dd40 <_sbrk_r>
 800dc28:	6030      	str	r0, [r6, #0]
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	f000 f887 	bl	800dd40 <_sbrk_r>
 800dc32:	1c43      	adds	r3, r0, #1
 800dc34:	d00a      	beq.n	800dc4c <sbrk_aligned+0x34>
 800dc36:	1cc4      	adds	r4, r0, #3
 800dc38:	f024 0403 	bic.w	r4, r4, #3
 800dc3c:	42a0      	cmp	r0, r4
 800dc3e:	d007      	beq.n	800dc50 <sbrk_aligned+0x38>
 800dc40:	1a21      	subs	r1, r4, r0
 800dc42:	4628      	mov	r0, r5
 800dc44:	f000 f87c 	bl	800dd40 <_sbrk_r>
 800dc48:	3001      	adds	r0, #1
 800dc4a:	d101      	bne.n	800dc50 <sbrk_aligned+0x38>
 800dc4c:	f04f 34ff 	mov.w	r4, #4294967295
 800dc50:	4620      	mov	r0, r4
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	200006ec 	.word	0x200006ec

0800dc58 <_malloc_r>:
 800dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5c:	1ccd      	adds	r5, r1, #3
 800dc5e:	f025 0503 	bic.w	r5, r5, #3
 800dc62:	3508      	adds	r5, #8
 800dc64:	2d0c      	cmp	r5, #12
 800dc66:	bf38      	it	cc
 800dc68:	250c      	movcc	r5, #12
 800dc6a:	2d00      	cmp	r5, #0
 800dc6c:	4607      	mov	r7, r0
 800dc6e:	db01      	blt.n	800dc74 <_malloc_r+0x1c>
 800dc70:	42a9      	cmp	r1, r5
 800dc72:	d905      	bls.n	800dc80 <_malloc_r+0x28>
 800dc74:	230c      	movs	r3, #12
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	2600      	movs	r6, #0
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc80:	4e2e      	ldr	r6, [pc, #184]	; (800dd3c <_malloc_r+0xe4>)
 800dc82:	f000 ffd7 	bl	800ec34 <__malloc_lock>
 800dc86:	6833      	ldr	r3, [r6, #0]
 800dc88:	461c      	mov	r4, r3
 800dc8a:	bb34      	cbnz	r4, 800dcda <_malloc_r+0x82>
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4638      	mov	r0, r7
 800dc90:	f7ff ffc2 	bl	800dc18 <sbrk_aligned>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	4604      	mov	r4, r0
 800dc98:	d14d      	bne.n	800dd36 <_malloc_r+0xde>
 800dc9a:	6834      	ldr	r4, [r6, #0]
 800dc9c:	4626      	mov	r6, r4
 800dc9e:	2e00      	cmp	r6, #0
 800dca0:	d140      	bne.n	800dd24 <_malloc_r+0xcc>
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	4631      	mov	r1, r6
 800dca6:	4638      	mov	r0, r7
 800dca8:	eb04 0803 	add.w	r8, r4, r3
 800dcac:	f000 f848 	bl	800dd40 <_sbrk_r>
 800dcb0:	4580      	cmp	r8, r0
 800dcb2:	d13a      	bne.n	800dd2a <_malloc_r+0xd2>
 800dcb4:	6821      	ldr	r1, [r4, #0]
 800dcb6:	3503      	adds	r5, #3
 800dcb8:	1a6d      	subs	r5, r5, r1
 800dcba:	f025 0503 	bic.w	r5, r5, #3
 800dcbe:	3508      	adds	r5, #8
 800dcc0:	2d0c      	cmp	r5, #12
 800dcc2:	bf38      	it	cc
 800dcc4:	250c      	movcc	r5, #12
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f7ff ffa5 	bl	800dc18 <sbrk_aligned>
 800dcce:	3001      	adds	r0, #1
 800dcd0:	d02b      	beq.n	800dd2a <_malloc_r+0xd2>
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	442b      	add	r3, r5
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	e00e      	b.n	800dcf8 <_malloc_r+0xa0>
 800dcda:	6822      	ldr	r2, [r4, #0]
 800dcdc:	1b52      	subs	r2, r2, r5
 800dcde:	d41e      	bmi.n	800dd1e <_malloc_r+0xc6>
 800dce0:	2a0b      	cmp	r2, #11
 800dce2:	d916      	bls.n	800dd12 <_malloc_r+0xba>
 800dce4:	1961      	adds	r1, r4, r5
 800dce6:	42a3      	cmp	r3, r4
 800dce8:	6025      	str	r5, [r4, #0]
 800dcea:	bf18      	it	ne
 800dcec:	6059      	strne	r1, [r3, #4]
 800dcee:	6863      	ldr	r3, [r4, #4]
 800dcf0:	bf08      	it	eq
 800dcf2:	6031      	streq	r1, [r6, #0]
 800dcf4:	5162      	str	r2, [r4, r5]
 800dcf6:	604b      	str	r3, [r1, #4]
 800dcf8:	4638      	mov	r0, r7
 800dcfa:	f104 060b 	add.w	r6, r4, #11
 800dcfe:	f000 ff9f 	bl	800ec40 <__malloc_unlock>
 800dd02:	f026 0607 	bic.w	r6, r6, #7
 800dd06:	1d23      	adds	r3, r4, #4
 800dd08:	1af2      	subs	r2, r6, r3
 800dd0a:	d0b6      	beq.n	800dc7a <_malloc_r+0x22>
 800dd0c:	1b9b      	subs	r3, r3, r6
 800dd0e:	50a3      	str	r3, [r4, r2]
 800dd10:	e7b3      	b.n	800dc7a <_malloc_r+0x22>
 800dd12:	6862      	ldr	r2, [r4, #4]
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	bf0c      	ite	eq
 800dd18:	6032      	streq	r2, [r6, #0]
 800dd1a:	605a      	strne	r2, [r3, #4]
 800dd1c:	e7ec      	b.n	800dcf8 <_malloc_r+0xa0>
 800dd1e:	4623      	mov	r3, r4
 800dd20:	6864      	ldr	r4, [r4, #4]
 800dd22:	e7b2      	b.n	800dc8a <_malloc_r+0x32>
 800dd24:	4634      	mov	r4, r6
 800dd26:	6876      	ldr	r6, [r6, #4]
 800dd28:	e7b9      	b.n	800dc9e <_malloc_r+0x46>
 800dd2a:	230c      	movs	r3, #12
 800dd2c:	603b      	str	r3, [r7, #0]
 800dd2e:	4638      	mov	r0, r7
 800dd30:	f000 ff86 	bl	800ec40 <__malloc_unlock>
 800dd34:	e7a1      	b.n	800dc7a <_malloc_r+0x22>
 800dd36:	6025      	str	r5, [r4, #0]
 800dd38:	e7de      	b.n	800dcf8 <_malloc_r+0xa0>
 800dd3a:	bf00      	nop
 800dd3c:	200006e8 	.word	0x200006e8

0800dd40 <_sbrk_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4d06      	ldr	r5, [pc, #24]	; (800dd5c <_sbrk_r+0x1c>)
 800dd44:	2300      	movs	r3, #0
 800dd46:	4604      	mov	r4, r0
 800dd48:	4608      	mov	r0, r1
 800dd4a:	602b      	str	r3, [r5, #0]
 800dd4c:	f7f5 f826 	bl	8002d9c <_sbrk>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d102      	bne.n	800dd5a <_sbrk_r+0x1a>
 800dd54:	682b      	ldr	r3, [r5, #0]
 800dd56:	b103      	cbz	r3, 800dd5a <_sbrk_r+0x1a>
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	200006f0 	.word	0x200006f0

0800dd60 <_raise_r>:
 800dd60:	291f      	cmp	r1, #31
 800dd62:	b538      	push	{r3, r4, r5, lr}
 800dd64:	4604      	mov	r4, r0
 800dd66:	460d      	mov	r5, r1
 800dd68:	d904      	bls.n	800dd74 <_raise_r+0x14>
 800dd6a:	2316      	movs	r3, #22
 800dd6c:	6003      	str	r3, [r0, #0]
 800dd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd76:	b112      	cbz	r2, 800dd7e <_raise_r+0x1e>
 800dd78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd7c:	b94b      	cbnz	r3, 800dd92 <_raise_r+0x32>
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f000 f830 	bl	800dde4 <_getpid_r>
 800dd84:	462a      	mov	r2, r5
 800dd86:	4601      	mov	r1, r0
 800dd88:	4620      	mov	r0, r4
 800dd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd8e:	f000 b817 	b.w	800ddc0 <_kill_r>
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d00a      	beq.n	800ddac <_raise_r+0x4c>
 800dd96:	1c59      	adds	r1, r3, #1
 800dd98:	d103      	bne.n	800dda2 <_raise_r+0x42>
 800dd9a:	2316      	movs	r3, #22
 800dd9c:	6003      	str	r3, [r0, #0]
 800dd9e:	2001      	movs	r0, #1
 800dda0:	e7e7      	b.n	800dd72 <_raise_r+0x12>
 800dda2:	2400      	movs	r4, #0
 800dda4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dda8:	4628      	mov	r0, r5
 800ddaa:	4798      	blx	r3
 800ddac:	2000      	movs	r0, #0
 800ddae:	e7e0      	b.n	800dd72 <_raise_r+0x12>

0800ddb0 <raise>:
 800ddb0:	4b02      	ldr	r3, [pc, #8]	; (800ddbc <raise+0xc>)
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f7ff bfd3 	b.w	800dd60 <_raise_r>
 800ddba:	bf00      	nop
 800ddbc:	20000360 	.word	0x20000360

0800ddc0 <_kill_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d07      	ldr	r5, [pc, #28]	; (800dde0 <_kill_r+0x20>)
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	602b      	str	r3, [r5, #0]
 800ddce:	f7f4 ff5d 	bl	8002c8c <_kill>
 800ddd2:	1c43      	adds	r3, r0, #1
 800ddd4:	d102      	bne.n	800dddc <_kill_r+0x1c>
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	b103      	cbz	r3, 800dddc <_kill_r+0x1c>
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	bf00      	nop
 800dde0:	200006f0 	.word	0x200006f0

0800dde4 <_getpid_r>:
 800dde4:	f7f4 bf4a 	b.w	8002c7c <_getpid>

0800dde8 <__sread>:
 800dde8:	b510      	push	{r4, lr}
 800ddea:	460c      	mov	r4, r1
 800ddec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf0:	f000 ff2c 	bl	800ec4c <_read_r>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	bfab      	itete	ge
 800ddf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ddfa:	89a3      	ldrhlt	r3, [r4, #12]
 800ddfc:	181b      	addge	r3, r3, r0
 800ddfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de02:	bfac      	ite	ge
 800de04:	6563      	strge	r3, [r4, #84]	; 0x54
 800de06:	81a3      	strhlt	r3, [r4, #12]
 800de08:	bd10      	pop	{r4, pc}

0800de0a <__swrite>:
 800de0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de0e:	461f      	mov	r7, r3
 800de10:	898b      	ldrh	r3, [r1, #12]
 800de12:	05db      	lsls	r3, r3, #23
 800de14:	4605      	mov	r5, r0
 800de16:	460c      	mov	r4, r1
 800de18:	4616      	mov	r6, r2
 800de1a:	d505      	bpl.n	800de28 <__swrite+0x1e>
 800de1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de20:	2302      	movs	r3, #2
 800de22:	2200      	movs	r2, #0
 800de24:	f000 feec 	bl	800ec00 <_lseek_r>
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de32:	81a3      	strh	r3, [r4, #12]
 800de34:	4632      	mov	r2, r6
 800de36:	463b      	mov	r3, r7
 800de38:	4628      	mov	r0, r5
 800de3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de3e:	f000 b81f 	b.w	800de80 <_write_r>

0800de42 <__sseek>:
 800de42:	b510      	push	{r4, lr}
 800de44:	460c      	mov	r4, r1
 800de46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de4a:	f000 fed9 	bl	800ec00 <_lseek_r>
 800de4e:	1c43      	adds	r3, r0, #1
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	bf15      	itete	ne
 800de54:	6560      	strne	r0, [r4, #84]	; 0x54
 800de56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de5e:	81a3      	strheq	r3, [r4, #12]
 800de60:	bf18      	it	ne
 800de62:	81a3      	strhne	r3, [r4, #12]
 800de64:	bd10      	pop	{r4, pc}

0800de66 <__sclose>:
 800de66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de6a:	f000 b81b 	b.w	800dea4 <_close_r>

0800de6e <strcpy>:
 800de6e:	4603      	mov	r3, r0
 800de70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de74:	f803 2b01 	strb.w	r2, [r3], #1
 800de78:	2a00      	cmp	r2, #0
 800de7a:	d1f9      	bne.n	800de70 <strcpy+0x2>
 800de7c:	4770      	bx	lr
	...

0800de80 <_write_r>:
 800de80:	b538      	push	{r3, r4, r5, lr}
 800de82:	4d07      	ldr	r5, [pc, #28]	; (800dea0 <_write_r+0x20>)
 800de84:	4604      	mov	r4, r0
 800de86:	4608      	mov	r0, r1
 800de88:	4611      	mov	r1, r2
 800de8a:	2200      	movs	r2, #0
 800de8c:	602a      	str	r2, [r5, #0]
 800de8e:	461a      	mov	r2, r3
 800de90:	f7f4 ff33 	bl	8002cfa <_write>
 800de94:	1c43      	adds	r3, r0, #1
 800de96:	d102      	bne.n	800de9e <_write_r+0x1e>
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	b103      	cbz	r3, 800de9e <_write_r+0x1e>
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	bd38      	pop	{r3, r4, r5, pc}
 800dea0:	200006f0 	.word	0x200006f0

0800dea4 <_close_r>:
 800dea4:	b538      	push	{r3, r4, r5, lr}
 800dea6:	4d06      	ldr	r5, [pc, #24]	; (800dec0 <_close_r+0x1c>)
 800dea8:	2300      	movs	r3, #0
 800deaa:	4604      	mov	r4, r0
 800deac:	4608      	mov	r0, r1
 800deae:	602b      	str	r3, [r5, #0]
 800deb0:	f7f4 ff3f 	bl	8002d32 <_close>
 800deb4:	1c43      	adds	r3, r0, #1
 800deb6:	d102      	bne.n	800debe <_close_r+0x1a>
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	b103      	cbz	r3, 800debe <_close_r+0x1a>
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	200006f0 	.word	0x200006f0

0800dec4 <quorem>:
 800dec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec8:	6903      	ldr	r3, [r0, #16]
 800deca:	690c      	ldr	r4, [r1, #16]
 800decc:	42a3      	cmp	r3, r4
 800dece:	4607      	mov	r7, r0
 800ded0:	f2c0 8081 	blt.w	800dfd6 <quorem+0x112>
 800ded4:	3c01      	subs	r4, #1
 800ded6:	f101 0814 	add.w	r8, r1, #20
 800deda:	f100 0514 	add.w	r5, r0, #20
 800dede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dee2:	9301      	str	r3, [sp, #4]
 800dee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800deec:	3301      	adds	r3, #1
 800deee:	429a      	cmp	r2, r3
 800def0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800def4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800def8:	fbb2 f6f3 	udiv	r6, r2, r3
 800defc:	d331      	bcc.n	800df62 <quorem+0x9e>
 800defe:	f04f 0e00 	mov.w	lr, #0
 800df02:	4640      	mov	r0, r8
 800df04:	46ac      	mov	ip, r5
 800df06:	46f2      	mov	sl, lr
 800df08:	f850 2b04 	ldr.w	r2, [r0], #4
 800df0c:	b293      	uxth	r3, r2
 800df0e:	fb06 e303 	mla	r3, r6, r3, lr
 800df12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800df16:	b29b      	uxth	r3, r3
 800df18:	ebaa 0303 	sub.w	r3, sl, r3
 800df1c:	f8dc a000 	ldr.w	sl, [ip]
 800df20:	0c12      	lsrs	r2, r2, #16
 800df22:	fa13 f38a 	uxtah	r3, r3, sl
 800df26:	fb06 e202 	mla	r2, r6, r2, lr
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	9b00      	ldr	r3, [sp, #0]
 800df2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800df32:	b292      	uxth	r2, r2
 800df34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800df38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df3c:	f8bd 3000 	ldrh.w	r3, [sp]
 800df40:	4581      	cmp	r9, r0
 800df42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df46:	f84c 3b04 	str.w	r3, [ip], #4
 800df4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800df4e:	d2db      	bcs.n	800df08 <quorem+0x44>
 800df50:	f855 300b 	ldr.w	r3, [r5, fp]
 800df54:	b92b      	cbnz	r3, 800df62 <quorem+0x9e>
 800df56:	9b01      	ldr	r3, [sp, #4]
 800df58:	3b04      	subs	r3, #4
 800df5a:	429d      	cmp	r5, r3
 800df5c:	461a      	mov	r2, r3
 800df5e:	d32e      	bcc.n	800dfbe <quorem+0xfa>
 800df60:	613c      	str	r4, [r7, #16]
 800df62:	4638      	mov	r0, r7
 800df64:	f7ff fcd6 	bl	800d914 <__mcmp>
 800df68:	2800      	cmp	r0, #0
 800df6a:	db24      	blt.n	800dfb6 <quorem+0xf2>
 800df6c:	3601      	adds	r6, #1
 800df6e:	4628      	mov	r0, r5
 800df70:	f04f 0c00 	mov.w	ip, #0
 800df74:	f858 2b04 	ldr.w	r2, [r8], #4
 800df78:	f8d0 e000 	ldr.w	lr, [r0]
 800df7c:	b293      	uxth	r3, r2
 800df7e:	ebac 0303 	sub.w	r3, ip, r3
 800df82:	0c12      	lsrs	r2, r2, #16
 800df84:	fa13 f38e 	uxtah	r3, r3, lr
 800df88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800df8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df90:	b29b      	uxth	r3, r3
 800df92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df96:	45c1      	cmp	r9, r8
 800df98:	f840 3b04 	str.w	r3, [r0], #4
 800df9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dfa0:	d2e8      	bcs.n	800df74 <quorem+0xb0>
 800dfa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfaa:	b922      	cbnz	r2, 800dfb6 <quorem+0xf2>
 800dfac:	3b04      	subs	r3, #4
 800dfae:	429d      	cmp	r5, r3
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	d30a      	bcc.n	800dfca <quorem+0x106>
 800dfb4:	613c      	str	r4, [r7, #16]
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	b003      	add	sp, #12
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbe:	6812      	ldr	r2, [r2, #0]
 800dfc0:	3b04      	subs	r3, #4
 800dfc2:	2a00      	cmp	r2, #0
 800dfc4:	d1cc      	bne.n	800df60 <quorem+0x9c>
 800dfc6:	3c01      	subs	r4, #1
 800dfc8:	e7c7      	b.n	800df5a <quorem+0x96>
 800dfca:	6812      	ldr	r2, [r2, #0]
 800dfcc:	3b04      	subs	r3, #4
 800dfce:	2a00      	cmp	r2, #0
 800dfd0:	d1f0      	bne.n	800dfb4 <quorem+0xf0>
 800dfd2:	3c01      	subs	r4, #1
 800dfd4:	e7eb      	b.n	800dfae <quorem+0xea>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	e7ee      	b.n	800dfb8 <quorem+0xf4>
 800dfda:	0000      	movs	r0, r0
 800dfdc:	0000      	movs	r0, r0
	...

0800dfe0 <_dtoa_r>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	ed2d 8b04 	vpush	{d8-d9}
 800dfe8:	ec57 6b10 	vmov	r6, r7, d0
 800dfec:	b093      	sub	sp, #76	; 0x4c
 800dfee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dff4:	9106      	str	r1, [sp, #24]
 800dff6:	ee10 aa10 	vmov	sl, s0
 800dffa:	4604      	mov	r4, r0
 800dffc:	9209      	str	r2, [sp, #36]	; 0x24
 800dffe:	930c      	str	r3, [sp, #48]	; 0x30
 800e000:	46bb      	mov	fp, r7
 800e002:	b975      	cbnz	r5, 800e022 <_dtoa_r+0x42>
 800e004:	2010      	movs	r0, #16
 800e006:	f000 fe0d 	bl	800ec24 <malloc>
 800e00a:	4602      	mov	r2, r0
 800e00c:	6260      	str	r0, [r4, #36]	; 0x24
 800e00e:	b920      	cbnz	r0, 800e01a <_dtoa_r+0x3a>
 800e010:	4ba7      	ldr	r3, [pc, #668]	; (800e2b0 <_dtoa_r+0x2d0>)
 800e012:	21ea      	movs	r1, #234	; 0xea
 800e014:	48a7      	ldr	r0, [pc, #668]	; (800e2b4 <_dtoa_r+0x2d4>)
 800e016:	f7fe fa43 	bl	800c4a0 <__assert_func>
 800e01a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e01e:	6005      	str	r5, [r0, #0]
 800e020:	60c5      	str	r5, [r0, #12]
 800e022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e024:	6819      	ldr	r1, [r3, #0]
 800e026:	b151      	cbz	r1, 800e03e <_dtoa_r+0x5e>
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	604a      	str	r2, [r1, #4]
 800e02c:	2301      	movs	r3, #1
 800e02e:	4093      	lsls	r3, r2
 800e030:	608b      	str	r3, [r1, #8]
 800e032:	4620      	mov	r0, r4
 800e034:	f7ff fa2c 	bl	800d490 <_Bfree>
 800e038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	1e3b      	subs	r3, r7, #0
 800e040:	bfaa      	itet	ge
 800e042:	2300      	movge	r3, #0
 800e044:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e048:	f8c8 3000 	strge.w	r3, [r8]
 800e04c:	4b9a      	ldr	r3, [pc, #616]	; (800e2b8 <_dtoa_r+0x2d8>)
 800e04e:	bfbc      	itt	lt
 800e050:	2201      	movlt	r2, #1
 800e052:	f8c8 2000 	strlt.w	r2, [r8]
 800e056:	ea33 030b 	bics.w	r3, r3, fp
 800e05a:	d11b      	bne.n	800e094 <_dtoa_r+0xb4>
 800e05c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e05e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e062:	6013      	str	r3, [r2, #0]
 800e064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e068:	4333      	orrs	r3, r6
 800e06a:	f000 8592 	beq.w	800eb92 <_dtoa_r+0xbb2>
 800e06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e070:	b963      	cbnz	r3, 800e08c <_dtoa_r+0xac>
 800e072:	4b92      	ldr	r3, [pc, #584]	; (800e2bc <_dtoa_r+0x2dc>)
 800e074:	e022      	b.n	800e0bc <_dtoa_r+0xdc>
 800e076:	4b92      	ldr	r3, [pc, #584]	; (800e2c0 <_dtoa_r+0x2e0>)
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	3308      	adds	r3, #8
 800e07c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	9801      	ldr	r0, [sp, #4]
 800e082:	b013      	add	sp, #76	; 0x4c
 800e084:	ecbd 8b04 	vpop	{d8-d9}
 800e088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08c:	4b8b      	ldr	r3, [pc, #556]	; (800e2bc <_dtoa_r+0x2dc>)
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	3303      	adds	r3, #3
 800e092:	e7f3      	b.n	800e07c <_dtoa_r+0x9c>
 800e094:	2200      	movs	r2, #0
 800e096:	2300      	movs	r3, #0
 800e098:	4650      	mov	r0, sl
 800e09a:	4659      	mov	r1, fp
 800e09c:	f7f2 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0a0:	ec4b ab19 	vmov	d9, sl, fp
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	b158      	cbz	r0, 800e0c0 <_dtoa_r+0xe0>
 800e0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 856b 	beq.w	800eb8c <_dtoa_r+0xbac>
 800e0b6:	4883      	ldr	r0, [pc, #524]	; (800e2c4 <_dtoa_r+0x2e4>)
 800e0b8:	6018      	str	r0, [r3, #0]
 800e0ba:	1e43      	subs	r3, r0, #1
 800e0bc:	9301      	str	r3, [sp, #4]
 800e0be:	e7df      	b.n	800e080 <_dtoa_r+0xa0>
 800e0c0:	ec4b ab10 	vmov	d0, sl, fp
 800e0c4:	aa10      	add	r2, sp, #64	; 0x40
 800e0c6:	a911      	add	r1, sp, #68	; 0x44
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f7ff fcc9 	bl	800da60 <__d2b>
 800e0ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e0d2:	ee08 0a10 	vmov	s16, r0
 800e0d6:	2d00      	cmp	r5, #0
 800e0d8:	f000 8084 	beq.w	800e1e4 <_dtoa_r+0x204>
 800e0dc:	ee19 3a90 	vmov	r3, s19
 800e0e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e0e8:	4656      	mov	r6, sl
 800e0ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e0ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e0f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e0f6:	4b74      	ldr	r3, [pc, #464]	; (800e2c8 <_dtoa_r+0x2e8>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	4639      	mov	r1, r7
 800e0fe:	f7f2 f8c3 	bl	8000288 <__aeabi_dsub>
 800e102:	a365      	add	r3, pc, #404	; (adr r3, 800e298 <_dtoa_r+0x2b8>)
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	f7f2 fa76 	bl	80005f8 <__aeabi_dmul>
 800e10c:	a364      	add	r3, pc, #400	; (adr r3, 800e2a0 <_dtoa_r+0x2c0>)
 800e10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e112:	f7f2 f8bb 	bl	800028c <__adddf3>
 800e116:	4606      	mov	r6, r0
 800e118:	4628      	mov	r0, r5
 800e11a:	460f      	mov	r7, r1
 800e11c:	f7f2 fa02 	bl	8000524 <__aeabi_i2d>
 800e120:	a361      	add	r3, pc, #388	; (adr r3, 800e2a8 <_dtoa_r+0x2c8>)
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	f7f2 fa67 	bl	80005f8 <__aeabi_dmul>
 800e12a:	4602      	mov	r2, r0
 800e12c:	460b      	mov	r3, r1
 800e12e:	4630      	mov	r0, r6
 800e130:	4639      	mov	r1, r7
 800e132:	f7f2 f8ab 	bl	800028c <__adddf3>
 800e136:	4606      	mov	r6, r0
 800e138:	460f      	mov	r7, r1
 800e13a:	f7f2 fcf7 	bl	8000b2c <__aeabi_d2iz>
 800e13e:	2200      	movs	r2, #0
 800e140:	9000      	str	r0, [sp, #0]
 800e142:	2300      	movs	r3, #0
 800e144:	4630      	mov	r0, r6
 800e146:	4639      	mov	r1, r7
 800e148:	f7f2 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800e14c:	b150      	cbz	r0, 800e164 <_dtoa_r+0x184>
 800e14e:	9800      	ldr	r0, [sp, #0]
 800e150:	f7f2 f9e8 	bl	8000524 <__aeabi_i2d>
 800e154:	4632      	mov	r2, r6
 800e156:	463b      	mov	r3, r7
 800e158:	f7f2 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e15c:	b910      	cbnz	r0, 800e164 <_dtoa_r+0x184>
 800e15e:	9b00      	ldr	r3, [sp, #0]
 800e160:	3b01      	subs	r3, #1
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	9b00      	ldr	r3, [sp, #0]
 800e166:	2b16      	cmp	r3, #22
 800e168:	d85a      	bhi.n	800e220 <_dtoa_r+0x240>
 800e16a:	9a00      	ldr	r2, [sp, #0]
 800e16c:	4b57      	ldr	r3, [pc, #348]	; (800e2cc <_dtoa_r+0x2ec>)
 800e16e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	ec51 0b19 	vmov	r0, r1, d9
 800e17a:	f7f2 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d050      	beq.n	800e224 <_dtoa_r+0x244>
 800e182:	9b00      	ldr	r3, [sp, #0]
 800e184:	3b01      	subs	r3, #1
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	2300      	movs	r3, #0
 800e18a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e18e:	1b5d      	subs	r5, r3, r5
 800e190:	1e6b      	subs	r3, r5, #1
 800e192:	9305      	str	r3, [sp, #20]
 800e194:	bf45      	ittet	mi
 800e196:	f1c5 0301 	rsbmi	r3, r5, #1
 800e19a:	9304      	strmi	r3, [sp, #16]
 800e19c:	2300      	movpl	r3, #0
 800e19e:	2300      	movmi	r3, #0
 800e1a0:	bf4c      	ite	mi
 800e1a2:	9305      	strmi	r3, [sp, #20]
 800e1a4:	9304      	strpl	r3, [sp, #16]
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	db3d      	blt.n	800e228 <_dtoa_r+0x248>
 800e1ac:	9b05      	ldr	r3, [sp, #20]
 800e1ae:	9a00      	ldr	r2, [sp, #0]
 800e1b0:	920a      	str	r2, [sp, #40]	; 0x28
 800e1b2:	4413      	add	r3, r2
 800e1b4:	9305      	str	r3, [sp, #20]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	9307      	str	r3, [sp, #28]
 800e1ba:	9b06      	ldr	r3, [sp, #24]
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	f200 8089 	bhi.w	800e2d4 <_dtoa_r+0x2f4>
 800e1c2:	2b05      	cmp	r3, #5
 800e1c4:	bfc4      	itt	gt
 800e1c6:	3b04      	subgt	r3, #4
 800e1c8:	9306      	strgt	r3, [sp, #24]
 800e1ca:	9b06      	ldr	r3, [sp, #24]
 800e1cc:	f1a3 0302 	sub.w	r3, r3, #2
 800e1d0:	bfcc      	ite	gt
 800e1d2:	2500      	movgt	r5, #0
 800e1d4:	2501      	movle	r5, #1
 800e1d6:	2b03      	cmp	r3, #3
 800e1d8:	f200 8087 	bhi.w	800e2ea <_dtoa_r+0x30a>
 800e1dc:	e8df f003 	tbb	[pc, r3]
 800e1e0:	59383a2d 	.word	0x59383a2d
 800e1e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e1e8:	441d      	add	r5, r3
 800e1ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e1ee:	2b20      	cmp	r3, #32
 800e1f0:	bfc1      	itttt	gt
 800e1f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e1f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e1fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800e1fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e202:	bfda      	itte	le
 800e204:	f1c3 0320 	rsble	r3, r3, #32
 800e208:	fa06 f003 	lslle.w	r0, r6, r3
 800e20c:	4318      	orrgt	r0, r3
 800e20e:	f7f2 f979 	bl	8000504 <__aeabi_ui2d>
 800e212:	2301      	movs	r3, #1
 800e214:	4606      	mov	r6, r0
 800e216:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e21a:	3d01      	subs	r5, #1
 800e21c:	930e      	str	r3, [sp, #56]	; 0x38
 800e21e:	e76a      	b.n	800e0f6 <_dtoa_r+0x116>
 800e220:	2301      	movs	r3, #1
 800e222:	e7b2      	b.n	800e18a <_dtoa_r+0x1aa>
 800e224:	900b      	str	r0, [sp, #44]	; 0x2c
 800e226:	e7b1      	b.n	800e18c <_dtoa_r+0x1ac>
 800e228:	9b04      	ldr	r3, [sp, #16]
 800e22a:	9a00      	ldr	r2, [sp, #0]
 800e22c:	1a9b      	subs	r3, r3, r2
 800e22e:	9304      	str	r3, [sp, #16]
 800e230:	4253      	negs	r3, r2
 800e232:	9307      	str	r3, [sp, #28]
 800e234:	2300      	movs	r3, #0
 800e236:	930a      	str	r3, [sp, #40]	; 0x28
 800e238:	e7bf      	b.n	800e1ba <_dtoa_r+0x1da>
 800e23a:	2300      	movs	r3, #0
 800e23c:	9308      	str	r3, [sp, #32]
 800e23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e240:	2b00      	cmp	r3, #0
 800e242:	dc55      	bgt.n	800e2f0 <_dtoa_r+0x310>
 800e244:	2301      	movs	r3, #1
 800e246:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e24a:	461a      	mov	r2, r3
 800e24c:	9209      	str	r2, [sp, #36]	; 0x24
 800e24e:	e00c      	b.n	800e26a <_dtoa_r+0x28a>
 800e250:	2301      	movs	r3, #1
 800e252:	e7f3      	b.n	800e23c <_dtoa_r+0x25c>
 800e254:	2300      	movs	r3, #0
 800e256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e258:	9308      	str	r3, [sp, #32]
 800e25a:	9b00      	ldr	r3, [sp, #0]
 800e25c:	4413      	add	r3, r2
 800e25e:	9302      	str	r3, [sp, #8]
 800e260:	3301      	adds	r3, #1
 800e262:	2b01      	cmp	r3, #1
 800e264:	9303      	str	r3, [sp, #12]
 800e266:	bfb8      	it	lt
 800e268:	2301      	movlt	r3, #1
 800e26a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e26c:	2200      	movs	r2, #0
 800e26e:	6042      	str	r2, [r0, #4]
 800e270:	2204      	movs	r2, #4
 800e272:	f102 0614 	add.w	r6, r2, #20
 800e276:	429e      	cmp	r6, r3
 800e278:	6841      	ldr	r1, [r0, #4]
 800e27a:	d93d      	bls.n	800e2f8 <_dtoa_r+0x318>
 800e27c:	4620      	mov	r0, r4
 800e27e:	f7ff f8c7 	bl	800d410 <_Balloc>
 800e282:	9001      	str	r0, [sp, #4]
 800e284:	2800      	cmp	r0, #0
 800e286:	d13b      	bne.n	800e300 <_dtoa_r+0x320>
 800e288:	4b11      	ldr	r3, [pc, #68]	; (800e2d0 <_dtoa_r+0x2f0>)
 800e28a:	4602      	mov	r2, r0
 800e28c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e290:	e6c0      	b.n	800e014 <_dtoa_r+0x34>
 800e292:	2301      	movs	r3, #1
 800e294:	e7df      	b.n	800e256 <_dtoa_r+0x276>
 800e296:	bf00      	nop
 800e298:	636f4361 	.word	0x636f4361
 800e29c:	3fd287a7 	.word	0x3fd287a7
 800e2a0:	8b60c8b3 	.word	0x8b60c8b3
 800e2a4:	3fc68a28 	.word	0x3fc68a28
 800e2a8:	509f79fb 	.word	0x509f79fb
 800e2ac:	3fd34413 	.word	0x3fd34413
 800e2b0:	0800ef00 	.word	0x0800ef00
 800e2b4:	0800f093 	.word	0x0800f093
 800e2b8:	7ff00000 	.word	0x7ff00000
 800e2bc:	0800f08d 	.word	0x0800f08d
 800e2c0:	0800f084 	.word	0x0800f084
 800e2c4:	0800f092 	.word	0x0800f092
 800e2c8:	3ff80000 	.word	0x3ff80000
 800e2cc:	0800efb0 	.word	0x0800efb0
 800e2d0:	0800ef73 	.word	0x0800ef73
 800e2d4:	2501      	movs	r5, #1
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	9306      	str	r3, [sp, #24]
 800e2da:	9508      	str	r5, [sp, #32]
 800e2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2312      	movs	r3, #18
 800e2e8:	e7b0      	b.n	800e24c <_dtoa_r+0x26c>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	9308      	str	r3, [sp, #32]
 800e2ee:	e7f5      	b.n	800e2dc <_dtoa_r+0x2fc>
 800e2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e2f6:	e7b8      	b.n	800e26a <_dtoa_r+0x28a>
 800e2f8:	3101      	adds	r1, #1
 800e2fa:	6041      	str	r1, [r0, #4]
 800e2fc:	0052      	lsls	r2, r2, #1
 800e2fe:	e7b8      	b.n	800e272 <_dtoa_r+0x292>
 800e300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e302:	9a01      	ldr	r2, [sp, #4]
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	2b0e      	cmp	r3, #14
 800e30a:	f200 809d 	bhi.w	800e448 <_dtoa_r+0x468>
 800e30e:	2d00      	cmp	r5, #0
 800e310:	f000 809a 	beq.w	800e448 <_dtoa_r+0x468>
 800e314:	9b00      	ldr	r3, [sp, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	dd32      	ble.n	800e380 <_dtoa_r+0x3a0>
 800e31a:	4ab7      	ldr	r2, [pc, #732]	; (800e5f8 <_dtoa_r+0x618>)
 800e31c:	f003 030f 	and.w	r3, r3, #15
 800e320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e324:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e328:	9b00      	ldr	r3, [sp, #0]
 800e32a:	05d8      	lsls	r0, r3, #23
 800e32c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e330:	d516      	bpl.n	800e360 <_dtoa_r+0x380>
 800e332:	4bb2      	ldr	r3, [pc, #712]	; (800e5fc <_dtoa_r+0x61c>)
 800e334:	ec51 0b19 	vmov	r0, r1, d9
 800e338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e33c:	f7f2 fa86 	bl	800084c <__aeabi_ddiv>
 800e340:	f007 070f 	and.w	r7, r7, #15
 800e344:	4682      	mov	sl, r0
 800e346:	468b      	mov	fp, r1
 800e348:	2503      	movs	r5, #3
 800e34a:	4eac      	ldr	r6, [pc, #688]	; (800e5fc <_dtoa_r+0x61c>)
 800e34c:	b957      	cbnz	r7, 800e364 <_dtoa_r+0x384>
 800e34e:	4642      	mov	r2, r8
 800e350:	464b      	mov	r3, r9
 800e352:	4650      	mov	r0, sl
 800e354:	4659      	mov	r1, fp
 800e356:	f7f2 fa79 	bl	800084c <__aeabi_ddiv>
 800e35a:	4682      	mov	sl, r0
 800e35c:	468b      	mov	fp, r1
 800e35e:	e028      	b.n	800e3b2 <_dtoa_r+0x3d2>
 800e360:	2502      	movs	r5, #2
 800e362:	e7f2      	b.n	800e34a <_dtoa_r+0x36a>
 800e364:	07f9      	lsls	r1, r7, #31
 800e366:	d508      	bpl.n	800e37a <_dtoa_r+0x39a>
 800e368:	4640      	mov	r0, r8
 800e36a:	4649      	mov	r1, r9
 800e36c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e370:	f7f2 f942 	bl	80005f8 <__aeabi_dmul>
 800e374:	3501      	adds	r5, #1
 800e376:	4680      	mov	r8, r0
 800e378:	4689      	mov	r9, r1
 800e37a:	107f      	asrs	r7, r7, #1
 800e37c:	3608      	adds	r6, #8
 800e37e:	e7e5      	b.n	800e34c <_dtoa_r+0x36c>
 800e380:	f000 809b 	beq.w	800e4ba <_dtoa_r+0x4da>
 800e384:	9b00      	ldr	r3, [sp, #0]
 800e386:	4f9d      	ldr	r7, [pc, #628]	; (800e5fc <_dtoa_r+0x61c>)
 800e388:	425e      	negs	r6, r3
 800e38a:	4b9b      	ldr	r3, [pc, #620]	; (800e5f8 <_dtoa_r+0x618>)
 800e38c:	f006 020f 	and.w	r2, r6, #15
 800e390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	ec51 0b19 	vmov	r0, r1, d9
 800e39c:	f7f2 f92c 	bl	80005f8 <__aeabi_dmul>
 800e3a0:	1136      	asrs	r6, r6, #4
 800e3a2:	4682      	mov	sl, r0
 800e3a4:	468b      	mov	fp, r1
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	2502      	movs	r5, #2
 800e3aa:	2e00      	cmp	r6, #0
 800e3ac:	d17a      	bne.n	800e4a4 <_dtoa_r+0x4c4>
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d1d3      	bne.n	800e35a <_dtoa_r+0x37a>
 800e3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f000 8082 	beq.w	800e4be <_dtoa_r+0x4de>
 800e3ba:	4b91      	ldr	r3, [pc, #580]	; (800e600 <_dtoa_r+0x620>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4650      	mov	r0, sl
 800e3c0:	4659      	mov	r1, fp
 800e3c2:	f7f2 fb8b 	bl	8000adc <__aeabi_dcmplt>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d079      	beq.n	800e4be <_dtoa_r+0x4de>
 800e3ca:	9b03      	ldr	r3, [sp, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d076      	beq.n	800e4be <_dtoa_r+0x4de>
 800e3d0:	9b02      	ldr	r3, [sp, #8]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	dd36      	ble.n	800e444 <_dtoa_r+0x464>
 800e3d6:	9b00      	ldr	r3, [sp, #0]
 800e3d8:	4650      	mov	r0, sl
 800e3da:	4659      	mov	r1, fp
 800e3dc:	1e5f      	subs	r7, r3, #1
 800e3de:	2200      	movs	r2, #0
 800e3e0:	4b88      	ldr	r3, [pc, #544]	; (800e604 <_dtoa_r+0x624>)
 800e3e2:	f7f2 f909 	bl	80005f8 <__aeabi_dmul>
 800e3e6:	9e02      	ldr	r6, [sp, #8]
 800e3e8:	4682      	mov	sl, r0
 800e3ea:	468b      	mov	fp, r1
 800e3ec:	3501      	adds	r5, #1
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f7f2 f898 	bl	8000524 <__aeabi_i2d>
 800e3f4:	4652      	mov	r2, sl
 800e3f6:	465b      	mov	r3, fp
 800e3f8:	f7f2 f8fe 	bl	80005f8 <__aeabi_dmul>
 800e3fc:	4b82      	ldr	r3, [pc, #520]	; (800e608 <_dtoa_r+0x628>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	f7f1 ff44 	bl	800028c <__adddf3>
 800e404:	46d0      	mov	r8, sl
 800e406:	46d9      	mov	r9, fp
 800e408:	4682      	mov	sl, r0
 800e40a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e40e:	2e00      	cmp	r6, #0
 800e410:	d158      	bne.n	800e4c4 <_dtoa_r+0x4e4>
 800e412:	4b7e      	ldr	r3, [pc, #504]	; (800e60c <_dtoa_r+0x62c>)
 800e414:	2200      	movs	r2, #0
 800e416:	4640      	mov	r0, r8
 800e418:	4649      	mov	r1, r9
 800e41a:	f7f1 ff35 	bl	8000288 <__aeabi_dsub>
 800e41e:	4652      	mov	r2, sl
 800e420:	465b      	mov	r3, fp
 800e422:	4680      	mov	r8, r0
 800e424:	4689      	mov	r9, r1
 800e426:	f7f2 fb77 	bl	8000b18 <__aeabi_dcmpgt>
 800e42a:	2800      	cmp	r0, #0
 800e42c:	f040 8295 	bne.w	800e95a <_dtoa_r+0x97a>
 800e430:	4652      	mov	r2, sl
 800e432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e436:	4640      	mov	r0, r8
 800e438:	4649      	mov	r1, r9
 800e43a:	f7f2 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f040 8289 	bne.w	800e956 <_dtoa_r+0x976>
 800e444:	ec5b ab19 	vmov	sl, fp, d9
 800e448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f2c0 8148 	blt.w	800e6e0 <_dtoa_r+0x700>
 800e450:	9a00      	ldr	r2, [sp, #0]
 800e452:	2a0e      	cmp	r2, #14
 800e454:	f300 8144 	bgt.w	800e6e0 <_dtoa_r+0x700>
 800e458:	4b67      	ldr	r3, [pc, #412]	; (800e5f8 <_dtoa_r+0x618>)
 800e45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e45e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e464:	2b00      	cmp	r3, #0
 800e466:	f280 80d5 	bge.w	800e614 <_dtoa_r+0x634>
 800e46a:	9b03      	ldr	r3, [sp, #12]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f300 80d1 	bgt.w	800e614 <_dtoa_r+0x634>
 800e472:	f040 826f 	bne.w	800e954 <_dtoa_r+0x974>
 800e476:	4b65      	ldr	r3, [pc, #404]	; (800e60c <_dtoa_r+0x62c>)
 800e478:	2200      	movs	r2, #0
 800e47a:	4640      	mov	r0, r8
 800e47c:	4649      	mov	r1, r9
 800e47e:	f7f2 f8bb 	bl	80005f8 <__aeabi_dmul>
 800e482:	4652      	mov	r2, sl
 800e484:	465b      	mov	r3, fp
 800e486:	f7f2 fb3d 	bl	8000b04 <__aeabi_dcmpge>
 800e48a:	9e03      	ldr	r6, [sp, #12]
 800e48c:	4637      	mov	r7, r6
 800e48e:	2800      	cmp	r0, #0
 800e490:	f040 8245 	bne.w	800e91e <_dtoa_r+0x93e>
 800e494:	9d01      	ldr	r5, [sp, #4]
 800e496:	2331      	movs	r3, #49	; 0x31
 800e498:	f805 3b01 	strb.w	r3, [r5], #1
 800e49c:	9b00      	ldr	r3, [sp, #0]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	e240      	b.n	800e926 <_dtoa_r+0x946>
 800e4a4:	07f2      	lsls	r2, r6, #31
 800e4a6:	d505      	bpl.n	800e4b4 <_dtoa_r+0x4d4>
 800e4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4ac:	f7f2 f8a4 	bl	80005f8 <__aeabi_dmul>
 800e4b0:	3501      	adds	r5, #1
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	1076      	asrs	r6, r6, #1
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	e777      	b.n	800e3aa <_dtoa_r+0x3ca>
 800e4ba:	2502      	movs	r5, #2
 800e4bc:	e779      	b.n	800e3b2 <_dtoa_r+0x3d2>
 800e4be:	9f00      	ldr	r7, [sp, #0]
 800e4c0:	9e03      	ldr	r6, [sp, #12]
 800e4c2:	e794      	b.n	800e3ee <_dtoa_r+0x40e>
 800e4c4:	9901      	ldr	r1, [sp, #4]
 800e4c6:	4b4c      	ldr	r3, [pc, #304]	; (800e5f8 <_dtoa_r+0x618>)
 800e4c8:	4431      	add	r1, r6
 800e4ca:	910d      	str	r1, [sp, #52]	; 0x34
 800e4cc:	9908      	ldr	r1, [sp, #32]
 800e4ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e4d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4d6:	2900      	cmp	r1, #0
 800e4d8:	d043      	beq.n	800e562 <_dtoa_r+0x582>
 800e4da:	494d      	ldr	r1, [pc, #308]	; (800e610 <_dtoa_r+0x630>)
 800e4dc:	2000      	movs	r0, #0
 800e4de:	f7f2 f9b5 	bl	800084c <__aeabi_ddiv>
 800e4e2:	4652      	mov	r2, sl
 800e4e4:	465b      	mov	r3, fp
 800e4e6:	f7f1 fecf 	bl	8000288 <__aeabi_dsub>
 800e4ea:	9d01      	ldr	r5, [sp, #4]
 800e4ec:	4682      	mov	sl, r0
 800e4ee:	468b      	mov	fp, r1
 800e4f0:	4649      	mov	r1, r9
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	f7f2 fb1a 	bl	8000b2c <__aeabi_d2iz>
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	f7f2 f813 	bl	8000524 <__aeabi_i2d>
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	4640      	mov	r0, r8
 800e504:	4649      	mov	r1, r9
 800e506:	f7f1 febf 	bl	8000288 <__aeabi_dsub>
 800e50a:	3630      	adds	r6, #48	; 0x30
 800e50c:	f805 6b01 	strb.w	r6, [r5], #1
 800e510:	4652      	mov	r2, sl
 800e512:	465b      	mov	r3, fp
 800e514:	4680      	mov	r8, r0
 800e516:	4689      	mov	r9, r1
 800e518:	f7f2 fae0 	bl	8000adc <__aeabi_dcmplt>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	d163      	bne.n	800e5e8 <_dtoa_r+0x608>
 800e520:	4642      	mov	r2, r8
 800e522:	464b      	mov	r3, r9
 800e524:	4936      	ldr	r1, [pc, #216]	; (800e600 <_dtoa_r+0x620>)
 800e526:	2000      	movs	r0, #0
 800e528:	f7f1 feae 	bl	8000288 <__aeabi_dsub>
 800e52c:	4652      	mov	r2, sl
 800e52e:	465b      	mov	r3, fp
 800e530:	f7f2 fad4 	bl	8000adc <__aeabi_dcmplt>
 800e534:	2800      	cmp	r0, #0
 800e536:	f040 80b5 	bne.w	800e6a4 <_dtoa_r+0x6c4>
 800e53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e53c:	429d      	cmp	r5, r3
 800e53e:	d081      	beq.n	800e444 <_dtoa_r+0x464>
 800e540:	4b30      	ldr	r3, [pc, #192]	; (800e604 <_dtoa_r+0x624>)
 800e542:	2200      	movs	r2, #0
 800e544:	4650      	mov	r0, sl
 800e546:	4659      	mov	r1, fp
 800e548:	f7f2 f856 	bl	80005f8 <__aeabi_dmul>
 800e54c:	4b2d      	ldr	r3, [pc, #180]	; (800e604 <_dtoa_r+0x624>)
 800e54e:	4682      	mov	sl, r0
 800e550:	468b      	mov	fp, r1
 800e552:	4640      	mov	r0, r8
 800e554:	4649      	mov	r1, r9
 800e556:	2200      	movs	r2, #0
 800e558:	f7f2 f84e 	bl	80005f8 <__aeabi_dmul>
 800e55c:	4680      	mov	r8, r0
 800e55e:	4689      	mov	r9, r1
 800e560:	e7c6      	b.n	800e4f0 <_dtoa_r+0x510>
 800e562:	4650      	mov	r0, sl
 800e564:	4659      	mov	r1, fp
 800e566:	f7f2 f847 	bl	80005f8 <__aeabi_dmul>
 800e56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e56c:	9d01      	ldr	r5, [sp, #4]
 800e56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e570:	4682      	mov	sl, r0
 800e572:	468b      	mov	fp, r1
 800e574:	4649      	mov	r1, r9
 800e576:	4640      	mov	r0, r8
 800e578:	f7f2 fad8 	bl	8000b2c <__aeabi_d2iz>
 800e57c:	4606      	mov	r6, r0
 800e57e:	f7f1 ffd1 	bl	8000524 <__aeabi_i2d>
 800e582:	3630      	adds	r6, #48	; 0x30
 800e584:	4602      	mov	r2, r0
 800e586:	460b      	mov	r3, r1
 800e588:	4640      	mov	r0, r8
 800e58a:	4649      	mov	r1, r9
 800e58c:	f7f1 fe7c 	bl	8000288 <__aeabi_dsub>
 800e590:	f805 6b01 	strb.w	r6, [r5], #1
 800e594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e596:	429d      	cmp	r5, r3
 800e598:	4680      	mov	r8, r0
 800e59a:	4689      	mov	r9, r1
 800e59c:	f04f 0200 	mov.w	r2, #0
 800e5a0:	d124      	bne.n	800e5ec <_dtoa_r+0x60c>
 800e5a2:	4b1b      	ldr	r3, [pc, #108]	; (800e610 <_dtoa_r+0x630>)
 800e5a4:	4650      	mov	r0, sl
 800e5a6:	4659      	mov	r1, fp
 800e5a8:	f7f1 fe70 	bl	800028c <__adddf3>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	4649      	mov	r1, r9
 800e5b4:	f7f2 fab0 	bl	8000b18 <__aeabi_dcmpgt>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d173      	bne.n	800e6a4 <_dtoa_r+0x6c4>
 800e5bc:	4652      	mov	r2, sl
 800e5be:	465b      	mov	r3, fp
 800e5c0:	4913      	ldr	r1, [pc, #76]	; (800e610 <_dtoa_r+0x630>)
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	f7f1 fe60 	bl	8000288 <__aeabi_dsub>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	4640      	mov	r0, r8
 800e5ce:	4649      	mov	r1, r9
 800e5d0:	f7f2 fa84 	bl	8000adc <__aeabi_dcmplt>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	f43f af35 	beq.w	800e444 <_dtoa_r+0x464>
 800e5da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e5dc:	1e6b      	subs	r3, r5, #1
 800e5de:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e5e4:	2b30      	cmp	r3, #48	; 0x30
 800e5e6:	d0f8      	beq.n	800e5da <_dtoa_r+0x5fa>
 800e5e8:	9700      	str	r7, [sp, #0]
 800e5ea:	e049      	b.n	800e680 <_dtoa_r+0x6a0>
 800e5ec:	4b05      	ldr	r3, [pc, #20]	; (800e604 <_dtoa_r+0x624>)
 800e5ee:	f7f2 f803 	bl	80005f8 <__aeabi_dmul>
 800e5f2:	4680      	mov	r8, r0
 800e5f4:	4689      	mov	r9, r1
 800e5f6:	e7bd      	b.n	800e574 <_dtoa_r+0x594>
 800e5f8:	0800efb0 	.word	0x0800efb0
 800e5fc:	0800ef88 	.word	0x0800ef88
 800e600:	3ff00000 	.word	0x3ff00000
 800e604:	40240000 	.word	0x40240000
 800e608:	401c0000 	.word	0x401c0000
 800e60c:	40140000 	.word	0x40140000
 800e610:	3fe00000 	.word	0x3fe00000
 800e614:	9d01      	ldr	r5, [sp, #4]
 800e616:	4656      	mov	r6, sl
 800e618:	465f      	mov	r7, fp
 800e61a:	4642      	mov	r2, r8
 800e61c:	464b      	mov	r3, r9
 800e61e:	4630      	mov	r0, r6
 800e620:	4639      	mov	r1, r7
 800e622:	f7f2 f913 	bl	800084c <__aeabi_ddiv>
 800e626:	f7f2 fa81 	bl	8000b2c <__aeabi_d2iz>
 800e62a:	4682      	mov	sl, r0
 800e62c:	f7f1 ff7a 	bl	8000524 <__aeabi_i2d>
 800e630:	4642      	mov	r2, r8
 800e632:	464b      	mov	r3, r9
 800e634:	f7f1 ffe0 	bl	80005f8 <__aeabi_dmul>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	4630      	mov	r0, r6
 800e63e:	4639      	mov	r1, r7
 800e640:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e644:	f7f1 fe20 	bl	8000288 <__aeabi_dsub>
 800e648:	f805 6b01 	strb.w	r6, [r5], #1
 800e64c:	9e01      	ldr	r6, [sp, #4]
 800e64e:	9f03      	ldr	r7, [sp, #12]
 800e650:	1bae      	subs	r6, r5, r6
 800e652:	42b7      	cmp	r7, r6
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	d135      	bne.n	800e6c6 <_dtoa_r+0x6e6>
 800e65a:	f7f1 fe17 	bl	800028c <__adddf3>
 800e65e:	4642      	mov	r2, r8
 800e660:	464b      	mov	r3, r9
 800e662:	4606      	mov	r6, r0
 800e664:	460f      	mov	r7, r1
 800e666:	f7f2 fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800e66a:	b9d0      	cbnz	r0, 800e6a2 <_dtoa_r+0x6c2>
 800e66c:	4642      	mov	r2, r8
 800e66e:	464b      	mov	r3, r9
 800e670:	4630      	mov	r0, r6
 800e672:	4639      	mov	r1, r7
 800e674:	f7f2 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 800e678:	b110      	cbz	r0, 800e680 <_dtoa_r+0x6a0>
 800e67a:	f01a 0f01 	tst.w	sl, #1
 800e67e:	d110      	bne.n	800e6a2 <_dtoa_r+0x6c2>
 800e680:	4620      	mov	r0, r4
 800e682:	ee18 1a10 	vmov	r1, s16
 800e686:	f7fe ff03 	bl	800d490 <_Bfree>
 800e68a:	2300      	movs	r3, #0
 800e68c:	9800      	ldr	r0, [sp, #0]
 800e68e:	702b      	strb	r3, [r5, #0]
 800e690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e692:	3001      	adds	r0, #1
 800e694:	6018      	str	r0, [r3, #0]
 800e696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f43f acf1 	beq.w	800e080 <_dtoa_r+0xa0>
 800e69e:	601d      	str	r5, [r3, #0]
 800e6a0:	e4ee      	b.n	800e080 <_dtoa_r+0xa0>
 800e6a2:	9f00      	ldr	r7, [sp, #0]
 800e6a4:	462b      	mov	r3, r5
 800e6a6:	461d      	mov	r5, r3
 800e6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6ac:	2a39      	cmp	r2, #57	; 0x39
 800e6ae:	d106      	bne.n	800e6be <_dtoa_r+0x6de>
 800e6b0:	9a01      	ldr	r2, [sp, #4]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d1f7      	bne.n	800e6a6 <_dtoa_r+0x6c6>
 800e6b6:	9901      	ldr	r1, [sp, #4]
 800e6b8:	2230      	movs	r2, #48	; 0x30
 800e6ba:	3701      	adds	r7, #1
 800e6bc:	700a      	strb	r2, [r1, #0]
 800e6be:	781a      	ldrb	r2, [r3, #0]
 800e6c0:	3201      	adds	r2, #1
 800e6c2:	701a      	strb	r2, [r3, #0]
 800e6c4:	e790      	b.n	800e5e8 <_dtoa_r+0x608>
 800e6c6:	4ba6      	ldr	r3, [pc, #664]	; (800e960 <_dtoa_r+0x980>)
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f7f1 ff95 	bl	80005f8 <__aeabi_dmul>
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	4606      	mov	r6, r0
 800e6d4:	460f      	mov	r7, r1
 800e6d6:	f7f2 f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d09d      	beq.n	800e61a <_dtoa_r+0x63a>
 800e6de:	e7cf      	b.n	800e680 <_dtoa_r+0x6a0>
 800e6e0:	9a08      	ldr	r2, [sp, #32]
 800e6e2:	2a00      	cmp	r2, #0
 800e6e4:	f000 80d7 	beq.w	800e896 <_dtoa_r+0x8b6>
 800e6e8:	9a06      	ldr	r2, [sp, #24]
 800e6ea:	2a01      	cmp	r2, #1
 800e6ec:	f300 80ba 	bgt.w	800e864 <_dtoa_r+0x884>
 800e6f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6f2:	2a00      	cmp	r2, #0
 800e6f4:	f000 80b2 	beq.w	800e85c <_dtoa_r+0x87c>
 800e6f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e6fc:	9e07      	ldr	r6, [sp, #28]
 800e6fe:	9d04      	ldr	r5, [sp, #16]
 800e700:	9a04      	ldr	r2, [sp, #16]
 800e702:	441a      	add	r2, r3
 800e704:	9204      	str	r2, [sp, #16]
 800e706:	9a05      	ldr	r2, [sp, #20]
 800e708:	2101      	movs	r1, #1
 800e70a:	441a      	add	r2, r3
 800e70c:	4620      	mov	r0, r4
 800e70e:	9205      	str	r2, [sp, #20]
 800e710:	f7fe ff76 	bl	800d600 <__i2b>
 800e714:	4607      	mov	r7, r0
 800e716:	2d00      	cmp	r5, #0
 800e718:	dd0c      	ble.n	800e734 <_dtoa_r+0x754>
 800e71a:	9b05      	ldr	r3, [sp, #20]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	dd09      	ble.n	800e734 <_dtoa_r+0x754>
 800e720:	42ab      	cmp	r3, r5
 800e722:	9a04      	ldr	r2, [sp, #16]
 800e724:	bfa8      	it	ge
 800e726:	462b      	movge	r3, r5
 800e728:	1ad2      	subs	r2, r2, r3
 800e72a:	9204      	str	r2, [sp, #16]
 800e72c:	9a05      	ldr	r2, [sp, #20]
 800e72e:	1aed      	subs	r5, r5, r3
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	9305      	str	r3, [sp, #20]
 800e734:	9b07      	ldr	r3, [sp, #28]
 800e736:	b31b      	cbz	r3, 800e780 <_dtoa_r+0x7a0>
 800e738:	9b08      	ldr	r3, [sp, #32]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	f000 80af 	beq.w	800e89e <_dtoa_r+0x8be>
 800e740:	2e00      	cmp	r6, #0
 800e742:	dd13      	ble.n	800e76c <_dtoa_r+0x78c>
 800e744:	4639      	mov	r1, r7
 800e746:	4632      	mov	r2, r6
 800e748:	4620      	mov	r0, r4
 800e74a:	f7ff f819 	bl	800d780 <__pow5mult>
 800e74e:	ee18 2a10 	vmov	r2, s16
 800e752:	4601      	mov	r1, r0
 800e754:	4607      	mov	r7, r0
 800e756:	4620      	mov	r0, r4
 800e758:	f7fe ff68 	bl	800d62c <__multiply>
 800e75c:	ee18 1a10 	vmov	r1, s16
 800e760:	4680      	mov	r8, r0
 800e762:	4620      	mov	r0, r4
 800e764:	f7fe fe94 	bl	800d490 <_Bfree>
 800e768:	ee08 8a10 	vmov	s16, r8
 800e76c:	9b07      	ldr	r3, [sp, #28]
 800e76e:	1b9a      	subs	r2, r3, r6
 800e770:	d006      	beq.n	800e780 <_dtoa_r+0x7a0>
 800e772:	ee18 1a10 	vmov	r1, s16
 800e776:	4620      	mov	r0, r4
 800e778:	f7ff f802 	bl	800d780 <__pow5mult>
 800e77c:	ee08 0a10 	vmov	s16, r0
 800e780:	2101      	movs	r1, #1
 800e782:	4620      	mov	r0, r4
 800e784:	f7fe ff3c 	bl	800d600 <__i2b>
 800e788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	4606      	mov	r6, r0
 800e78e:	f340 8088 	ble.w	800e8a2 <_dtoa_r+0x8c2>
 800e792:	461a      	mov	r2, r3
 800e794:	4601      	mov	r1, r0
 800e796:	4620      	mov	r0, r4
 800e798:	f7fe fff2 	bl	800d780 <__pow5mult>
 800e79c:	9b06      	ldr	r3, [sp, #24]
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	4606      	mov	r6, r0
 800e7a2:	f340 8081 	ble.w	800e8a8 <_dtoa_r+0x8c8>
 800e7a6:	f04f 0800 	mov.w	r8, #0
 800e7aa:	6933      	ldr	r3, [r6, #16]
 800e7ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e7b0:	6918      	ldr	r0, [r3, #16]
 800e7b2:	f7fe fed5 	bl	800d560 <__hi0bits>
 800e7b6:	f1c0 0020 	rsb	r0, r0, #32
 800e7ba:	9b05      	ldr	r3, [sp, #20]
 800e7bc:	4418      	add	r0, r3
 800e7be:	f010 001f 	ands.w	r0, r0, #31
 800e7c2:	f000 8092 	beq.w	800e8ea <_dtoa_r+0x90a>
 800e7c6:	f1c0 0320 	rsb	r3, r0, #32
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	f340 808a 	ble.w	800e8e4 <_dtoa_r+0x904>
 800e7d0:	f1c0 001c 	rsb	r0, r0, #28
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	4403      	add	r3, r0
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	9b05      	ldr	r3, [sp, #20]
 800e7dc:	4403      	add	r3, r0
 800e7de:	4405      	add	r5, r0
 800e7e0:	9305      	str	r3, [sp, #20]
 800e7e2:	9b04      	ldr	r3, [sp, #16]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dd07      	ble.n	800e7f8 <_dtoa_r+0x818>
 800e7e8:	ee18 1a10 	vmov	r1, s16
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f7ff f820 	bl	800d834 <__lshift>
 800e7f4:	ee08 0a10 	vmov	s16, r0
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	dd05      	ble.n	800e80a <_dtoa_r+0x82a>
 800e7fe:	4631      	mov	r1, r6
 800e800:	461a      	mov	r2, r3
 800e802:	4620      	mov	r0, r4
 800e804:	f7ff f816 	bl	800d834 <__lshift>
 800e808:	4606      	mov	r6, r0
 800e80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d06e      	beq.n	800e8ee <_dtoa_r+0x90e>
 800e810:	ee18 0a10 	vmov	r0, s16
 800e814:	4631      	mov	r1, r6
 800e816:	f7ff f87d 	bl	800d914 <__mcmp>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	da67      	bge.n	800e8ee <_dtoa_r+0x90e>
 800e81e:	9b00      	ldr	r3, [sp, #0]
 800e820:	3b01      	subs	r3, #1
 800e822:	ee18 1a10 	vmov	r1, s16
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	220a      	movs	r2, #10
 800e82a:	2300      	movs	r3, #0
 800e82c:	4620      	mov	r0, r4
 800e82e:	f7fe fe51 	bl	800d4d4 <__multadd>
 800e832:	9b08      	ldr	r3, [sp, #32]
 800e834:	ee08 0a10 	vmov	s16, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 81b1 	beq.w	800eba0 <_dtoa_r+0xbc0>
 800e83e:	2300      	movs	r3, #0
 800e840:	4639      	mov	r1, r7
 800e842:	220a      	movs	r2, #10
 800e844:	4620      	mov	r0, r4
 800e846:	f7fe fe45 	bl	800d4d4 <__multadd>
 800e84a:	9b02      	ldr	r3, [sp, #8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	4607      	mov	r7, r0
 800e850:	f300 808e 	bgt.w	800e970 <_dtoa_r+0x990>
 800e854:	9b06      	ldr	r3, [sp, #24]
 800e856:	2b02      	cmp	r3, #2
 800e858:	dc51      	bgt.n	800e8fe <_dtoa_r+0x91e>
 800e85a:	e089      	b.n	800e970 <_dtoa_r+0x990>
 800e85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e85e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e862:	e74b      	b.n	800e6fc <_dtoa_r+0x71c>
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	1e5e      	subs	r6, r3, #1
 800e868:	9b07      	ldr	r3, [sp, #28]
 800e86a:	42b3      	cmp	r3, r6
 800e86c:	bfbf      	itttt	lt
 800e86e:	9b07      	ldrlt	r3, [sp, #28]
 800e870:	9607      	strlt	r6, [sp, #28]
 800e872:	1af2      	sublt	r2, r6, r3
 800e874:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e876:	bfb6      	itet	lt
 800e878:	189b      	addlt	r3, r3, r2
 800e87a:	1b9e      	subge	r6, r3, r6
 800e87c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e87e:	9b03      	ldr	r3, [sp, #12]
 800e880:	bfb8      	it	lt
 800e882:	2600      	movlt	r6, #0
 800e884:	2b00      	cmp	r3, #0
 800e886:	bfb7      	itett	lt
 800e888:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e88c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e890:	1a9d      	sublt	r5, r3, r2
 800e892:	2300      	movlt	r3, #0
 800e894:	e734      	b.n	800e700 <_dtoa_r+0x720>
 800e896:	9e07      	ldr	r6, [sp, #28]
 800e898:	9d04      	ldr	r5, [sp, #16]
 800e89a:	9f08      	ldr	r7, [sp, #32]
 800e89c:	e73b      	b.n	800e716 <_dtoa_r+0x736>
 800e89e:	9a07      	ldr	r2, [sp, #28]
 800e8a0:	e767      	b.n	800e772 <_dtoa_r+0x792>
 800e8a2:	9b06      	ldr	r3, [sp, #24]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	dc18      	bgt.n	800e8da <_dtoa_r+0x8fa>
 800e8a8:	f1ba 0f00 	cmp.w	sl, #0
 800e8ac:	d115      	bne.n	800e8da <_dtoa_r+0x8fa>
 800e8ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8b2:	b993      	cbnz	r3, 800e8da <_dtoa_r+0x8fa>
 800e8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8b8:	0d1b      	lsrs	r3, r3, #20
 800e8ba:	051b      	lsls	r3, r3, #20
 800e8bc:	b183      	cbz	r3, 800e8e0 <_dtoa_r+0x900>
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	9304      	str	r3, [sp, #16]
 800e8c4:	9b05      	ldr	r3, [sp, #20]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	9305      	str	r3, [sp, #20]
 800e8ca:	f04f 0801 	mov.w	r8, #1
 800e8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f47f af6a 	bne.w	800e7aa <_dtoa_r+0x7ca>
 800e8d6:	2001      	movs	r0, #1
 800e8d8:	e76f      	b.n	800e7ba <_dtoa_r+0x7da>
 800e8da:	f04f 0800 	mov.w	r8, #0
 800e8de:	e7f6      	b.n	800e8ce <_dtoa_r+0x8ee>
 800e8e0:	4698      	mov	r8, r3
 800e8e2:	e7f4      	b.n	800e8ce <_dtoa_r+0x8ee>
 800e8e4:	f43f af7d 	beq.w	800e7e2 <_dtoa_r+0x802>
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	301c      	adds	r0, #28
 800e8ec:	e772      	b.n	800e7d4 <_dtoa_r+0x7f4>
 800e8ee:	9b03      	ldr	r3, [sp, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	dc37      	bgt.n	800e964 <_dtoa_r+0x984>
 800e8f4:	9b06      	ldr	r3, [sp, #24]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	dd34      	ble.n	800e964 <_dtoa_r+0x984>
 800e8fa:	9b03      	ldr	r3, [sp, #12]
 800e8fc:	9302      	str	r3, [sp, #8]
 800e8fe:	9b02      	ldr	r3, [sp, #8]
 800e900:	b96b      	cbnz	r3, 800e91e <_dtoa_r+0x93e>
 800e902:	4631      	mov	r1, r6
 800e904:	2205      	movs	r2, #5
 800e906:	4620      	mov	r0, r4
 800e908:	f7fe fde4 	bl	800d4d4 <__multadd>
 800e90c:	4601      	mov	r1, r0
 800e90e:	4606      	mov	r6, r0
 800e910:	ee18 0a10 	vmov	r0, s16
 800e914:	f7fe fffe 	bl	800d914 <__mcmp>
 800e918:	2800      	cmp	r0, #0
 800e91a:	f73f adbb 	bgt.w	800e494 <_dtoa_r+0x4b4>
 800e91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e920:	9d01      	ldr	r5, [sp, #4]
 800e922:	43db      	mvns	r3, r3
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	f04f 0800 	mov.w	r8, #0
 800e92a:	4631      	mov	r1, r6
 800e92c:	4620      	mov	r0, r4
 800e92e:	f7fe fdaf 	bl	800d490 <_Bfree>
 800e932:	2f00      	cmp	r7, #0
 800e934:	f43f aea4 	beq.w	800e680 <_dtoa_r+0x6a0>
 800e938:	f1b8 0f00 	cmp.w	r8, #0
 800e93c:	d005      	beq.n	800e94a <_dtoa_r+0x96a>
 800e93e:	45b8      	cmp	r8, r7
 800e940:	d003      	beq.n	800e94a <_dtoa_r+0x96a>
 800e942:	4641      	mov	r1, r8
 800e944:	4620      	mov	r0, r4
 800e946:	f7fe fda3 	bl	800d490 <_Bfree>
 800e94a:	4639      	mov	r1, r7
 800e94c:	4620      	mov	r0, r4
 800e94e:	f7fe fd9f 	bl	800d490 <_Bfree>
 800e952:	e695      	b.n	800e680 <_dtoa_r+0x6a0>
 800e954:	2600      	movs	r6, #0
 800e956:	4637      	mov	r7, r6
 800e958:	e7e1      	b.n	800e91e <_dtoa_r+0x93e>
 800e95a:	9700      	str	r7, [sp, #0]
 800e95c:	4637      	mov	r7, r6
 800e95e:	e599      	b.n	800e494 <_dtoa_r+0x4b4>
 800e960:	40240000 	.word	0x40240000
 800e964:	9b08      	ldr	r3, [sp, #32]
 800e966:	2b00      	cmp	r3, #0
 800e968:	f000 80ca 	beq.w	800eb00 <_dtoa_r+0xb20>
 800e96c:	9b03      	ldr	r3, [sp, #12]
 800e96e:	9302      	str	r3, [sp, #8]
 800e970:	2d00      	cmp	r5, #0
 800e972:	dd05      	ble.n	800e980 <_dtoa_r+0x9a0>
 800e974:	4639      	mov	r1, r7
 800e976:	462a      	mov	r2, r5
 800e978:	4620      	mov	r0, r4
 800e97a:	f7fe ff5b 	bl	800d834 <__lshift>
 800e97e:	4607      	mov	r7, r0
 800e980:	f1b8 0f00 	cmp.w	r8, #0
 800e984:	d05b      	beq.n	800ea3e <_dtoa_r+0xa5e>
 800e986:	6879      	ldr	r1, [r7, #4]
 800e988:	4620      	mov	r0, r4
 800e98a:	f7fe fd41 	bl	800d410 <_Balloc>
 800e98e:	4605      	mov	r5, r0
 800e990:	b928      	cbnz	r0, 800e99e <_dtoa_r+0x9be>
 800e992:	4b87      	ldr	r3, [pc, #540]	; (800ebb0 <_dtoa_r+0xbd0>)
 800e994:	4602      	mov	r2, r0
 800e996:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e99a:	f7ff bb3b 	b.w	800e014 <_dtoa_r+0x34>
 800e99e:	693a      	ldr	r2, [r7, #16]
 800e9a0:	3202      	adds	r2, #2
 800e9a2:	0092      	lsls	r2, r2, #2
 800e9a4:	f107 010c 	add.w	r1, r7, #12
 800e9a8:	300c      	adds	r0, #12
 800e9aa:	f7fd fdf7 	bl	800c59c <memcpy>
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	4629      	mov	r1, r5
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f7fe ff3e 	bl	800d834 <__lshift>
 800e9b8:	9b01      	ldr	r3, [sp, #4]
 800e9ba:	f103 0901 	add.w	r9, r3, #1
 800e9be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	9305      	str	r3, [sp, #20]
 800e9c6:	f00a 0301 	and.w	r3, sl, #1
 800e9ca:	46b8      	mov	r8, r7
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	4607      	mov	r7, r0
 800e9d0:	4631      	mov	r1, r6
 800e9d2:	ee18 0a10 	vmov	r0, s16
 800e9d6:	f7ff fa75 	bl	800dec4 <quorem>
 800e9da:	4641      	mov	r1, r8
 800e9dc:	9002      	str	r0, [sp, #8]
 800e9de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e9e2:	ee18 0a10 	vmov	r0, s16
 800e9e6:	f7fe ff95 	bl	800d914 <__mcmp>
 800e9ea:	463a      	mov	r2, r7
 800e9ec:	9003      	str	r0, [sp, #12]
 800e9ee:	4631      	mov	r1, r6
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f7fe ffab 	bl	800d94c <__mdiff>
 800e9f6:	68c2      	ldr	r2, [r0, #12]
 800e9f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	bb02      	cbnz	r2, 800ea42 <_dtoa_r+0xa62>
 800ea00:	4601      	mov	r1, r0
 800ea02:	ee18 0a10 	vmov	r0, s16
 800ea06:	f7fe ff85 	bl	800d914 <__mcmp>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4620      	mov	r0, r4
 800ea10:	9207      	str	r2, [sp, #28]
 800ea12:	f7fe fd3d 	bl	800d490 <_Bfree>
 800ea16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ea1a:	ea43 0102 	orr.w	r1, r3, r2
 800ea1e:	9b04      	ldr	r3, [sp, #16]
 800ea20:	430b      	orrs	r3, r1
 800ea22:	464d      	mov	r5, r9
 800ea24:	d10f      	bne.n	800ea46 <_dtoa_r+0xa66>
 800ea26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea2a:	d02a      	beq.n	800ea82 <_dtoa_r+0xaa2>
 800ea2c:	9b03      	ldr	r3, [sp, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	dd02      	ble.n	800ea38 <_dtoa_r+0xa58>
 800ea32:	9b02      	ldr	r3, [sp, #8]
 800ea34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ea38:	f88b a000 	strb.w	sl, [fp]
 800ea3c:	e775      	b.n	800e92a <_dtoa_r+0x94a>
 800ea3e:	4638      	mov	r0, r7
 800ea40:	e7ba      	b.n	800e9b8 <_dtoa_r+0x9d8>
 800ea42:	2201      	movs	r2, #1
 800ea44:	e7e2      	b.n	800ea0c <_dtoa_r+0xa2c>
 800ea46:	9b03      	ldr	r3, [sp, #12]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	db04      	blt.n	800ea56 <_dtoa_r+0xa76>
 800ea4c:	9906      	ldr	r1, [sp, #24]
 800ea4e:	430b      	orrs	r3, r1
 800ea50:	9904      	ldr	r1, [sp, #16]
 800ea52:	430b      	orrs	r3, r1
 800ea54:	d122      	bne.n	800ea9c <_dtoa_r+0xabc>
 800ea56:	2a00      	cmp	r2, #0
 800ea58:	ddee      	ble.n	800ea38 <_dtoa_r+0xa58>
 800ea5a:	ee18 1a10 	vmov	r1, s16
 800ea5e:	2201      	movs	r2, #1
 800ea60:	4620      	mov	r0, r4
 800ea62:	f7fe fee7 	bl	800d834 <__lshift>
 800ea66:	4631      	mov	r1, r6
 800ea68:	ee08 0a10 	vmov	s16, r0
 800ea6c:	f7fe ff52 	bl	800d914 <__mcmp>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	dc03      	bgt.n	800ea7c <_dtoa_r+0xa9c>
 800ea74:	d1e0      	bne.n	800ea38 <_dtoa_r+0xa58>
 800ea76:	f01a 0f01 	tst.w	sl, #1
 800ea7a:	d0dd      	beq.n	800ea38 <_dtoa_r+0xa58>
 800ea7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea80:	d1d7      	bne.n	800ea32 <_dtoa_r+0xa52>
 800ea82:	2339      	movs	r3, #57	; 0x39
 800ea84:	f88b 3000 	strb.w	r3, [fp]
 800ea88:	462b      	mov	r3, r5
 800ea8a:	461d      	mov	r5, r3
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ea92:	2a39      	cmp	r2, #57	; 0x39
 800ea94:	d071      	beq.n	800eb7a <_dtoa_r+0xb9a>
 800ea96:	3201      	adds	r2, #1
 800ea98:	701a      	strb	r2, [r3, #0]
 800ea9a:	e746      	b.n	800e92a <_dtoa_r+0x94a>
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	dd07      	ble.n	800eab0 <_dtoa_r+0xad0>
 800eaa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eaa4:	d0ed      	beq.n	800ea82 <_dtoa_r+0xaa2>
 800eaa6:	f10a 0301 	add.w	r3, sl, #1
 800eaaa:	f88b 3000 	strb.w	r3, [fp]
 800eaae:	e73c      	b.n	800e92a <_dtoa_r+0x94a>
 800eab0:	9b05      	ldr	r3, [sp, #20]
 800eab2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800eab6:	4599      	cmp	r9, r3
 800eab8:	d047      	beq.n	800eb4a <_dtoa_r+0xb6a>
 800eaba:	ee18 1a10 	vmov	r1, s16
 800eabe:	2300      	movs	r3, #0
 800eac0:	220a      	movs	r2, #10
 800eac2:	4620      	mov	r0, r4
 800eac4:	f7fe fd06 	bl	800d4d4 <__multadd>
 800eac8:	45b8      	cmp	r8, r7
 800eaca:	ee08 0a10 	vmov	s16, r0
 800eace:	f04f 0300 	mov.w	r3, #0
 800ead2:	f04f 020a 	mov.w	r2, #10
 800ead6:	4641      	mov	r1, r8
 800ead8:	4620      	mov	r0, r4
 800eada:	d106      	bne.n	800eaea <_dtoa_r+0xb0a>
 800eadc:	f7fe fcfa 	bl	800d4d4 <__multadd>
 800eae0:	4680      	mov	r8, r0
 800eae2:	4607      	mov	r7, r0
 800eae4:	f109 0901 	add.w	r9, r9, #1
 800eae8:	e772      	b.n	800e9d0 <_dtoa_r+0x9f0>
 800eaea:	f7fe fcf3 	bl	800d4d4 <__multadd>
 800eaee:	4639      	mov	r1, r7
 800eaf0:	4680      	mov	r8, r0
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	220a      	movs	r2, #10
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f7fe fcec 	bl	800d4d4 <__multadd>
 800eafc:	4607      	mov	r7, r0
 800eafe:	e7f1      	b.n	800eae4 <_dtoa_r+0xb04>
 800eb00:	9b03      	ldr	r3, [sp, #12]
 800eb02:	9302      	str	r3, [sp, #8]
 800eb04:	9d01      	ldr	r5, [sp, #4]
 800eb06:	ee18 0a10 	vmov	r0, s16
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	f7ff f9da 	bl	800dec4 <quorem>
 800eb10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb14:	9b01      	ldr	r3, [sp, #4]
 800eb16:	f805 ab01 	strb.w	sl, [r5], #1
 800eb1a:	1aea      	subs	r2, r5, r3
 800eb1c:	9b02      	ldr	r3, [sp, #8]
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	dd09      	ble.n	800eb36 <_dtoa_r+0xb56>
 800eb22:	ee18 1a10 	vmov	r1, s16
 800eb26:	2300      	movs	r3, #0
 800eb28:	220a      	movs	r2, #10
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f7fe fcd2 	bl	800d4d4 <__multadd>
 800eb30:	ee08 0a10 	vmov	s16, r0
 800eb34:	e7e7      	b.n	800eb06 <_dtoa_r+0xb26>
 800eb36:	9b02      	ldr	r3, [sp, #8]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	bfc8      	it	gt
 800eb3c:	461d      	movgt	r5, r3
 800eb3e:	9b01      	ldr	r3, [sp, #4]
 800eb40:	bfd8      	it	le
 800eb42:	2501      	movle	r5, #1
 800eb44:	441d      	add	r5, r3
 800eb46:	f04f 0800 	mov.w	r8, #0
 800eb4a:	ee18 1a10 	vmov	r1, s16
 800eb4e:	2201      	movs	r2, #1
 800eb50:	4620      	mov	r0, r4
 800eb52:	f7fe fe6f 	bl	800d834 <__lshift>
 800eb56:	4631      	mov	r1, r6
 800eb58:	ee08 0a10 	vmov	s16, r0
 800eb5c:	f7fe feda 	bl	800d914 <__mcmp>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	dc91      	bgt.n	800ea88 <_dtoa_r+0xaa8>
 800eb64:	d102      	bne.n	800eb6c <_dtoa_r+0xb8c>
 800eb66:	f01a 0f01 	tst.w	sl, #1
 800eb6a:	d18d      	bne.n	800ea88 <_dtoa_r+0xaa8>
 800eb6c:	462b      	mov	r3, r5
 800eb6e:	461d      	mov	r5, r3
 800eb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb74:	2a30      	cmp	r2, #48	; 0x30
 800eb76:	d0fa      	beq.n	800eb6e <_dtoa_r+0xb8e>
 800eb78:	e6d7      	b.n	800e92a <_dtoa_r+0x94a>
 800eb7a:	9a01      	ldr	r2, [sp, #4]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d184      	bne.n	800ea8a <_dtoa_r+0xaaa>
 800eb80:	9b00      	ldr	r3, [sp, #0]
 800eb82:	3301      	adds	r3, #1
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	2331      	movs	r3, #49	; 0x31
 800eb88:	7013      	strb	r3, [r2, #0]
 800eb8a:	e6ce      	b.n	800e92a <_dtoa_r+0x94a>
 800eb8c:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <_dtoa_r+0xbd4>)
 800eb8e:	f7ff ba95 	b.w	800e0bc <_dtoa_r+0xdc>
 800eb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f47f aa6e 	bne.w	800e076 <_dtoa_r+0x96>
 800eb9a:	4b07      	ldr	r3, [pc, #28]	; (800ebb8 <_dtoa_r+0xbd8>)
 800eb9c:	f7ff ba8e 	b.w	800e0bc <_dtoa_r+0xdc>
 800eba0:	9b02      	ldr	r3, [sp, #8]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	dcae      	bgt.n	800eb04 <_dtoa_r+0xb24>
 800eba6:	9b06      	ldr	r3, [sp, #24]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	f73f aea8 	bgt.w	800e8fe <_dtoa_r+0x91e>
 800ebae:	e7a9      	b.n	800eb04 <_dtoa_r+0xb24>
 800ebb0:	0800ef73 	.word	0x0800ef73
 800ebb4:	0800f091 	.word	0x0800f091
 800ebb8:	0800f084 	.word	0x0800f084

0800ebbc <_fstat_r>:
 800ebbc:	b538      	push	{r3, r4, r5, lr}
 800ebbe:	4d07      	ldr	r5, [pc, #28]	; (800ebdc <_fstat_r+0x20>)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	4608      	mov	r0, r1
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	602b      	str	r3, [r5, #0]
 800ebca:	f7f4 f8be 	bl	8002d4a <_fstat>
 800ebce:	1c43      	adds	r3, r0, #1
 800ebd0:	d102      	bne.n	800ebd8 <_fstat_r+0x1c>
 800ebd2:	682b      	ldr	r3, [r5, #0]
 800ebd4:	b103      	cbz	r3, 800ebd8 <_fstat_r+0x1c>
 800ebd6:	6023      	str	r3, [r4, #0]
 800ebd8:	bd38      	pop	{r3, r4, r5, pc}
 800ebda:	bf00      	nop
 800ebdc:	200006f0 	.word	0x200006f0

0800ebe0 <_isatty_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	4d06      	ldr	r5, [pc, #24]	; (800ebfc <_isatty_r+0x1c>)
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	4608      	mov	r0, r1
 800ebea:	602b      	str	r3, [r5, #0]
 800ebec:	f7f4 f8bd 	bl	8002d6a <_isatty>
 800ebf0:	1c43      	adds	r3, r0, #1
 800ebf2:	d102      	bne.n	800ebfa <_isatty_r+0x1a>
 800ebf4:	682b      	ldr	r3, [r5, #0]
 800ebf6:	b103      	cbz	r3, 800ebfa <_isatty_r+0x1a>
 800ebf8:	6023      	str	r3, [r4, #0]
 800ebfa:	bd38      	pop	{r3, r4, r5, pc}
 800ebfc:	200006f0 	.word	0x200006f0

0800ec00 <_lseek_r>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4d07      	ldr	r5, [pc, #28]	; (800ec20 <_lseek_r+0x20>)
 800ec04:	4604      	mov	r4, r0
 800ec06:	4608      	mov	r0, r1
 800ec08:	4611      	mov	r1, r2
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	602a      	str	r2, [r5, #0]
 800ec0e:	461a      	mov	r2, r3
 800ec10:	f7f4 f8b6 	bl	8002d80 <_lseek>
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	d102      	bne.n	800ec1e <_lseek_r+0x1e>
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	b103      	cbz	r3, 800ec1e <_lseek_r+0x1e>
 800ec1c:	6023      	str	r3, [r4, #0]
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	200006f0 	.word	0x200006f0

0800ec24 <malloc>:
 800ec24:	4b02      	ldr	r3, [pc, #8]	; (800ec30 <malloc+0xc>)
 800ec26:	4601      	mov	r1, r0
 800ec28:	6818      	ldr	r0, [r3, #0]
 800ec2a:	f7ff b815 	b.w	800dc58 <_malloc_r>
 800ec2e:	bf00      	nop
 800ec30:	20000360 	.word	0x20000360

0800ec34 <__malloc_lock>:
 800ec34:	4801      	ldr	r0, [pc, #4]	; (800ec3c <__malloc_lock+0x8>)
 800ec36:	f7fe bb83 	b.w	800d340 <__retarget_lock_acquire_recursive>
 800ec3a:	bf00      	nop
 800ec3c:	200006e4 	.word	0x200006e4

0800ec40 <__malloc_unlock>:
 800ec40:	4801      	ldr	r0, [pc, #4]	; (800ec48 <__malloc_unlock+0x8>)
 800ec42:	f7fe bb7e 	b.w	800d342 <__retarget_lock_release_recursive>
 800ec46:	bf00      	nop
 800ec48:	200006e4 	.word	0x200006e4

0800ec4c <_read_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	4d07      	ldr	r5, [pc, #28]	; (800ec6c <_read_r+0x20>)
 800ec50:	4604      	mov	r4, r0
 800ec52:	4608      	mov	r0, r1
 800ec54:	4611      	mov	r1, r2
 800ec56:	2200      	movs	r2, #0
 800ec58:	602a      	str	r2, [r5, #0]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	f7f4 f830 	bl	8002cc0 <_read>
 800ec60:	1c43      	adds	r3, r0, #1
 800ec62:	d102      	bne.n	800ec6a <_read_r+0x1e>
 800ec64:	682b      	ldr	r3, [r5, #0]
 800ec66:	b103      	cbz	r3, 800ec6a <_read_r+0x1e>
 800ec68:	6023      	str	r3, [r4, #0]
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}
 800ec6c:	200006f0 	.word	0x200006f0

0800ec70 <trunc>:
 800ec70:	ec51 0b10 	vmov	r0, r1, d0
 800ec74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec78:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ec7c:	2b13      	cmp	r3, #19
 800ec7e:	b5d0      	push	{r4, r6, r7, lr}
 800ec80:	460c      	mov	r4, r1
 800ec82:	dc10      	bgt.n	800eca6 <trunc+0x36>
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	bfa5      	ittet	ge
 800ec88:	4a11      	ldrge	r2, [pc, #68]	; (800ecd0 <trunc+0x60>)
 800ec8a:	fa42 f303 	asrge.w	r3, r2, r3
 800ec8e:	2100      	movlt	r1, #0
 800ec90:	2100      	movge	r1, #0
 800ec92:	bfb9      	ittee	lt
 800ec94:	2000      	movlt	r0, #0
 800ec96:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800ec9a:	2000      	movge	r0, #0
 800ec9c:	ea24 0103 	bicge.w	r1, r4, r3
 800eca0:	ec41 0b10 	vmov	d0, r0, r1
 800eca4:	bdd0      	pop	{r4, r6, r7, pc}
 800eca6:	2b33      	cmp	r3, #51	; 0x33
 800eca8:	dd08      	ble.n	800ecbc <trunc+0x4c>
 800ecaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecae:	d1f7      	bne.n	800eca0 <trunc+0x30>
 800ecb0:	ee10 2a10 	vmov	r2, s0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	f7f1 fae9 	bl	800028c <__adddf3>
 800ecba:	e7f1      	b.n	800eca0 <trunc+0x30>
 800ecbc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ecc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc4:	fa23 f202 	lsr.w	r2, r3, r2
 800ecc8:	ea20 0602 	bic.w	r6, r0, r2
 800eccc:	4630      	mov	r0, r6
 800ecce:	e7e7      	b.n	800eca0 <trunc+0x30>
 800ecd0:	000fffff 	.word	0x000fffff

0800ecd4 <_init>:
 800ecd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd6:	bf00      	nop
 800ecd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecda:	bc08      	pop	{r3}
 800ecdc:	469e      	mov	lr, r3
 800ecde:	4770      	bx	lr

0800ece0 <_fini>:
 800ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece2:	bf00      	nop
 800ece4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ece6:	bc08      	pop	{r3}
 800ece8:	469e      	mov	lr, r3
 800ecea:	4770      	bx	lr
